function createDOM(b, a) {
  var c = document.createElement(b)
  c.setAttribute('class', a)
  return c
}
;(function (b) {
  b.fn.preventScroll = function () {
    for (var a = 0; a < this.length; a++) {
      var c = this.get(a)
      c.addEventListener(
        'DOMMouseScroll',
        function (a) {
          c.scrollTop += 0 < a.detail ? 60 : -60
          a.preventDefault()
        },
        !1
      )
      c.onmousewheel = function (a) {
        a.currentTarget == c &&
          ((a = a || window.event),
          (c.scrollTop += 0 < a.wheelDelta ? -60 : 60),
          (a.returnValue = !1),
          a.preventDefault(),
          a.stopPropagation())
      }
      c.onmousedown = function (a) {
        a.returnValue = !1
        a.preventDefault()
        a.stopPropagation()
      }
      c.onmouseup = function (a) {
        a.returnValue = !1
        a.preventDefault()
        a.stopPropagation()
      }
      c.onclick = function (a) {
        a.returnValue = !1
        a.preventDefault()
        a.stopPropagation()
      }
    }
    return this
  }
})(jQuery)
var Tree = function (b) {
  this._root = this._tree
}
Tree.prototype = {
  getRoot: function () {
    return this.treeDOM
  },
  getChecked: function () {
    function b(d, e) {
      var f = d.getCheckedState(),
        g = d.element.getAttribute('data-filter')
      switch (f) {
        case 'checked':
          d == a
            ? (c = 'all')
            : ((f = Object.assign({}, e)), (f[g] = d.id), c.push(f))
          break
        case 'half':
          var f = d.getControls(),
            h = Object.assign({}, e)
          d != a && (h[g] = d.id)
          for (var g = 0, k = f.length; g < k; g++) b(f[g], h)
      }
    }
    var a = this.treeDOM,
      c = []
    return b(a, {}), c
  },
  getSelection: function () {
    function b(a, c) {
      var d = a.element.getAttribute('data-filter'),
        e = a.getParent()
      if (!e) return c
      c[d] = a.id
      b(e, c)
    }
    var a = this._selectionNode,
      c = {}
    return !!a && (b(a, c), c)
  },
  clear: function (b) {
    var a = this.getRoot()
    !(function d(a) {
      a.setCheckedState(b)
      a.setIconState('default')
      if ((a = a.getControls()) && 0 < a.length)
        for (var f = 0; f < a.length; f++) d(a[f])
    })(a)
  },
}
var TreeNode = function (b, a, c, d, e) {
  this.id = c
  this.parent = null
  this.parentId = 0
  this.type = d
  this.viewer = a
  this.element = createDOM('div', 'qm-tree')
  this.element.setAttribute('title', b)
  a = 'qm-tree-node'
  e && (a += ' qm-collapse')
  this.treeNodeDOM = createDOM('div', a)
  this.element.appendChild(this.treeNodeDOM)
  this._opt = { isChecked: !0 }
  this._selectionState = 'unSelected'
  this.setData(b)
  this.subTreeList = []
}
TreeNode.prototype.setData = function (b) {
  var a = this
  a.checkDOM = createDOM(
    'span',
    'qm-label ' + (this._opt.isChecked ? 'qm-checked' : '')
  )
  a.checkDOM.innerHTML =
    '\x3cinput type\x3d"checkbox" checked\x3d"' +
    a._opt.isChecked +
    '"\x3e\x3cspan class\x3d"qm-checkbox"\x3e\x3c/span\x3e'
  a.treeNodeDOM.appendChild(this.checkDOM)
  a.checkDOM.addEventListener('click', function (c) {
    var b = this.getElementsByTagName('input')[0].checked
    0 == a.type
      ? a.viewer._0xD6ByTree(-1, 0, 0, b)
      : 3 == a.type
      ? a.viewer._0xD6ByTree(a.parent.parentId, a.parentId, a.id, b)
      : 1 == a.type
      ? a.viewer._0xD6ByTree(a.parentId, a.id, 0, b)
      : 4 == a.type && a.viewer._0xD6ByTree(a.id, 0, 0, b)
    a.OnbfLableClick(c, b)
    console.log(b ? 'unchecked' : 'checked')
  })
  this.transDOM = createDOM('div', 'qm-tree-icon gld-qm-untransparent')
  this.transDOM.setAttribute('title', '\u534a\u900f\u660e')
  this.transDOM.addEventListener('click', function (c) {
    console.log(c.target)
    c = c.target.parentNode.parentNode.getElementsByClassName('qm-tree-icon')
    if (0 != c.length) {
      var b = c[0].classList.contains('gld-qm-untransparent'),
        e = 1
      b && (e = 0.2)
      0 == a.type
        ? a.viewer._0xD8ByTree(a.id, 0, e)
        : 3 == a.type
        ? a.viewer._0xD8ByTree(a.id, a.parentId, e)
        : 1 == a.type
        ? a.viewer._0xD8ByTree(0, a.id, e)
        : 4 == a.type &&
          a.subTreeList.forEach(function (c) {
            a.viewer._0xD8ByTree(0, c.id, e)
          })
      for (var f = 0; f < c.length; f++) {
        var g = c[f]
        b
          ? (g.classList.remove('gld-qm-untransparent'),
            g.classList.add('gld-qm-transparent'))
          : (g.classList.add('gld-qm-untransparent'),
            g.classList.remove('gld-qm-transparent'))
      }
    }
  })
  this.treeNodeDOM.appendChild(this.transDOM)
  this.treeNameDOM = createDOM('span', 'qm-tree-name')
  this.treeNameDOM.innerHTML = b
  this.treeNodeDOM.appendChild(this.treeNameDOM)
}
TreeNode.prototype.addChildNode = function (b) {
  if (null == this.subTreeDOM) {
    this.subTreeDOM = createDOM('div', 'qm-sub-tree')
    var a = createDOM('span', 'qm-icon')
    this.treeNodeDOM.insertBefore(a, this.treeNodeDOM.children[0])
    a.addEventListener('click', function (a) {
      a = a.target.parentNode
      'DIV' == a.tagName &&
        (a.classList.contains('qm-collapse')
          ? a.classList.remove('qm-collapse')
          : a.classList.add('qm-collapse'))
    })
    this.element.appendChild(this.subTreeDOM)
  }
  b.parentId = this.id
  b.parent = this
  this.subTreeList.push(b)
  this.subTreeDOM.appendChild(b.element)
}
TreeNode.prototype.OnbfLableClick = function (b, a) {
  var c = b.target
  c.classList.contains('qm-checkbox') && (c = c.parentNode)
  for (
    var d = c.parentNode.parentNode.getElementsByClassName('qm-label'), e = 0;
    e < d.length;
    e++
  )
    (c = d[e]),
      a
        ? (c.classList.add('qm-unchecked'),
          c.classList.remove('qm-checked'),
          (c.getElementsByTagName('input')[0].checked = !1))
        : (c.classList.remove('qm-unchecked'),
          c.classList.add('qm-checked'),
          (c.getElementsByTagName('input')[0].checked = !0))
}
TreeNode.prototype.doUncheck = function () {
  this.checkDOM.classList.add('qm-unchecked')
  this.checkDOM.classList.remove('qm-checked')
}
TreeNode.prototype.removeChildNode = function (b) {
  var a = this._controls.getObjectByAttribute('id', b)
  this.subTreeDOM.removeChild(a.element)
  this._controls.removeObjectByAttribute('id', b)
}
TreeNode.prototype.getCheckedState = function () {
  return this._checkedState
}
TreeNode.prototype.getIconState = function () {
  return this._iconState
}
TreeNode.prototype.getSelectionState = function () {
  return this._selectionState
}
TreeNode.prototype.getParent = function () {
  return !!this._parent && this._parent
}
TreeNode.prototype.setCheckedState = function (b) {
  var a = this._opt
  this._checkedState = b ? 'checked' : 'unchecked'
  a.hasCheckbox &&
    this.checkbox &&
    ((this.checkbox.getElementsByTagName('input')[0].checked = b),
    this.checkbox.toggleClass('qm-checked', b),
    this.checkbox.toggleClass('qm-unchecked', !b),
    this.checkbox.removeClass('qm-half'))
  this.setChildrenCheckedState(b)
}
TreeNode.prototype.setIconState = function (b) {
  this.icon &&
    (this.icon.setState(b),
    this.setChildrenIconState(b),
    (this._iconState = 'default' == b))
}
TreeNode.prototype.setParentCheckedState = function (b) {
  if ((b = this.getControls()) && 0 < b.length) {
    for (var a, c = 0, d = b.length; c < d; c++) {
      var e = b[c].getCheckedState()
      a ? e != a && (a = 'half') : (a = e)
    }
    this._checkedState = a
  }
  switch (this._checkedState) {
    case 'checked':
      this.checkbox.getElementsByTagName('input')[0].checked = !0
      this.checkbox.addClass('qm-checked')
      this.checkbox.removeClass('qm-unchecked')
      this.checkbox.removeClass('qm-half')
      break
    case 'unchecked':
      this.checkbox.getElementsByTagName('input')[0].checked = !1
      this.checkbox.addClass('qm-unchecked')
      this.checkbox.removeClass('qm-checked')
      this.checkbox.removeClass('qm-half')
      break
    case 'half':
      ;(this.checkbox.getElementsByTagName('input')[0].checked = !0),
        this.checkbox.addClass('qm-half'),
        this.checkbox.removeClass('qm-unchecked'),
        this.checkbox.removeClass('qm-checked')
  }
}
TreeNode.prototype.setChildrenCheckedState = function (b) {
  var a = this.getControls(),
    c = a.length
  if (a && 0 < c) for (var d = 0; d < c; d++) a[d].setCheckedState(b)
}
TreeNode.prototype.setParentIconState = function (b) {
  if ((b = this.getControls()) && 0 < b.length) {
    for (var a = !1, c = 0, d = b.length; c < d; c++) {
      var e = b[c].getIconState()
      if (e) {
        a = e
        break
      }
    }
    this._iconState = a
  }
  a ? this.icon.setState('default') : this.icon.setState('change')
}
TreeNode.prototype.setChildrenIconState = function (b) {
  var a = this.getControls(),
    c = a.length
  if (a && 0 < c) for (var d = 0; d < c; d++) a[d].setIconState(b)
}
TreeNode.prototype.expand = function () {
  this.treeNode.removeClass('qm-collapse')
  this.eventManager.fireEvent('Expand', this)
}
TreeNode.prototype.collapse = function () {
  this.treeNode.addClass('qm-collapse')
  this.eventManager.fireEvent('Collapse', this)
}
TreeNode.prototype.toggleExpansion = function (b) {
  this.treeNode.hasClass('qm-collapse') ? this.expand() : this.collapse()
}
TreeNode.prototype.select = function () {
  if (this._selection) return this.treeName.addClass('qm-selected')
}
TreeNode.prototype.deselect = function () {
  this.treeName && this.treeName.removeClass('qm-selected')
}
TreeNode.prototype.disabled = function () {
  this._enabled = !1
  this.treeName.addClass('qm-disabled')
}
TreeNode.prototype.enabled = function () {
  this._enabled = !0
  this.treeName.removeClass('qm-disabled')
}
TreeNode.prototype.addNode = function (b) {
  this.treeNode.appendChild(b)
}
TreeNode.prototype.removeNode = function (b) {
  this.treeNode.appendChild(b)
}
var TreeTableNode = function (b) {
  this.element = b
  this.bodyDom = null
}
TreeTableNode.prototype.addtbTale = function (b) {
  var a = this
  this.bodyDom = createDOM('tbody', 'qm-group undefined')
  this.element.appendChild(this.bodyDom)
  var c = createDOM('tr', 'qm-group-title'),
    d = createDOM('td', '')
  d.setAttribute('colspan', 2)
  d.innerHTML = b.text
  var e = createDOM('i', 'qm-icon')
  d.appendChild(e)
  c.appendChild(d)
  e.addEventListener('click', function (a) {
    a = a.target.parentNode
    'TD' == a.tagName &&
      ((a = a.parentNode.parentNode),
      a.classList.contains('qm-collapse')
        ? a.classList.remove('qm-collapse')
        : a.classList.add('qm-collapse'))
  })
  this.bodyDom.appendChild(c)
  b.children.forEach(function (b) {
    b = b.split(',')
    var c = createDOM('tr', 'qm-group-content')
    c.innerHTML =
      ' \x3ctd class\x3d"qm-key"\x3e' +
      b[0] +
      '\x3c/td\x3e\x3ctd class\x3d"qm-value"\x3e' +
      b[1] +
      '\x3c/td\x3e'
    a.bodyDom.appendChild(c)
  })
}
