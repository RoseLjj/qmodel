var $jscomp = { scope: {} }
$jscomp.defineProperty =
  'function' == typeof Object.defineProperties
    ? Object.defineProperty
    : function (f, m, g) {
        if (g.get || g.set)
          throw new TypeError('ES3 does not support getters and setters.')
        f != Array.prototype && f != Object.prototype && (f[m] = g.value)
      }
$jscomp.getGlobal = function (f) {
  return 'undefined' != typeof window && window === f
    ? f
    : 'undefined' != typeof global
    ? global
    : f
}
$jscomp.global = $jscomp.getGlobal(this)
$jscomp.SYMBOL_PREFIX = 'jscomp_symbol_'
$jscomp.initSymbol = function () {
  $jscomp.initSymbol = function () {}
  $jscomp.global.Symbol || ($jscomp.global.Symbol = $jscomp.Symbol)
}
$jscomp.symbolCounter_ = 0
$jscomp.Symbol = function (f) {
  return $jscomp.SYMBOL_PREFIX + (f || '') + $jscomp.symbolCounter_++
}
$jscomp.initSymbolIterator = function () {
  $jscomp.initSymbol()
  var f = $jscomp.global.Symbol.iterator
  f || (f = $jscomp.global.Symbol.iterator = $jscomp.global.Symbol('iterator'))
  'function' != typeof Array.prototype[f] &&
    $jscomp.defineProperty(Array.prototype, f, {
      configurable: !0,
      writable: !0,
      value: function () {
        return $jscomp.arrayIterator(this)
      },
    })
  $jscomp.initSymbolIterator = function () {}
}
$jscomp.arrayIterator = function (f) {
  var m = 0
  return $jscomp.iteratorPrototype(function () {
    return m < f.length ? { done: !1, value: f[m++] } : { done: !0 }
  })
}
$jscomp.iteratorPrototype = function (f) {
  $jscomp.initSymbolIterator()
  f = { next: f }
  f[$jscomp.global.Symbol.iterator] = function () {
    return this
  }
  return f
}
$jscomp.makeIterator = function (f) {
  $jscomp.initSymbolIterator()
  var m = f[Symbol.iterator]
  return m ? m.call(f) : $jscomp.arrayIterator(f)
}
;(function (f, m) {
  'object' === typeof exports && 'undefined' !== typeof module
    ? m(exports)
    : 'function' === typeof define && define.amd
    ? define(['exports'], m)
    : ((f = 'undefined' !== typeof globalThis ? globalThis : f || self),
      m((f.THREE = {})))
})(this, function (f) {
  function m() {}
  function g(c, a, b, d, e, h, l, q, t, A) {
    Object.defineProperty(this, 'id', { value: $i++ })
    this.uuid = ea.generateUUID()
    this.name = ''
    this.image = void 0 !== c ? c : g.DEFAULT_IMAGE
    this.mipmaps = []
    this.mapping = void 0 !== a ? a : g.DEFAULT_MAPPING
    this.wrapS = void 0 !== b ? b : 1001
    this.wrapT = void 0 !== d ? d : 1001
    this.magFilter = void 0 !== e ? e : 1006
    this.minFilter = void 0 !== h ? h : 1008
    this.anisotropy = void 0 !== t ? t : 1
    this.format = void 0 !== l ? l : 1023
    this.internalFormat = null
    this.type = void 0 !== q ? q : 1009
    this.offset = new B(0, 0)
    this.repeat = new B(1, 1)
    this.center = new B(0, 0)
    this.rotation = 0
    this.matrixAutoUpdate = !0
    this.matrix = new ha()
    this.generateMipmaps = !0
    this.premultiplyAlpha = !1
    this.flipY = !0
    this.unpackAlignment = 4
    this.encoding = void 0 !== A ? A : 3e3
    this.version = 0
    this.onUpdate = null
  }
  function k(c, a, b) {
    this.width = c
    this.height = a
    this.scissor = new P(0, 0, c, a)
    this.scissorTest = !1
    this.viewport = new P(0, 0, c, a)
    b = b || {}
    this.texture = new g(
      void 0,
      b.mapping,
      b.wrapS,
      b.wrapT,
      b.magFilter,
      b.minFilter,
      b.format,
      b.type,
      b.anisotropy,
      b.encoding
    )
    this.texture.image = {}
    this.texture.image.width = c
    this.texture.image.height = a
    this.texture.generateMipmaps =
      void 0 !== b.generateMipmaps ? b.generateMipmaps : !1
    this.texture.minFilter = void 0 !== b.minFilter ? b.minFilter : 1006
    this.depthBuffer = void 0 !== b.depthBuffer ? b.depthBuffer : !0
    this.stencilBuffer = void 0 !== b.stencilBuffer ? b.stencilBuffer : !1
    this.depthTexture = void 0 !== b.depthTexture ? b.depthTexture : null
  }
  function r(c, a, b) {
    k.call(this, c, a, b)
    this.samples = 4
  }
  function x(c, a, b, d, e) {
    for (var h = 0, l = c.length - 3; h <= l; h += 3) {
      uc.fromArray(c, h)
      var q =
          e.x * Math.abs(uc.x) + e.y * Math.abs(uc.y) + e.z * Math.abs(uc.z),
        t = a.dot(uc),
        A = b.dot(uc),
        f = d.dot(uc)
      if (Math.max(-Math.max(t, A, f), Math.min(t, A, f)) > q) return !1
    }
    return !0
  }
  function n() {
    Object.defineProperty(this, 'id', { value: aj++ })
    this.uuid = ea.generateUUID()
    this.name = ''
    this.type = 'Object3D'
    this.parent = null
    this.children = []
    this.up = n.DefaultUp.clone()
    var c = new p(),
      a = new Fa(),
      b = new Z(),
      d = new p(1, 1, 1)
    a._onChange(function () {
      b.setFromEuler(a, !1)
    })
    b._onChange(function () {
      a.setFromQuaternion(b, void 0, !1)
    })
    Object.defineProperties(this, {
      position: { configurable: !0, enumerable: !0, value: c },
      rotation: { configurable: !0, enumerable: !0, value: a },
      quaternion: { configurable: !0, enumerable: !0, value: b },
      scale: { configurable: !0, enumerable: !0, value: d },
      modelViewMatrix: { value: new O() },
      normalMatrix: { value: new ha() },
    })
    this.matrix = new O()
    this.matrixWorld = new O()
    this.matrixAutoUpdate = n.DefaultMatrixAutoUpdate
    this.matrixWorldNeedsUpdate = !1
    this.layers = new Ab()
    this.visible = !0
    this.receiveShadow = this.castShadow = !1
    this.frustumCulled = !0
    this.renderOrder = 0
    this.userData = {}
  }
  function z(c, a, b) {
    0 > b && (b += 1)
    1 < b && --b
    return b < 1 / 6
      ? c + 6 * (a - c) * b
      : 0.5 > b
      ? a
      : b < 2 / 3
      ? c + 6 * (a - c) * (2 / 3 - b)
      : c
  }
  function u(c) {
    return 0.04045 > c
      ? 0.0773993808 * c
      : Math.pow(0.9478672986 * c + 0.0521327014, 2.4)
  }
  function w(c) {
    return 0.0031308 > c ? 12.92 * c : 1.055 * Math.pow(c, 0.41666) - 0.055
  }
  function y() {
    Object.defineProperty(this, 'id', { value: bj++ })
    this.uuid = ea.generateUUID()
    this.name = ''
    this.type = 'Material'
    this.fog = !0
    this.blending = 1
    this.side = 0
    this.vertexColors = this.flatShading = !1
    this.opacity = 1
    this.transparent = !1
    this.blendSrc = 204
    this.blendDst = 205
    this.blendEquation = 100
    this.blendEquationAlpha = this.blendDstAlpha = this.blendSrcAlpha = null
    this.depthFunc = 3
    this.depthWrite = this.depthTest = !0
    this.stencilWriteMask = 255
    this.stencilFunc = 519
    this.stencilRef = 0
    this.stencilFuncMask = 255
    this.stencilZPass = this.stencilZFail = this.stencilFail = 7680
    this.stencilWrite = !1
    this.clippingpls = null
    this.clipShadows = this.clipIntersection = !1
    this.shadowSide = null
    this.colorWrite = !0
    this.precision = null
    this.polygonOffset = !1
    this.polygonOffsetUnits = this.polygonOffsetFactor = 0
    this.dithering = !1
    this.alphaTest = 0
    this.premultipliedAlpha = !1
    this.toneMapped = this.visible = !0
    this.userData = {}
    this.version = 0
  }
  function L(c) {
    y.call(this)
    this.type = 'naBasicMaterial'
    this.color = new H(16777215)
    this.lightMap = this.map = null
    this.lightMapIntensity = 1
    this.aoMap = null
    this.aoMapIntensity = 1
    this.envMap = this.alphaMap = this.specularMap = null
    this.combine = 0
    this.reflectivity = 1
    this.refractionRatio = 0.98
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.wireframeLinejoin = this.wireframeLinecap = 'round'
    this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function C(c, a, b) {
    if (Array.isArray(c))
      throw new TypeError('THREE._0x3: array should be a Typed Array.')
    this.name = ''
    this.array = c
    this.itemSize = a
    this.count = void 0 !== c ? c.length / a : 0
    this.normalized = !0 === b
    this.usage = 35044
    this.updateRange = { offset: 0, count: -1 }
    this.version = 0
  }
  function G(c, a, b) {
    C.call(this, new Int8Array(c), a, b)
  }
  function v(c, a, b) {
    C.call(this, new Uint8Array(c), a, b)
  }
  function Q(c, a, b) {
    C.call(this, new Uint8ClampedArray(c), a, b)
  }
  function Y(c, a, b) {
    C.call(this, new Int16Array(c), a, b)
  }
  function S(c, a, b) {
    C.call(this, new Uint16Array(c), a, b)
  }
  function R(c, a, b) {
    C.call(this, new Int32Array(c), a, b)
  }
  function X(c, a, b) {
    C.call(this, new Uint32Array(c), a, b)
  }
  function E(c, a, b) {
    C.call(this, new Float32Array(c), a, b)
  }
  function U(c, a, b) {
    C.call(this, new Float64Array(c), a, b)
  }
  function sa(c) {
    if (0 === c.length) return -Infinity
    for (var a = c[0], b = 1, d = c.length; b < d; ++b) c[b] > a && (a = c[b])
    return a
  }
  function I() {
    Object.defineProperty(this, 'id', { value: (cj += 2) })
    this.uuid = ea.generateUUID()
    this.name = ''
    this.type = '_0x2'
    this.index = null
    this.attributes = {}
    this.morphAttributes = {}
    this.morphTargetsRelative = !1
    this.groups = []
    this.boundingSphere = this.boundingBox = null
    this.drawRange = { start: 0, count: Infinity }
    this.userData = {}
  }
  function ca(c, a) {
    n.call(this)
    this.type = 'na'
    this.geometry = void 0 !== c ? c : new I()
    this.material = void 0 !== a ? a : new L()
    this.updateMorphTargets()
  }
  function Oa(c, a, b, d, e, h, l, q) {
    if (
      null ===
      (1 === a.side
        ? d.intersectTriangle(l, h, e, !0, q)
        : d.intersectTriangle(e, h, l, 2 !== a.side, q))
    )
      return null
    Ve.copy(q)
    Ve.applyMatrix4(c.matrixWorld)
    a = b.ray.origin.distanceTo(Ve)
    return a < b.near || a > b.far
      ? null
      : { distance: a, point: Ve.clone(), object: c }
  }
  function Pa(c, a, b, d, e, h, l, q, t, A, f, M) {
    Yb.from_0x3(e, A)
    Zb.from_0x3(e, f)
    $b.from_0x3(e, M)
    e = c.morphTargetInfluences
    if (a.morphTargets && h && e) {
      We.set(0, 0, 0)
      Xe.set(0, 0, 0)
      Ye.set(0, 0, 0)
      for (var K = 0, g = h.length; K < g; K++) {
        var k = e[K],
          F = h[K]
        0 !== k &&
          (kg.from_0x3(F, A),
          lg.from_0x3(F, f),
          mg.from_0x3(F, M),
          l
            ? (We.addScaledVector(kg, k),
              Xe.addScaledVector(lg, k),
              Ye.addScaledVector(mg, k))
            : (We.addScaledVector(kg.sub(Yb), k),
              Xe.addScaledVector(lg.sub(Zb), k),
              Ye.addScaledVector(mg.sub($b), k)))
      }
      Yb.add(We)
      Zb.add(Xe)
      $b.add(Ye)
    }
    c.isSkinnedna &&
      (c.boneTransform(A, Yb), c.boneTransform(f, Zb), c.boneTransform(M, $b))
    if ((c = Oa(c, a, b, d, Yb, Zb, $b, Rd)))
      q &&
        (Vc.from_0x3(q, A),
        Wc.from_0x3(q, f),
        Xc.from_0x3(q, M),
        (c.uv = fa.getUV(Rd, Yb, Zb, $b, Vc, Wc, Xc, new B()))),
        t &&
          (Vc.from_0x3(t, A),
          Wc.from_0x3(t, f),
          Xc.from_0x3(t, M),
          (c.uv2 = fa.getUV(Rd, Yb, Zb, $b, Vc, Wc, Xc, new B()))),
        (q = new vc(A, f, M)),
        fa.getNormal(Yb, Zb, $b, q.normal),
        (c.face = q)
    return c
  }
  function V() {
    Object.defineProperty(this, 'id', { value: (dj += 2) })
    this.uuid = ea.generateUUID()
    this.name = ''
    this.type = '_0x6'
    this.vertices = []
    this.colors = []
    this.faces = []
    this.faceVertexUvs = [[]]
    this.morphTargets = []
    this.morphNormals = []
    this.skinWeights = []
    this.skinIndices = []
    this.lineDistances = []
    this.boundingSphere = this.boundingBox = null
    this.groupsNeedUpdate = this.lineDistancesNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.uvsNeedUpdate = this.verticesNeedUpdate = this.elementsNeedUpdate = !1
  }
  function Ka(c, a, b, d, e, h) {
    V.call(this)
    this.type = 'Box_0x6'
    this.parameters = {
      width: c,
      height: a,
      depth: b,
      widthSegments: d,
      heightSegments: e,
      depthSegments: h,
    }
    this.from_0x2(new Ha(c, a, b, d, e, h))
    this.mergeVertices()
  }
  function Ha(c, a, b, d, e, h) {
    function l(a, b, c, d, e, h, l, K, D, J, m) {
      var aa = h / D,
        ka = l / J,
        F = h / 2,
        n = l / 2,
        u = K / 2
      l = D + 1
      for (var wc = J + 1, Yc = (h = 0), w = new p(), v = 0; v < wc; v++)
        for (var z = v * ka - n, Ze = 0; Ze < l; Ze++)
          (w[a] = (Ze * aa - F) * d),
            (w[b] = z * e),
            (w[c] = u),
            A.push(w.x, w.y, w.z),
            (w[a] = 0),
            (w[b] = 0),
            (w[c] = 0 < K ? 1 : -1),
            f.push(w.x, w.y, w.z),
            M.push(Ze / D),
            M.push(1 - v / J),
            (h += 1)
      for (a = 0; a < J; a++)
        for (b = 0; b < D; b++)
          (c = g + b + l * (a + 1)),
            (d = g + (b + 1) + l * (a + 1)),
            (e = g + (b + 1) + l * a),
            t.push(g + b + l * a, c, e),
            t.push(c, d, e),
            (Yc += 6)
      q.addGroup(k, Yc, m)
      k += Yc
      g += h
    }
    void 0 === c && (c = 1)
    void 0 === a && (a = 1)
    void 0 === b && (b = 1)
    void 0 === d && (d = 1)
    void 0 === e && (e = 1)
    void 0 === h && (h = 1)
    I.call(this)
    this.type = 'Box_0x2'
    this.parameters = {
      width: c,
      height: a,
      depth: b,
      widthSegments: d,
      heightSegments: e,
      depthSegments: h,
    }
    var q = this
    d = Math.floor(d)
    e = Math.floor(e)
    h = Math.floor(h)
    var t = [],
      A = [],
      f = [],
      M = [],
      g = 0,
      k = 0
    l('z', 'y', 'x', -1, -1, b, a, c, h, e, 0)
    l('z', 'y', 'x', 1, -1, b, a, -c, h, e, 1)
    l('x', 'z', 'y', 1, 1, c, b, a, d, h, 2)
    l('x', 'z', 'y', 1, -1, c, b, -a, d, h, 3)
    l('x', 'y', 'z', 1, -1, c, a, b, d, e, 4)
    l('x', 'y', 'z', -1, -1, c, a, -b, d, e, 5)
    this.setIndex(t)
    this.setAttribute('position', new E(A, 3))
    this.setAttribute('normal', new E(f, 3))
    this.setAttribute('uv', new E(M, 2))
  }
  function Ja(c) {
    var a = {},
      b
    for (b in c) {
      a[b] = {}
      for (var d in c[b]) {
        var e = c[b][d]
        e &&
        (e.isColor ||
          e.isMatrix3 ||
          e.isMatrix4 ||
          e.isvt2 ||
          e.is_0x1 ||
          e.isVector4 ||
          e.isTexture)
          ? (a[b][d] = e.clone())
          : Array.isArray(e)
          ? (a[b][d] = e.slice())
          : (a[b][d] = e)
      }
    }
    return a
  }
  function ga(c) {
    for (var a = {}, b = 0; b < c.length; b++) {
      var d = Ja(c[b]),
        e
      for (e in d) a[e] = d[e]
    }
    return a
  }
  function wa(c) {
    y.call(this)
    this.type = 'ShaderMaterial'
    this.defines = {}
    this.uniforms = {}
    this.vertexShader =
      'void main() {\n\tgl_Position \x3d projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}'
    this.fragmentShader =
      'void main() {\n\tgl_FragColor \x3d vec4( 1.0, 0.0, 0.0, 1.0 );\n}'
    this.linewidth = 1
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.morphNormals = this.morphTargets = this.skinning = this.clipping = this.lights = this.fog = !1
    this.extensions = {
      derivatives: !1,
      fragDepth: !1,
      drawBuffers: !1,
      shaderTextureLOD: !1,
    }
    this.defaultAttributeValues = { color: [1, 1, 1], uv: [0, 0], uv2: [0, 0] }
    this.index0AttributeName = void 0
    this.uniformsNeedUpdate = !1
    this.glslVersion = null
    void 0 !== c &&
      (void 0 !== c.attributes &&
        console.error(
          'THREE.ShaderMaterial: attributes should now be defined in THREE._0x2 instead.'
        ),
      this.setValues(c))
  }
  function ua() {
    n.call(this)
    this.type = 'Camera'
    this.matrixWorldInverse = new O()
    this.projectionMatrix = new O()
    this.projectionMatrixInverse = new O()
  }
  function la(c, a, b, d) {
    ua.call(this)
    this.type = 'q4'
    this.fov = void 0 !== c ? c : 50
    this.zoom = 1
    this.near = void 0 !== b ? b : 0.1
    this.far = void 0 !== d ? d : 2e3
    this.focus = 10
    this.aspect = void 0 !== a ? a : 1
    this.view = null
    this.filmGauge = 35
    this.filmOffset = 0
    this.updateProjectionMatrix()
  }
  function Kb(c, a, b) {
    n.call(this)
    this.type = 'CubeCamera'
    if (!0 !== b.isWebGLCubeRenderTarget)
      console.error(
        'THREE.CubeCamera: The constructor now expects an instance of WebGLCubeRenderTarget as third parameter.'
      )
    else {
      this.renderTarget = b
      var d = new la(90, 1, c, a)
      d.layers = this.layers
      d.up.set(0, -1, 0)
      d.lookAt(new p(1, 0, 0))
      this.add(d)
      var e = new la(90, 1, c, a)
      e.layers = this.layers
      e.up.set(0, -1, 0)
      e.lookAt(new p(-1, 0, 0))
      this.add(e)
      var h = new la(90, 1, c, a)
      h.layers = this.layers
      h.up.set(0, 0, 1)
      h.lookAt(new p(0, 1, 0))
      this.add(h)
      var l = new la(90, 1, c, a)
      l.layers = this.layers
      l.up.set(0, 0, -1)
      l.lookAt(new p(0, -1, 0))
      this.add(l)
      var q = new la(90, 1, c, a)
      q.layers = this.layers
      q.up.set(0, -1, 0)
      q.lookAt(new p(0, 0, 1))
      this.add(q)
      var t = new la(90, 1, c, a)
      t.layers = this.layers
      t.up.set(0, -1, 0)
      t.lookAt(new p(0, 0, -1))
      this.add(t)
      this.update = function (a, c) {
        null === this.parent && this.updateMatrixWorld()
        var A = a.xr.enabled,
          f = a.getRenderTarget()
        a.xr.enabled = !1
        var K = b.texture.generateMipmaps
        b.texture.generateMipmaps = !1
        a.setRenderTarget(b, 0)
        a.render(c, d)
        a.setRenderTarget(b, 1)
        a.render(c, e)
        a.setRenderTarget(b, 2)
        a.render(c, h)
        a.setRenderTarget(b, 3)
        a.render(c, l)
        a.setRenderTarget(b, 4)
        a.render(c, q)
        b.texture.generateMipmaps = K
        a.setRenderTarget(b, 5)
        a.render(c, t)
        a.setRenderTarget(f)
        a.xr.enabled = A
      }
      this.clear = function (a, c, d, e) {
        for (var h = a.getRenderTarget(), l = 0; 6 > l; l++)
          a.setRenderTarget(b, l), a.clear(c, d, e)
        a.setRenderTarget(h)
      }
    }
  }
  function pb(c, a, b) {
    Number.isInteger(a) &&
      (console.warn(
        'THREE.WebGLCubeRenderTarget: constructor signature is now WebGLCubeRenderTarget( size, options )'
      ),
      (a = b))
    k.call(this, c, c, a)
    this.texture.isWebGLCubeRenderTargetTexture = !0
  }
  function Za(c, a, b, d, e, h, l, q, t, A, f, M) {
    g.call(this, null, h, l, q, t, A, d, e, f, M)
    this.image = { data: c || null, width: a || 1, height: b || 1 }
    this.magFilter = void 0 !== t ? t : 1003
    this.minFilter = void 0 !== A ? A : 1003
    this.flipY = this.generateMipmaps = !1
    this.unpackAlignment = 1
    this.needsUpdate = !0
  }
  function za() {
    function c(b, l) {
      d(b, l)
      e = a.requestAnimationFrame(c)
    }
    var a = null,
      b = !1,
      d = null,
      e = null
    return {
      start: function () {
        !0 !== b && null !== d && ((e = a.requestAnimationFrame(c)), (b = !0))
      },
      stop: function () {
        a.cancelAnimationFrame(e)
        b = !1
      },
      setAnimationLoop: function (a) {
        d = a
      },
      setContext: function (b) {
        a = b
      },
    }
  }
  function ej(c, a) {
    function b(a, b) {
      var d = a.array,
        e = a.usage,
        h = c.createBuffer()
      c.bindBuffer(b, h)
      c.bufferData(b, d, e)
      a.onUploadCallback()
      e = 5126
      d instanceof Float32Array
        ? (e = 5126)
        : d instanceof Float64Array
        ? console.warn(
            'THREE.WebGLAttributes: Unsupported data buffer format: Float64Array.'
          )
        : d instanceof Uint16Array
        ? (e = 5123)
        : d instanceof Int16Array
        ? (e = 5122)
        : d instanceof Uint32Array
        ? (e = 5125)
        : d instanceof Int32Array
        ? (e = 5124)
        : d instanceof Int8Array
        ? (e = 5120)
        : d instanceof Uint8Array && (e = 5121)
      return {
        buffer: h,
        type: e,
        bytesPerElement: d.BYTES_PER_ELEMENT,
        version: a.version,
      }
    }
    var d = a.isWebGL2,
      e = new WeakMap()
    return {
      get: function (a) {
        a.isInterleaved_0x3 && (a = a.data)
        return e.get(a)
      },
      remove: function (a) {
        a.isInterleaved_0x3 && (a = a.data)
        var b = e.get(a)
        b && (c.deleteBuffer(b.buffer), e['delete'](a))
      },
      update: function (a, l) {
        if (a.isGL_0x3) {
          var h = e.get(a)
          ;(!h || h.version < a.version) &&
            e.set(a, {
              buffer: a.buffer,
              type: a.type,
              bytesPerElement: a.elementSize,
              version: a.version,
            })
        } else if (
          (a.isInterleaved_0x3 && (a = a.data), (h = e.get(a)), void 0 === h)
        )
          e.set(a, b(a, l))
        else if (h.version < a.version) {
          var t = a.array,
            A = a.updateRange
          c.bindBuffer(l, h.buffer)
          ;-1 === A.count
            ? c.bufferSubData(l, 0, t)
            : (d
                ? c.bufferSubData(
                    l,
                    A.offset * t.BYTES_PER_ELEMENT,
                    t,
                    A.offset,
                    A.count
                  )
                : c.bufferSubData(
                    l,
                    A.offset * t.BYTES_PER_ELEMENT,
                    t.subarray(A.offset, A.offset + A.count)
                  ),
              (A.count = -1))
          h.version = a.version
        }
      },
    }
  }
  function Lb(c, a, b, d) {
    V.call(this)
    this.type = 'pl_0x6'
    this.parameters = {
      width: c,
      height: a,
      widthSegments: b,
      heightSegments: d,
    }
    this.from_0x2(new Qa(c, a, b, d))
    this.mergeVertices()
  }
  function Qa(c, a, b, d) {
    I.call(this)
    this.type = 'pl_0x2'
    this.parameters = {
      width: c,
      height: a,
      widthSegments: b,
      heightSegments: d,
    }
    c = c || 1
    a = a || 1
    var e = c / 2,
      h = a / 2
    b = Math.floor(b) || 1
    d = Math.floor(d) || 1
    var l = b + 1,
      q = d + 1,
      t = c / b,
      A = a / d
    a = []
    c = []
    for (var f = [], M = [], g = 0; g < q; g++)
      for (var k = g * A - h, aa = 0; aa < l; aa++)
        c.push(aa * t - e, -k, 0),
          f.push(0, 0, 1),
          M.push(aa / b),
          M.push(1 - g / d)
    for (e = 0; e < d; e++)
      for (h = 0; h < b; h++)
        (q = h + l * (e + 1)),
          (t = h + 1 + l * (e + 1)),
          (A = h + 1 + l * e),
          a.push(h + l * e, q, A),
          a.push(q, t, A)
    this.setIndex(a)
    this.setAttribute('position', new E(c, 3))
    this.setAttribute('normal', new E(f, 3))
    this.setAttribute('uv', new E(M, 2))
  }
  function fj(c, a, b, d, e) {
    function h(a, c) {
      b.buffers.color.setClear(a.r, a.g, a.b, c, e)
    }
    var l = new H(0),
      q = 0,
      t,
      A,
      f = null,
      M = 0,
      g = null
    return {
      getClearColor: function () {
        return l
      },
      setClearColor: function (a, b) {
        l.set(a)
        q = void 0 !== b ? b : 1
        h(l, q)
      },
      getClearAlpha: function () {
        return q
      },
      setClearAlpha: function (a) {
        q = a
        h(l, q)
      },
      render: function (b, e, K, D) {
        ;(e = !0 === e.isss ? e.background : null) &&
          e.isTexture &&
          (e = a.get(e))
        K = c.xr
        ;(K = K.getSession && K.getSession()) &&
          'additive' === K.environmentBlendMode &&
          (e = null)
        null === e ? h(l, q) : e && e.isColor && (h(e, 1), (D = !0))
        ;(c.autoClear || D) &&
          c.clear(c.autoClearColor, c.autoClearDepth, c.autoClearStencil)
        if (
          e &&
          (e.isCubeTexture ||
            e.isWebGLCubeRenderTarget ||
            e.isWebGLCubeRenderTargetTexture ||
            306 === e.mapping)
        ) {
          void 0 === A &&
            ((A = new ca(
              new Ha(1, 1, 1),
              new wa({
                name: 'BackgroundCubeMaterial',
                uniforms: Ja(qb.cube.uniforms),
                vertexShader: qb.cube.vertexShader,
                fragmentShader: qb.cube.fragmentShader,
                side: 1,
                depthTest: !1,
                depthWrite: !1,
                fog: !1,
              })
            )),
            A.geometry.deleteAttribute('normal'),
            A.geometry.deleteAttribute('uv'),
            (A.onBeforeRender = function (a, b, c) {
              this.matrixWorld.copyPosition(c.matrixWorld)
            }),
            Object.defineProperty(A.material, 'envMap', {
              get: function () {
                return this.uniforms.envMap.value
              },
            }),
            d.update(A))
          e.isWebGLCubeRenderTarget && (e = e.texture)
          A.material.uniforms.envMap.value = e
          A.material.uniforms.flipEnvMap.value = e.isCubeTexture ? -1 : 1
          if (f !== e || M !== e.version || g !== c.toneMapping)
            (A.material.needsUpdate = !0),
              (f = e),
              (M = e.version),
              (g = c.toneMapping)
          b.unshift(A, A.geometry, A.material, 0, 0, null)
        } else if (e && e.isTexture) {
          void 0 === t &&
            ((t = new ca(
              new Qa(2, 2),
              new wa({
                name: 'BackgroundMaterial',
                uniforms: Ja(qb.background.uniforms),
                vertexShader: qb.background.vertexShader,
                fragmentShader: qb.background.fragmentShader,
                side: 0,
                depthTest: !1,
                depthWrite: !1,
                fog: !1,
              })
            )),
            t.geometry.deleteAttribute('normal'),
            Object.defineProperty(t.material, 'map', {
              get: function () {
                return this.uniforms.t2D.value
              },
            }),
            d.update(t))
          t.material.uniforms.t2D.value = e
          !0 === e.matrixAutoUpdate && e.updateMatrix()
          t.material.uniforms.uvTransform.value.copy(e.matrix)
          if (f !== e || M !== e.version || g !== c.toneMapping)
            (t.material.needsUpdate = !0),
              (f = e),
              (M = e.version),
              (g = c.toneMapping)
          b.unshift(t, t.geometry, t.material, 0, 0, null)
        }
      },
    }
  }
  function gj(c, a, b, d) {
    function e(a) {
      return d.isWebGL2 ? c.bindVertexArray(a) : aa.bindVertexArrayOES(a)
    }
    function h(a) {
      return d.isWebGL2 ? c.deleteVertexArray(a) : aa.deleteVertexArrayOES(a)
    }
    function l(a) {
      for (var b = [], c = [], d = [], e = 0; e < k; e++)
        (b[e] = 0), (c[e] = 0), (d[e] = 0)
      return {
        geometry: null,
        program: null,
        wireframe: !1,
        newAttributes: b,
        enabledAttributes: c,
        attributeDivisors: d,
        object: a,
        attributes: {},
        index: null,
      }
    }
    function q() {
      for (var a = n.newAttributes, b = 0, c = a.length; b < c; b++) a[b] = 0
    }
    function t(a) {
      f(a, 0)
    }
    function f(b, e) {
      var h = n.enabledAttributes,
        l = n.attributeDivisors
      n.newAttributes[b] = 1
      0 === h[b] && (c.enableVertexAttribArray(b), (h[b] = 1))
      l[b] !== e &&
        ((d.isWebGL2 ? c : a.get('ANGLE_instanced_arrays'))[
          d.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE'
        ](b, e),
        (l[b] = e))
    }
    function K() {
      for (
        var a = n.newAttributes, b = n.enabledAttributes, d = 0, e = b.length;
        d < e;
        d++
      )
        b[d] !== a[d] && (c.disableVertexAttribArray(d), (b[d] = 0))
    }
    function M() {
      g()
      n !== m && ((n = m), e(n.object))
    }
    function g() {
      m.geometry = null
      m.program = null
      m.wireframe = !1
    }
    var k = c.getParameter(34921),
      aa = d.isWebGL2 ? null : a.get('OES_vertex_array_object'),
      p = d.isWebGL2 || null !== aa,
      ka = {},
      m = l(null),
      n = m
    return {
      setup: function (h, A, M, g, D) {
        var k = !1
        if (p) {
          var k = !0 === A.wireframe,
            J = ka[g.id]
          void 0 === J && ((J = {}), (ka[g.id] = J))
          var F = J[M.id]
          void 0 === F && ((F = {}), (J[M.id] = F))
          J = F[k]
          void 0 === J &&
            ((J = l(
              d.isWebGL2 ? c.createVertexArray() : aa.createVertexArrayOES()
            )),
            (F[k] = J))
          k = J
          n !== k && ((n = k), e(n.object))
          a: if (
            ((k = n.attributes),
            (F = g.attributes),
            Object.keys(k).length !== Object.keys(F).length)
          )
            k = !0
          else {
            for (var m in F) {
              var J = k[m],
                u = F[m]
              if (void 0 === J || J.attribute !== u || J.data !== u.data) {
                k = !0
                break a
              }
            }
            k = n.index !== D ? !0 : !1
          }
          if (k) {
            m = {}
            var F = g.attributes,
              w
            for (w in F)
              (J = F[w]),
                (u = {}),
                (u.attribute = J),
                J.data && (u.data = J.data),
                (m[w] = u)
            n.attributes = m
            n.index = D
          }
        } else if (
          ((w = !0 === A.wireframe),
          n.geometry !== g.id || n.program !== M.id || n.wireframe !== w)
        )
          (n.geometry = g.id), (n.program = M.id), (n.wireframe = w), (k = !0)
        !0 === h.isInstancedna && (k = !0)
        null !== D && b.update(D, 34963)
        if (k) {
          if (
            !1 !== d.isWebGL2 ||
            (!h.isInstancedna && !g.isInstanced_0x2) ||
            null !== a.get('ANGLE_instanced_arrays')
          ) {
            q()
            w = g.attributes
            M = M.getAttributes()
            A = A.defaultAttributeValues
            for (var wc in M)
              if (((k = M[wc]), 0 <= k)) {
                var v = w[wc]
                if (void 0 !== v) {
                  if (
                    ((m = v.normalized),
                    (u = v.itemSize),
                    (J = b.get(v)),
                    void 0 !== J)
                  ) {
                    var Yc = J.buffer,
                      F = J.type,
                      J = J.bytesPerElement
                    if (v.isInterleaved_0x3) {
                      var z = v.data,
                        r = z.stride,
                        v = v.offset
                      z && z.isInstancedInterleavedBuffer
                        ? (f(k, z.meshPerAttribute),
                          void 0 === g._maxInstanceCount &&
                            (g._maxInstanceCount =
                              z.meshPerAttribute * z.count))
                        : t(k)
                      c.bindBuffer(34962, Yc)
                      r *= J
                      J *= v
                      !0 !== d.isWebGL2 || (5124 !== F && 5125 !== F)
                        ? c.vertexAttribPointer(k, u, F, m, r, J)
                        : c.vertexAttribIPointer(k, u, F, r, J)
                    } else
                      v.isInstanced_0x3
                        ? (f(k, v.meshPerAttribute),
                          void 0 === g._maxInstanceCount &&
                            (g._maxInstanceCount =
                              v.meshPerAttribute * v.count))
                        : t(k),
                        c.bindBuffer(34962, Yc),
                        (J = u),
                        !0 !== d.isWebGL2 || (5124 !== F && 5125 !== F)
                          ? c.vertexAttribPointer(k, J, F, m, 0, 0)
                          : c.vertexAttribIPointer(k, J, F, 0, 0)
                  }
                } else if ('instanceMatrix' === wc)
                  (F = b.get(h.instanceMatrix)),
                    void 0 !== F &&
                      ((m = F.buffer),
                      (F = F.type),
                      f(k + 0, 1),
                      f(k + 1, 1),
                      f(k + 2, 1),
                      f(k + 3, 1),
                      c.bindBuffer(34962, m),
                      c.vertexAttribPointer(k + 0, 4, F, !1, 64, 0),
                      c.vertexAttribPointer(k + 1, 4, F, !1, 64, 16),
                      c.vertexAttribPointer(k + 2, 4, F, !1, 64, 32),
                      c.vertexAttribPointer(k + 3, 4, F, !1, 64, 48))
                else if ('instanceColor' === wc)
                  (F = b.get(h.instanceColor)),
                    void 0 !== F &&
                      ((m = F.buffer),
                      (F = F.type),
                      f(k, 1),
                      c.bindBuffer(34962, m),
                      c.vertexAttribPointer(k, 3, F, !1, 12, 0))
                else if (void 0 !== A && ((m = A[wc]), void 0 !== m))
                  switch (m.length) {
                    case 2:
                      c.vertexAttrib2fv(k, m)
                      break
                    case 3:
                      c.vertexAttrib3fv(k, m)
                      break
                    case 4:
                      c.vertexAttrib4fv(k, m)
                      break
                    default:
                      c.vertexAttrib1fv(k, m)
                  }
              }
            K()
          }
          null !== D && c.bindBuffer(34963, b.get(D).buffer)
        }
      },
      reset: M,
      resetDefaultState: g,
      dispose: function () {
        M()
        for (var a in ka) {
          var b = ka[a],
            c
          for (c in b) {
            var d = b[c],
              e
            for (e in d) h(d[e].object), delete d[e]
            delete b[c]
          }
          delete ka[a]
        }
      },
      releaseStatesOf_0x6: function (a) {
        if (void 0 !== ka[a.id]) {
          var b = ka[a.id],
            c
          for (c in b) {
            var d = b[c],
              e
            for (e in d) h(d[e].object), delete d[e]
            delete b[c]
          }
          delete ka[a.id]
        }
      },
      releaseStatesOfProgram: function (a) {
        for (var b in ka) {
          var c = ka[b]
          if (void 0 !== c[a.id]) {
            var d = c[a.id],
              e
            for (e in d) h(d[e].object), delete d[e]
            delete c[a.id]
          }
        }
      },
      initAttributes: q,
      enableAttribute: t,
      disableUnusedAttributes: K,
    }
  }
  function hj(c, a, b, d) {
    var e = d.isWebGL2,
      h
    this.setMode = function (a) {
      h = a
    }
    this.render = function (a, d) {
      c.drawArrays(h, a, d)
      b.update(d, h, 1)
    }
    this.renderInstances = function (d, q, t) {
      if (0 !== t) {
        var l, f
        if (e) (l = c), (f = 'drawArraysInstanced')
        else if (
          ((l = a.get('ANGLE_instanced_arrays')),
          (f = 'drawArraysInstancedANGLE'),
          null === l)
        ) {
          console.error(
            'THREE.WebGLBufferRenderer: using THREE.Instanced_0x2 but hardware does not support extension ANGLE_instanced_arrays.'
          )
          return
        }
        l[f](h, d, q, t)
        b.update(q, h, t)
      }
    }
  }
  function ij(c, a, b) {
    function d(a) {
      if ('highp' === a) {
        if (
          0 < c.getShaderPrecisionFormat(35633, 36338).precision &&
          0 < c.getShaderPrecisionFormat(35632, 36338).precision
        )
          return 'highp'
        a = 'mediump'
      }
      return 'mediump' === a &&
        0 < c.getShaderPrecisionFormat(35633, 36337).precision &&
        0 < c.getShaderPrecisionFormat(35632, 36337).precision
        ? 'mediump'
        : 'lowp'
    }
    var e,
      h =
        ('undefined' !== typeof WebGL2RenderingContext &&
          c instanceof WebGL2RenderingContext) ||
        ('undefined' !== typeof WebGL2ComputeRenderingContext &&
          c instanceof WebGL2ComputeRenderingContext),
      l = void 0 !== b.precision ? b.precision : 'highp',
      q = d(l)
    q !== l &&
      (console.warn('THREE.q5:', l, 'not supported, using', q, 'instead.'),
      (l = q))
    b = !0 === b.logarithmicDepthBuffer
    var q = c.getParameter(34930),
      t = c.getParameter(35660),
      f = c.getParameter(3379),
      K = c.getParameter(34076),
      M = c.getParameter(34921),
      g = c.getParameter(36347),
      k = c.getParameter(36348),
      aa = c.getParameter(36349),
      F = 0 < t,
      ka = h || !!a.get('OES_texture_float'),
      p = F && ka,
      m = h ? c.getParameter(36183) : 0
    return {
      isWebGL2: h,
      getMaxAnisotropy: function () {
        if (void 0 !== e) return e
        var b = a.get('EXT_texture_filter_anisotropic')
        return (e =
          null !== b ? c.getParameter(b.MAX_TEXTURE_MAX_ANISOTROPY_EXT) : 0)
      },
      getMaxPrecision: d,
      precision: l,
      logarithmicDepthBuffer: b,
      maxTextures: q,
      maxVertexTextures: t,
      maxTextureSize: f,
      maxCubemapSize: K,
      maxAttributes: M,
      maxVertexUniforms: g,
      maxVaryings: k,
      maxFragmentUniforms: aa,
      vertexTextures: F,
      floatFragmentTextures: ka,
      floatVertexTextures: p,
      maxSamples: m,
    }
  }
  function jj(c) {
    function a() {
      K.value !== e && ((K.value = e), (K.needsUpdate = 0 < h))
      d.numpls = h
      d.numIntersection = 0
    }
    function b(a, b, c, e) {
      var h = null !== a ? a.length : 0,
        l = null
      if (0 !== h) {
        l = K.value
        if (!0 !== e || null === l) {
          e = c + 4 * h
          b = b.matrixWorldInverse
          f.getNormalMatrix(b)
          if (null === l || l.length < e) l = new Float32Array(e)
          for (e = 0; e !== h; ++e, c += 4)
            t.copy(a[e]).applyMatrix4(b, f),
              t.normal.toArray(l, c),
              (l[c + 3] = t.constant)
        }
        K.value = l
        K.needsUpdate = !0
      }
      d.numpls = h
      d.numIntersection = 0
      return l
    }
    var d = this,
      e = null,
      h = 0,
      l = !1,
      q = !1,
      t = new da(),
      f = new ha(),
      K = { value: null, needsUpdate: !1 }
    this.uniform = K
    this.numIntersection = this.numpls = 0
    this.init = function (a, c, d) {
      var q = 0 !== a.length || c || 0 !== h || l
      l = c
      e = b(a, d, 0)
      h = a.length
      return q
    }
    this.beginShadows = function () {
      q = !0
      b(null)
    }
    this.endShadows = function () {
      q = !1
      a()
    }
    this.setState = function (d, t, f) {
      var A = d.clippingpls,
        M = d.clipIntersection,
        g = d.clipShadows
      d = c.get(d)
      if (!l || null === A || 0 === A.length || (q && !g)) q ? b(null) : a()
      else {
        var g = q ? 0 : h,
          D = 4 * g,
          k = d.clippingState || null
        K.value = k
        k = b(A, t, D, f)
        for (t = 0; t !== D; ++t) k[t] = e[t]
        d.clippingState = k
        this.numIntersection = M ? this.numpls : 0
        this.numpls += g
      }
    }
  }
  function kj(c) {
    function a(a, b) {
      303 === b ? (a.mapping = 301) : 304 === b && (a.mapping = 302)
      return a
    }
    var b = new WeakMap()
    return {
      get: function (d) {
        if (d && d.isTexture) {
          var e = d.mapping
          if (303 === e || 304 === e) {
            if (b.has(d)) return (e = b.get(d).texture), a(e, d.mapping)
            var h = d.image
            if (h && 0 < h.height) {
              var e = c.getRenderList(),
                l = c.getRenderTarget(),
                q = c.getRenderState(),
                h = new pb(h.height / 2)
              h.fromEquirectangularTexture(c, d)
              b.set(d, h)
              c.setRenderTarget(l)
              c.setRenderList(e)
              c.setRenderState(q)
              return a(h.texture, d.mapping)
            }
            return null
          }
        }
        return d
      },
      dispose: function () {
        b = new WeakMap()
      },
    }
  }
  function lj(c) {
    var a = {}
    return {
      has: function (b) {
        if (void 0 !== a[b]) return null !== a[b]
        var d
        switch (b) {
          case 'WEBGL_depth_texture':
            d =
              c.getExtension('WEBGL_depth_texture') ||
              c.getExtension('MOZ_WEBGL_depth_texture') ||
              c.getExtension('WEBKIT_WEBGL_depth_texture')
            break
          case 'EXT_texture_filter_anisotropic':
            d =
              c.getExtension('EXT_texture_filter_anisotropic') ||
              c.getExtension('MOZ_EXT_texture_filter_anisotropic') ||
              c.getExtension('WEBKIT_EXT_texture_filter_anisotropic')
            break
          case 'WEBGL_compressed_texture_s3tc':
            d =
              c.getExtension('WEBGL_compressed_texture_s3tc') ||
              c.getExtension('MOZ_WEBGL_compressed_texture_s3tc') ||
              c.getExtension('WEBKIT_WEBGL_compressed_texture_s3tc')
            break
          case 'WEBGL_compressed_texture_pvrtc':
            d =
              c.getExtension('WEBGL_compressed_texture_pvrtc') ||
              c.getExtension('WEBKIT_WEBGL_compressed_texture_pvrtc')
            break
          default:
            d = c.getExtension(b)
        }
        a[b] = d
        return null !== d
      },
      get: function (b) {
        this.has(b) ||
          console.warn('THREE.q5: ' + b + ' extension not supported.')
        return a[b]
      },
    }
  }
  function mj(c, a, b, d) {
    function e(c) {
      c = c.target
      var h = l.get(c)
      null !== h.index && a.remove(h.index)
      for (var t in h.attributes) a.remove(h.attributes[t])
      c.removeEventListener('dispose', e)
      l['delete'](c)
      if ((t = q.get(h))) a.remove(t), q['delete'](h)
      d.releaseStatesOf_0x6(c)
      !0 === c.isInstanced_0x2 && delete c._maxInstanceCount
      b.memory.geometries--
    }
    function h(b) {
      var c = [],
        d = b.index,
        e = b.attributes.position
      if (null !== d)
        for (
          var e = d.array, d = d.version, h = 0, l = e.length;
          h < l;
          h += 3
        ) {
          var t = e[h + 0],
            f = e[h + 1],
            g = e[h + 2]
          c.push(t, f, f, g, g, t)
        }
      else
        for (
          h = e.array, d = e.version, e = 0, h = h.length / 3 - 1;
          e < h;
          e += 3
        )
          (l = e + 0), (t = e + 1), (f = e + 2), c.push(l, t, t, f, f, l)
      c = new (65535 < sa(c) ? X : S)(c, 1)
      c.version = d
      ;(d = q.get(b)) && a.remove(d)
      q.set(b, c)
    }
    var l = new WeakMap(),
      q = new WeakMap()
    return {
      get: function (a, c) {
        var d = l.get(c)
        if (d) return d
        c.addEventListener('dispose', e)
        c.is_0x2
          ? (d = c)
          : c.is_0x6 &&
            (void 0 === c._buffer_0x6 &&
              (c._buffer_0x6 = new I().setFromObject(a)),
            (d = c._buffer_0x6))
        l.set(c, d)
        b.memory.geometries++
        return d
      },
      update: function (b) {
        var c = b.attributes,
          d
        for (d in c) a.update(c[d], 34962)
        b = b.morphAttributes
        for (var e in b) {
          c = b[e]
          d = 0
          for (var h = c.length; d < h; d++) a.update(c[d], 34962)
        }
      },
      getWireframeAttribute: function (a) {
        var b = q.get(a)
        if (b) {
          var c = a.index
          null !== c && b.version < c.version && h(a)
        } else h(a)
        return q.get(a)
      },
    }
  }
  function nj(c, a, b, d) {
    var e = d.isWebGL2,
      h,
      l,
      q
    this.setMode = function (a) {
      h = a
    }
    this.setIndex = function (a) {
      l = a.type
      q = a.bytesPerElement
    }
    this.render = function (a, d) {
      c.drawElements(h, d, l, a * q)
      b.update(d, h, 1)
    }
    this.renderInstances = function (d, f, K) {
      if (0 !== K) {
        var t, A
        if (e) (t = c), (A = 'drawElementsInstanced')
        else if (
          ((t = a.get('ANGLE_instanced_arrays')),
          (A = 'drawElementsInstancedANGLE'),
          null === t)
        ) {
          console.error(
            'THREE.WebGLIndexedBufferRenderer: using THREE.Instanced_0x2 but hardware does not support extension ANGLE_instanced_arrays.'
          )
          return
        }
        t[A](h, f, l, d * q, K)
        b.update(f, h, K)
      }
    }
  }
  function oj(c) {
    var a = { frame: 0, calls: 0, triangles: 0, points: 0, lines: 0 }
    return {
      memory: { geometries: 0, textures: 0 },
      render: a,
      programs: null,
      autoReset: !0,
      reset: function () {
        a.frame++
        a.calls = 0
        a.triangles = 0
        a.points = 0
        a.lines = 0
      },
      update: function (b, c, e) {
        a.calls++
        switch (c) {
          case 4:
            a.triangles += (b / 3) * e
            break
          case 1:
            a.lines += (b / 2) * e
            break
          case 3:
            a.lines += e * (b - 1)
            break
          case 2:
            a.lines += e * b
            break
          case 0:
            a.points += e * b
            break
          default:
            console.error('THREE.WebGLInfo: Unknown draw mode:', c)
        }
      },
    }
  }
  function pj(c, a) {
    return c[0] - a[0]
  }
  function qj(c, a) {
    return Math.abs(a[1]) - Math.abs(c[1])
  }
  function rj(c) {
    for (var a = {}, b = new Float32Array(8), d = [], e = 0; 8 > e; e++)
      d[e] = [e, 0]
    return {
      update: function (e, l, q, t) {
        var h = e.morphTargetInfluences
        e = void 0 === h ? 0 : h.length
        var f = a[l.id]
        if (void 0 === f) {
          for (var f = [], g = 0; g < e; g++) f[g] = [g, 0]
          a[l.id] = f
        }
        for (g = 0; g < e; g++) {
          var D = f[g]
          D[0] = g
          D[1] = h[g]
        }
        f.sort(qj)
        for (h = 0; 8 > h; h++)
          h < e && f[h][1]
            ? ((d[h][0] = f[h][0]), (d[h][1] = f[h][1]))
            : ((d[h][0] = Number.MAX_SAFE_INTEGER), (d[h][1] = 0))
        d.sort(pj)
        e = q.morphTargets && l.morphAttributes.position
        q = q.morphNormals && l.morphAttributes.normal
        for (h = f = 0; 8 > h; h++)
          (D = d[h]),
            (g = D[0]),
            (D = D[1]),
            g !== Number.MAX_SAFE_INTEGER && D
              ? (e &&
                  l.getAttribute('morphTarget' + h) !== e[g] &&
                  l.setAttribute('morphTarget' + h, e[g]),
                q &&
                  l.getAttribute('morphNormal' + h) !== q[g] &&
                  l.setAttribute('morphNormal' + h, q[g]),
                (b[h] = D),
                (f += D))
              : (e &&
                  void 0 !== l.getAttribute('morphTarget' + h) &&
                  l.deleteAttribute('morphTarget' + h),
                q &&
                  void 0 !== l.getAttribute('morphNormal' + h) &&
                  l.deleteAttribute('morphNormal' + h),
                (b[h] = 0))
        l = l.morphTargetsRelative ? 1 : 1 - f
        t.getUniforms().setValue(c, 'morphTargetBaseInfluence', l)
        t.getUniforms().setValue(c, 'morphTargetInfluences', b)
      },
    }
  }
  function sj(c, a, b, d) {
    var e = new WeakMap()
    return {
      update: function (c) {
        var h = d.render.frame,
          q = c.geometry,
          t = a.get(c, q)
        e.get(t) !== h &&
          (q.is_0x6 && t.updateFromObject(c), a.update(t), e.set(t, h))
        c.isInstancedna &&
          (b.update(c.instanceMatrix, 34962),
          null !== c.instanceColor && b.update(c.instanceColor, 34962))
        return t
      },
      dispose: function () {
        e = new WeakMap()
      },
    }
  }
  function Mb(c, a, b, d, e, h, l, q, t, f) {
    c = void 0 !== c ? c : []
    g.call(
      this,
      c,
      void 0 !== a ? a : 301,
      b,
      d,
      e,
      h,
      void 0 !== l ? l : 1022,
      q,
      t,
      f
    )
    this.flipY = !1
  }
  function Zc(c, a, b, d) {
    g.call(this, null)
    this.image = {
      data: c || null,
      width: a || 1,
      height: b || 1,
      depth: d || 1,
    }
    this.minFilter = this.magFilter = 1003
    this.wrapR = 1001
    this.flipY = this.generateMipmaps = !1
    this.needsUpdate = !0
  }
  function $c(c, a, b, d) {
    g.call(this, null)
    this.image = {
      data: c || null,
      width: a || 1,
      height: b || 1,
      depth: d || 1,
    }
    this.minFilter = this.magFilter = 1003
    this.wrapR = 1001
    this.flipY = this.generateMipmaps = !1
    this.needsUpdate = !0
  }
  function ad(c, a, b) {
    var d = c[0]
    if (0 >= d || 0 < d) return c
    var e = a * b,
      h = uh[e]
    void 0 === h && ((h = new Float32Array(e)), (uh[e] = h))
    if (0 !== a)
      for (d.toArray(h, 0), d = 1, e = 0; d !== a; ++d)
        (e += b), c[d].toArray(h, e)
    return h
  }
  function lb(c, a) {
    if (c.length !== a.length) return !1
    for (var b = 0, d = c.length; b < d; b++) if (c[b] !== a[b]) return !1
    return !0
  }
  function fb(c, a) {
    for (var b = 0, d = a.length; b < d; b++) c[b] = a[b]
  }
  function vh(c, a) {
    var b = wh[a]
    void 0 === b && ((b = new Int32Array(a)), (wh[a] = b))
    for (var d = 0; d !== a; ++d) b[d] = c.allocateTextureUnit()
    return b
  }
  function tj(c, a) {
    var b = this.cache
    b[0] !== a && (c.uniform1f(this.addr, a), (b[0] = a))
  }
  function uj(c, a) {
    var b = this.cache
    if (void 0 !== a.x) {
      if (b[0] !== a.x || b[1] !== a.y)
        c.uniform2f(this.addr, a.x, a.y), (b[0] = a.x), (b[1] = a.y)
    } else lb(b, a) || (c.uniform2fv(this.addr, a), fb(b, a))
  }
  function vj(c, a) {
    var b = this.cache
    if (void 0 !== a.x) {
      if (b[0] !== a.x || b[1] !== a.y || b[2] !== a.z)
        c.uniform3f(this.addr, a.x, a.y, a.z),
          (b[0] = a.x),
          (b[1] = a.y),
          (b[2] = a.z)
    } else if (void 0 !== a.r) {
      if (b[0] !== a.r || b[1] !== a.g || b[2] !== a.b)
        c.uniform3f(this.addr, a.r, a.g, a.b),
          (b[0] = a.r),
          (b[1] = a.g),
          (b[2] = a.b)
    } else lb(b, a) || (c.uniform3fv(this.addr, a), fb(b, a))
  }
  function wj(c, a) {
    var b = this.cache
    if (void 0 !== a.x) {
      if (b[0] !== a.x || b[1] !== a.y || b[2] !== a.z || b[3] !== a.w)
        c.uniform4f(this.addr, a.x, a.y, a.z, a.w),
          (b[0] = a.x),
          (b[1] = a.y),
          (b[2] = a.z),
          (b[3] = a.w)
    } else lb(b, a) || (c.uniform4fv(this.addr, a), fb(b, a))
  }
  function xj(c, a) {
    var b = this.cache,
      d = a.elements
    void 0 === d
      ? lb(b, a) || (c.uniformMatrix2fv(this.addr, !1, a), fb(b, a))
      : lb(b, d) || (xh.set(d), c.uniformMatrix2fv(this.addr, !1, xh), fb(b, d))
  }
  function yj(c, a) {
    var b = this.cache,
      d = a.elements
    void 0 === d
      ? lb(b, a) || (c.uniformMatrix3fv(this.addr, !1, a), fb(b, a))
      : lb(b, d) || (yh.set(d), c.uniformMatrix3fv(this.addr, !1, yh), fb(b, d))
  }
  function zj(c, a) {
    var b = this.cache,
      d = a.elements
    void 0 === d
      ? lb(b, a) || (c.uniformMatrix4fv(this.addr, !1, a), fb(b, a))
      : lb(b, d) || (zh.set(d), c.uniformMatrix4fv(this.addr, !1, zh), fb(b, d))
  }
  function Aj(c, a, b) {
    var d = this.cache,
      e = b.allocateTextureUnit()
    d[0] !== e && (c.uniform1i(this.addr, e), (d[0] = e))
    b.safeSetTexture2D(a || Ah, e)
  }
  function Bj(c, a, b) {
    var d = this.cache,
      e = b.allocateTextureUnit()
    d[0] !== e && (c.uniform1i(this.addr, e), (d[0] = e))
    b.setTexture2DArray(a || Cj, e)
  }
  function Dj(c, a, b) {
    var d = this.cache,
      e = b.allocateTextureUnit()
    d[0] !== e && (c.uniform1i(this.addr, e), (d[0] = e))
    b.setTexture3D(a || Ej, e)
  }
  function Fj(c, a, b) {
    var d = this.cache,
      e = b.allocateTextureUnit()
    d[0] !== e && (c.uniform1i(this.addr, e), (d[0] = e))
    b.safeSetTextureCube(a || Bh, e)
  }
  function Gj(c, a) {
    var b = this.cache
    b[0] !== a && (c.uniform1i(this.addr, a), (b[0] = a))
  }
  function Hj(c, a) {
    var b = this.cache
    lb(b, a) || (c.uniform2iv(this.addr, a), fb(b, a))
  }
  function Ij(c, a) {
    var b = this.cache
    lb(b, a) || (c.uniform3iv(this.addr, a), fb(b, a))
  }
  function Jj(c, a) {
    var b = this.cache
    lb(b, a) || (c.uniform4iv(this.addr, a), fb(b, a))
  }
  function Kj(c, a) {
    var b = this.cache
    b[0] !== a && (c.uniform1ui(this.addr, a), (b[0] = a))
  }
  function Lj(c) {
    switch (c) {
      case 5126:
        return tj
      case 35664:
        return uj
      case 35665:
        return vj
      case 35666:
        return wj
      case 35674:
        return xj
      case 35675:
        return yj
      case 35676:
        return zj
      case 5124:
      case 35670:
        return Gj
      case 35667:
      case 35671:
        return Hj
      case 35668:
      case 35672:
        return Ij
      case 35669:
      case 35673:
        return Jj
      case 5125:
        return Kj
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return Aj
      case 35679:
      case 36299:
      case 36307:
        return Dj
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return Fj
      case 36289:
      case 36303:
      case 36311:
      case 36292:
        return Bj
    }
  }
  function Mj(c, a) {
    c.uniform1fv(this.addr, a)
  }
  function Nj(c, a) {
    c.uniform1iv(this.addr, a)
  }
  function Oj(c, a) {
    c.uniform2iv(this.addr, a)
  }
  function Pj(c, a) {
    c.uniform3iv(this.addr, a)
  }
  function Qj(c, a) {
    c.uniform4iv(this.addr, a)
  }
  function Rj(c, a) {
    var b = ad(a, this.size, 2)
    c.uniform2fv(this.addr, b)
  }
  function Sj(c, a) {
    var b = ad(a, this.size, 3)
    c.uniform3fv(this.addr, b)
  }
  function Tj(c, a) {
    var b = ad(a, this.size, 4)
    c.uniform4fv(this.addr, b)
  }
  function Uj(c, a) {
    var b = ad(a, this.size, 4)
    c.uniformMatrix2fv(this.addr, !1, b)
  }
  function Vj(c, a) {
    var b = ad(a, this.size, 9)
    c.uniformMatrix3fv(this.addr, !1, b)
  }
  function Wj(c, a) {
    var b = ad(a, this.size, 16)
    c.uniformMatrix4fv(this.addr, !1, b)
  }
  function Xj(c, a, b) {
    var d = a.length,
      e = vh(b, d)
    c.uniform1iv(this.addr, e)
    for (c = 0; c !== d; ++c) b.safeSetTexture2D(a[c] || Ah, e[c])
  }
  function Yj(c, a, b) {
    var d = a.length,
      e = vh(b, d)
    c.uniform1iv(this.addr, e)
    for (c = 0; c !== d; ++c) b.safeSetTextureCube(a[c] || Bh, e[c])
  }
  function Zj(c) {
    switch (c) {
      case 5126:
        return Mj
      case 35664:
        return Rj
      case 35665:
        return Sj
      case 35666:
        return Tj
      case 35674:
        return Uj
      case 35675:
        return Vj
      case 35676:
        return Wj
      case 5124:
      case 35670:
        return Nj
      case 35667:
      case 35671:
        return Oj
      case 35668:
      case 35672:
        return Pj
      case 35669:
      case 35673:
        return Qj
      case 35678:
      case 36198:
      case 36298:
      case 36306:
      case 35682:
        return Xj
      case 35680:
      case 36300:
      case 36308:
      case 36293:
        return Yj
    }
  }
  function ak(c, a, b) {
    this.id = c
    this.addr = b
    this.cache = []
    this.setValue = Lj(a.type)
  }
  function Ch(c, a, b) {
    this.id = c
    this.addr = b
    this.cache = []
    this.size = a.size
    this.setValue = Zj(a.type)
  }
  function Dh(c) {
    this.id = c
    this.seq = []
    this.map = {}
  }
  function ac(c, a) {
    this.seq = []
    this.map = {}
    for (var b = c.getProgramParameter(a, 35718), d = 0; d < b; ++d) {
      var e = c.getActiveUniform(a, d),
        h = c.getUniformLocation(a, e.name),
        l = this,
        q = e.name,
        t = q.length
      for (ng.lastIndex = 0; ; ) {
        var f = ng.exec(q),
          K = ng.lastIndex,
          g = f[1],
          D = f[3]
        ']' === f[2] && (g |= 0)
        if (void 0 === D || ('[' === D && K + 2 === t)) {
          q = l
          e = void 0 === D ? new ak(g, e, h) : new Ch(g, e, h)
          q.seq.push(e)
          q.map[e.id] = e
          break
        } else
          (D = l.map[g]),
            void 0 === D &&
              ((D = new Dh(g)),
              (g = l),
              (l = D),
              g.seq.push(l),
              (g.map[l.id] = l)),
            (l = D)
      }
    }
  }
  function Eh(c, a, b) {
    a = c.createShader(a)
    c.shaderSource(a, b)
    c.compileShader(a)
    return a
  }
  function Fh(c) {
    switch (c) {
      case 3e3:
        return ['Linear', '( value )']
      case 3001:
        return ['sRGB', '( value )']
      case 3002:
        return ['RGBE', '( value )']
      case 3004:
        return ['RGBM', '( value, 7.0 )']
      case 3005:
        return ['RGBM', '( value, 16.0 )']
      case 3006:
        return ['RGBD', '( value, 256.0 )']
      case 3007:
        return ['Gamma', '( value, float( GAMMA_FACTOR ) )']
      case 3003:
        return ['LogLuv', '( value )']
      default:
        return (
          console.warn('THREE.WebGLProgram: Unsupported encoding:', c),
          ['Linear', '( value )']
        )
    }
  }
  function Gh(c, a, b) {
    var d = c.getShaderParameter(a, 35713),
      e = c.getShaderInfoLog(a).trim()
    if (d && '' === e) return ''
    c = c.getShaderSource(a).split('\n')
    for (a = 0; a < c.length; a++) c[a] = a + 1 + ': ' + c[a]
    c = c.join('\n')
    return 'THREE.WebGLShader: gl.getShaderInfoLog() ' + b + '\n' + e + c
  }
  function Sd(c, a) {
    var b = Fh(a)
    return (
      'vec4 ' +
      c +
      '( vec4 value ) { return ' +
      b[0] +
      'ToLinear' +
      b[1] +
      '; }'
    )
  }
  function bk(c, a) {
    var b = Fh(a)
    return (
      'vec4 ' + c + '( vec4 value ) { return LinearTo' + b[0] + b[1] + '; }'
    )
  }
  function ck(c, a) {
    var b
    switch (a) {
      case 1:
        b = 'Linear'
        break
      case 2:
        b = 'Reinhard'
        break
      case 3:
        b = 'OptimizedCineon'
        break
      case 4:
        b = 'ACESFilmic'
        break
      case 5:
        b = 'Custom'
        break
      default:
        console.warn('THREE.WebGLProgram: Unsupported toneMapping:', a),
          (b = 'Linear')
    }
    return (
      'vec3 ' + c + '( vec3 color ) { return ' + b + 'ToneMapping( color ); }'
    )
  }
  function dk(c) {
    var a = [],
      b
    for (b in c) {
      var d = c[b]
      !1 !== d && a.push('#define ' + b + ' ' + d)
    }
    return a.join('\n')
  }
  function Td(c) {
    return '' !== c
  }
  function Hh(c, a) {
    return c
      .replace(/NUM_DIR_LIGHTS/g, a.numDirLights)
      .replace(/NUM_SPOT_LIGHTS/g, a.numSpotLights)
      .replace(/NUM_RECT_AREA_LIGHTS/g, a.numRectAreaLights)
      .replace(/NUM_POINT_LIGHTS/g, a.numPointLights)
      .replace(/NUM_HEMI_LIGHTS/g, a.numHemiLights)
      .replace(/NUM_DIR_LIGHT_SHADOWS/g, a.numDirLightShadows)
      .replace(/NUM_SPOT_LIGHT_SHADOWS/g, a.numSpotLightShadows)
      .replace(/NUM_POINT_LIGHT_SHADOWS/g, a.numPointLightShadows)
  }
  function Ih(c, a) {
    return c
      .replace(/NUM_CLIPPING_PLANES/g, a.numClippingpls)
      .replace(
        /UNION_CLIPPING_PLANES/g,
        a.numClippingpls - a.numClipIntersection
      )
  }
  function og(c, a) {
    var b = ia[a]
    if (void 0 === b) throw Error('Can not resolve #include \x3c' + a + '\x3e')
    return b.replace(pg, og)
  }
  function Jh(c, a, b, d) {
    console.warn(
      'WebGLProgram: #pragma unroll_loop shader syntax is deprecated. Please use #pragma unroll_loop_start syntax instead.'
    )
    return qg(c, a, b, d)
  }
  function qg(c, a, b, d) {
    c = ''
    for (a = parseInt(a); a < parseInt(b); a++)
      c += d
        .replace(/\[\s*i\s*\]/g, '[ ' + a + ' ]')
        .replace(/UNROLLED_LOOP_INDEX/g, a)
    return c
  }
  function Kh(c) {
    var a =
      'precision ' + c.precision + ' float;\nprecision ' + c.precision + ' int;'
    'highp' === c.precision
      ? (a += '\n#define HIGH_PRECISION')
      : 'mediump' === c.precision
      ? (a += '\n#define MEDIUM_PRECISION')
      : 'lowp' === c.precision && (a += '\n#define LOW_PRECISION')
    return a
  }
  function ek(c) {
    var a = 'SHADOWMAP_TYPE_BASIC'
    1 === c.shadowMapType
      ? (a = 'SHADOWMAP_TYPE_PCF')
      : 2 === c.shadowMapType
      ? (a = 'SHADOWMAP_TYPE_PCF_SOFT')
      : 3 === c.shadowMapType && (a = 'SHADOWMAP_TYPE_VSM')
    return a
  }
  function fk(c) {
    var a = 'ENVMAP_TYPE_CUBE'
    if (c.envMap)
      switch (c.envMapMode) {
        case 301:
        case 302:
          a = 'ENVMAP_TYPE_CUBE'
          break
        case 306:
        case 307:
          a = 'ENVMAP_TYPE_CUBE_UV'
      }
    return a
  }
  function gk(c) {
    var a = 'ENVMAP_MODE_REFLECTION'
    if (c.envMap)
      switch (c.envMapMode) {
        case 302:
        case 307:
          a = 'ENVMAP_MODE_REFRACTION'
      }
    return a
  }
  function hk(c) {
    var a = 'ENVMAP_BLENDING_NONE'
    if (c.envMap)
      switch (c.combine) {
        case 0:
          a = 'ENVMAP_BLENDING_MULTIPLY'
          break
        case 1:
          a = 'ENVMAP_BLENDING_MIX'
          break
        case 2:
          a = 'ENVMAP_BLENDING_ADD'
      }
    return a
  }
  function ik(c, a, b, d) {
    var e = c.getContext(),
      h = b.defines,
      l = b.vertexShader,
      q = b.fragmentShader,
      t = ek(b),
      f = fk(b),
      K = gk(b),
      g = hk(b),
      D = 0 < c.gammaFactor ? c.gammaFactor : 1,
      k = b.isWebGL2
        ? ''
        : [
            b.extensionDerivatives ||
            b.envMapCubeUV ||
            b.bumpMap ||
            b.tangentSpaceNormalMap ||
            b.clearcoatNormalMap ||
            b.flatShading ||
            'physical' === b.shaderID
              ? '#extension GL_OES_standard_derivatives : enable'
              : '',
            (b.extensionFragDepth || b.logarithmicDepthBuffer) &&
            b.rendererExtensionFragDepth
              ? '#extension GL_EXT_frag_depth : enable'
              : '',
            b.extensionDrawBuffers && b.rendererExtensionDrawBuffers
              ? '#extension GL_EXT_draw_buffers : require'
              : '',
            (b.extensionShaderTextureLOD || b.envMap) &&
            b.rendererExtensionShaderTextureLod
              ? '#extension GL_EXT_shader_texture_lod : enable'
              : '',
          ]
            .filter(Td)
            .join('\n'),
      p = dk(h),
      F = e.createProgram(),
      ka = b.glslVersion ? '#version ' + b.glslVersion + '\n' : ''
    b.isRawShaderMaterial
      ? ((h = [p].filter(Td).join('\n')),
        0 < h.length && (h += '\n'),
        (t = [k, p].filter(Td).join('\n')),
        0 < t.length && (t += '\n'))
      : ((h = [
          Kh(b),
          '#define SHADER_NAME ' + b.shaderName,
          p,
          b.instancing ? '#define USE_INSTANCING' : '',
          b.instancingColor ? '#define USE_INSTANCING_COLOR' : '',
          b.supportsVertexTextures ? '#define VERTEX_TEXTURES' : '',
          '#define GAMMA_FACTOR ' + D,
          '#define MAX_BONES ' + b.maxBones,
          b.useFog && b.fog ? '#define USE_FOG' : '',
          b.useFog && b.fogExp2 ? '#define FOG_EXP2' : '',
          b.map ? '#define USE_MAP' : '',
          b.envMap ? '#define USE_ENVMAP' : '',
          b.envMap ? '#define ' + K : '',
          b.lightMap ? '#define USE_LIGHTMAP' : '',
          b.aoMap ? '#define USE_AOMAP' : '',
          b.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
          b.bumpMap ? '#define USE_BUMPMAP' : '',
          b.normalMap ? '#define USE_NORMALMAP' : '',
          b.normalMap && b.objectSpaceNormalMap
            ? '#define OBJECTSPACE_NORMALMAP'
            : '',
          b.normalMap && b.tangentSpaceNormalMap
            ? '#define TANGENTSPACE_NORMALMAP'
            : '',
          b.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
          b.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
          b.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
          b.displacementMap && b.supportsVertexTextures
            ? '#define USE_DISPLACEMENTMAP'
            : '',
          b.specularMap ? '#define USE_SPECULARMAP' : '',
          b.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
          b.metalnessMap ? '#define USE_METALNESSMAP' : '',
          b.alphaMap ? '#define USE_ALPHAMAP' : '',
          b.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
          b.vertexTangents ? '#define USE_TANGENT' : '',
          b.vertexColors ? '#define USE_COLOR' : '',
          b.vertexUvs ? '#define USE_UV' : '',
          b.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
          b.flatShading ? '#define FLAT_SHADED' : '',
          b.skinning ? '#define USE_SKINNING' : '',
          b.useVertexTexture ? '#define BONE_TEXTURE' : '',
          b.morphTargets ? '#define USE_MORPHTARGETS' : '',
          b.morphNormals && !1 === b.flatShading
            ? '#define USE_MORPHNORMALS'
            : '',
          b.doubleSided ? '#define DOUBLE_SIDED' : '',
          b.flipSided ? '#define FLIP_SIDED' : '',
          b.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
          b.shadowMapEnabled ? '#define ' + t : '',
          b.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',
          b.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
          b.logarithmicDepthBuffer && b.rendererExtensionFragDepth
            ? '#define USE_LOGDEPTHBUF_EXT'
            : '',
          'uniform mat4 modelMatrix;',
          'uniform mat4 modelViewMatrix;',
          'uniform mat4 projectionMatrix;',
          'uniform mat4 viewMatrix;',
          'uniform mat3 normalMatrix;',
          'uniform vec3 cameraPosition;',
          'uniform bool isOrthographic;',
          '#ifdef USE_INSTANCING',
          '\tattribute mat4 instanceMatrix;',
          '#endif',
          '#ifdef USE_INSTANCING_COLOR',
          '\tattribute vec3 instanceColor;',
          '#endif',
          'attribute vec3 position;',
          'attribute vec3 normal;',
          'attribute vec2 uv;',
          '#ifdef USE_TANGENT',
          '\tattribute vec4 tangent;',
          '#endif',
          '#ifdef USE_COLOR',
          '\tattribute vec3 color;',
          '#endif',
          '#ifdef USE_MORPHTARGETS',
          '\tattribute vec3 morphTarget0;',
          '\tattribute vec3 morphTarget1;',
          '\tattribute vec3 morphTarget2;',
          '\tattribute vec3 morphTarget3;',
          '\t#ifdef USE_MORPHNORMALS',
          '\t\tattribute vec3 morphNormal0;',
          '\t\tattribute vec3 morphNormal1;',
          '\t\tattribute vec3 morphNormal2;',
          '\t\tattribute vec3 morphNormal3;',
          '\t#else',
          '\t\tattribute vec3 morphTarget4;',
          '\t\tattribute vec3 morphTarget5;',
          '\t\tattribute vec3 morphTarget6;',
          '\t\tattribute vec3 morphTarget7;',
          '\t#endif',
          '#endif',
          '#ifdef USE_SKINNING',
          '\tattribute vec4 skinIndex;',
          '\tattribute vec4 skinWeight;',
          '#endif',
          '\n',
        ]
          .filter(Td)
          .join('\n')),
        (t = [
          k,
          Kh(b),
          '#define SHADER_NAME ' + b.shaderName,
          p,
          b.alphaTest
            ? '#define ALPHATEST ' + b.alphaTest + (b.alphaTest % 1 ? '' : '.0')
            : '',
          '#define GAMMA_FACTOR ' + D,
          b.useFog && b.fog ? '#define USE_FOG' : '',
          b.useFog && b.fogExp2 ? '#define FOG_EXP2' : '',
          b.map ? '#define USE_MAP' : '',
          b.matcap ? '#define USE_MATCAP' : '',
          b.envMap ? '#define USE_ENVMAP' : '',
          b.envMap ? '#define ' + f : '',
          b.envMap ? '#define ' + K : '',
          b.envMap ? '#define ' + g : '',
          b.lightMap ? '#define USE_LIGHTMAP' : '',
          b.aoMap ? '#define USE_AOMAP' : '',
          b.emissiveMap ? '#define USE_EMISSIVEMAP' : '',
          b.bumpMap ? '#define USE_BUMPMAP' : '',
          b.normalMap ? '#define USE_NORMALMAP' : '',
          b.normalMap && b.objectSpaceNormalMap
            ? '#define OBJECTSPACE_NORMALMAP'
            : '',
          b.normalMap && b.tangentSpaceNormalMap
            ? '#define TANGENTSPACE_NORMALMAP'
            : '',
          b.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
          b.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
          b.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',
          b.specularMap ? '#define USE_SPECULARMAP' : '',
          b.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
          b.metalnessMap ? '#define USE_METALNESSMAP' : '',
          b.alphaMap ? '#define USE_ALPHAMAP' : '',
          b.sheen ? '#define USE_SHEEN' : '',
          b.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
          b.vertexTangents ? '#define USE_TANGENT' : '',
          b.vertexColors || b.instancingColor ? '#define USE_COLOR' : '',
          b.vertexUvs ? '#define USE_UV' : '',
          b.uvsVertexOnly ? '#define UVS_VERTEX_ONLY' : '',
          b.gradientMap ? '#define USE_GRADIENTMAP' : '',
          b.flatShading ? '#define FLAT_SHADED' : '',
          b.doubleSided ? '#define DOUBLE_SIDED' : '',
          b.flipSided ? '#define FLIP_SIDED' : '',
          b.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
          b.shadowMapEnabled ? '#define ' + t : '',
          b.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',
          b.physicallyCorrectLights ? '#define PHYSICALLY_CORRECT_LIGHTS' : '',
          b.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
          b.logarithmicDepthBuffer && b.rendererExtensionFragDepth
            ? '#define USE_LOGDEPTHBUF_EXT'
            : '',
          (b.extensionShaderTextureLOD || b.envMap) &&
          b.rendererExtensionShaderTextureLod
            ? '#define TEXTURE_LOD_EXT'
            : '',
          'uniform mat4 viewMatrix;',
          'uniform vec3 cameraPosition;',
          'uniform bool isOrthographic;',
          0 !== b.toneMapping ? '#define TONE_MAPPING' : '',
          0 !== b.toneMapping ? ia.tonemapping_pars_fragment : '',
          0 !== b.toneMapping ? ck('toneMapping', b.toneMapping) : '',
          b.dithering ? '#define DITHERING' : '',
          ia.encodings_pars_fragment,
          b.map ? Sd('mapTexelToLinear', b.mapEncoding) : '',
          b.matcap ? Sd('matcapTexelToLinear', b.matcapEncoding) : '',
          b.envMap ? Sd('envMapTexelToLinear', b.envMapEncoding) : '',
          b.emissiveMap
            ? Sd('emissiveMapTexelToLinear', b.emissiveMapEncoding)
            : '',
          b.lightMap ? Sd('lightMapTexelToLinear', b.lightMapEncoding) : '',
          bk('linearToOutputTexel', b.outputEncoding),
          b.depthPacking ? '#define DEPTH_PACKING ' + b.depthPacking : '',
          '\n',
        ]
          .filter(Td)
          .join('\n')))
    l = l.replace(pg, og)
    l = Hh(l, b)
    l = Ih(l, b)
    q = q.replace(pg, og)
    q = Hh(q, b)
    q = Ih(q, b)
    l = l.replace(Lh, qg).replace(Mh, Jh)
    q = q.replace(Lh, qg).replace(Mh, Jh)
    b.isWebGL2 &&
      !0 !== b.isRawShaderMaterial &&
      ((ka = '#version 300 es\n'),
      (h =
        '#define attribute in\n#define varying out\n#define texture2D texture\n' +
        h),
      (t =
        [
          '#define varying in',
          '300 es' === b.glslVersion ? '' : 'out highp vec4 pc_fragColor;',
          '300 es' === b.glslVersion ? '' : '#define gl_FragColor pc_fragColor',
          '#define gl_FragDepthEXT gl_FragDepth\n#define texture2D texture\n#define textureCube texture\n#define texture2DProj textureProj\n#define texture2DLodEXT textureLod\n#define texture2DProjLodEXT textureProjLod\n#define textureCubeLodEXT textureLod\n#define texture2DGradEXT textureGrad\n#define texture2DProjGradEXT textureProjGrad\n#define textureCubeGradEXT textureGrad',
        ].join('\n') +
        '\n' +
        t))
    q = ka + t + q
    l = Eh(e, 35633, ka + h + l)
    q = Eh(e, 35632, q)
    e.attachShader(F, l)
    e.attachShader(F, q)
    void 0 !== b.index0AttributeName
      ? e.bindAttribLocation(F, 0, b.index0AttributeName)
      : !0 === b.morphTargets && e.bindAttribLocation(F, 0, 'position')
    e.linkProgram(F)
    if (c.debug.checkShaderErrors) {
      c = e.getProgramInfoLog(F).trim()
      ka = e.getShaderInfoLog(l).trim()
      f = e.getShaderInfoLog(q).trim()
      g = K = !0
      if (!1 === e.getProgramParameter(F, 35714))
        (K = !1),
          (D = Gh(e, l, 'vertex')),
          (k = Gh(e, q, 'fragment')),
          console.error(
            'THREE.WebGLProgram: shader error: ',
            e.getError(),
            '35715',
            e.getProgramParameter(F, 35715),
            'gl.getProgramInfoLog',
            c,
            D,
            k
          )
      else if ('' !== c)
        console.warn('THREE.WebGLProgram: gl.getProgramInfoLog()', c)
      else if ('' === ka || '' === f) g = !1
      g &&
        (this.diagnostics = {
          runnable: K,
          programLog: c,
          vertexShader: { log: ka, prefix: h },
          fragmentShader: { log: f, prefix: t },
        })
    }
    e.deleteShader(l)
    e.deleteShader(q)
    var m
    this.getUniforms = function () {
      void 0 === m && (m = new ac(e, F))
      return m
    }
    var n
    this.getAttributes = function () {
      if (void 0 === n) {
        for (
          var a = {}, b = e.getProgramParameter(F, 35721), c = 0;
          c < b;
          c++
        ) {
          var d = e.getActiveAttrib(F, c).name
          a[d] = e.getAttribLocation(F, d)
        }
        n = a
      }
      return n
    }
    this.destroy = function () {
      d.releaseStatesOfProgram(this)
      e.deleteProgram(F)
      this.program = void 0
    }
    this.name = b.shaderName
    this.id = jk++
    this.cacheKey = a
    this.usedTimes = 1
    this.program = F
    this.vertexShader = l
    this.fragmentShader = q
    return this
  }
  function kk(c, a, b, d, e, h) {
    function l(a) {
      var b
      a
        ? a.isTexture
          ? (b = a.encoding)
          : a.isWebGLRenderTarget &&
            (console.warn(
              "THREE.WebGLPrograms.getTextureEncodingFromMap: don't use render targets as textures. Use their .texture property instead."
            ),
            (b = a.texture.encoding))
        : (b = 3e3)
      return b
    }
    var q = [],
      t = d.isWebGL2,
      f = d.logarithmicDepthBuffer,
      K = d.floatVertexTextures,
      g = d.maxVertexUniforms,
      D = d.vertexTextures,
      k = d.precision,
      p = {
        naDepthMaterial: 'depth',
        naDistanceMaterial: 'distanceRGBA',
        naNormalMaterial: 'normal',
        naBasicMaterial: 'basic',
        q7: 'lambert',
        naPhongMaterial: 'phong',
        naToonMaterial: 'toon',
        naStandardMaterial: 'physical',
        naPhysicalMaterial: 'physical',
        naMatcapMaterial: 'matcap',
        b3: 'basic',
        LineDashedMaterial: 'dashed',
        PointsMaterial: 'points',
        ShadowMaterial: 'shadow',
        SpriteMaterial: 'sprite',
      },
      F = 'precision isWebGL2 supportsVertexTextures outputEncoding instancing instancingColor map mapEncoding matcap matcapEncoding envMap envMapMode envMapEncoding envMapCubeUV lightMap lightMapEncoding aoMap emissiveMap emissiveMapEncoding bumpMap normalMap objectSpaceNormalMap tangentSpaceNormalMap clearcoatMap clearcoatRoughnessMap clearcoatNormalMap displacementMap specularMap roughnessMap metalnessMap gradientMap alphaMap combine vertexColors vertexTangents vertexUvs uvsVertexOnly fog useFog fogExp2 flatShading sizeAttenuation logarithmicDepthBuffer skinning maxBones useVertexTexture morphTargets morphNormals maxMorphTargets maxMorphNormals premultipliedAlpha numDirLights numPointLights numSpotLights numHemiLights numRectAreaLights numDirLightShadows numPointLightShadows numSpotLightShadows shadowMapEnabled shadowMapType toneMapping physicallyCorrectLights alphaTest doubleSided flipSided numClippingpls numClipIntersection depthPacking dithering sheen transmissionMap'.split(
        ' '
      )
    return {
      getParameters: function (e, q, A, M, J) {
        var F = M.fog
        M = e.isnaStandardMaterial ? M.environment : null
        M = a.get(e.envMap || M)
        var m = p[e.type],
          aa
        if (J.isSkinnedna)
          if (((aa = J.skeleton.bones), K)) aa = 1024
          else {
            var n = Math.min(Math.floor((g - 20) / 4), aa.length)
            n < aa.length
              ? (console.warn(
                  'THREE.q5: Skeleton has ' +
                    aa.length +
                    ' bones. This GPU supports ' +
                    n +
                    '.'
                ),
                (aa = 0))
              : (aa = n)
          }
        else aa = 0
        null !== e.precision &&
          ((k = d.getMaxPrecision(e.precision)),
          k !== e.precision &&
            console.warn(
              'THREE.WebGLProgram.getParameters:',
              e.precision,
              'not supported, using',
              k,
              'instead.'
            ))
        var ka
        m
          ? ((ka = qb[m]), (n = ka.vertexShader), (ka = ka.fragmentShader))
          : ((n = e.vertexShader), (ka = e.fragmentShader))
        var u = c.getRenderTarget()
        return {
          isWebGL2: t,
          shaderID: m,
          shaderName: e.type,
          vertexShader: n,
          fragmentShader: ka,
          defines: e.defines,
          isRawShaderMaterial: !0 === e.isRawShaderMaterial,
          glslVersion: e.glslVersion,
          precision: k,
          instancing: !0 === J.isInstancedna,
          instancingColor: !0 === J.isInstancedna && null !== J.instanceColor,
          supportsVertexTextures: D,
          outputEncoding: null !== u ? l(u.texture) : c.outputEncoding,
          map: !!e.map,
          mapEncoding: l(e.map),
          matcap: !!e.matcap,
          matcapEncoding: l(e.matcap),
          envMap: !!M,
          envMapMode: M && M.mapping,
          envMapEncoding: l(M),
          envMapCubeUV: !!M && (306 === M.mapping || 307 === M.mapping),
          lightMap: !!e.lightMap,
          lightMapEncoding: l(e.lightMap),
          aoMap: !!e.aoMap,
          emissiveMap: !!e.emissiveMap,
          emissiveMapEncoding: l(e.emissiveMap),
          bumpMap: !!e.bumpMap,
          normalMap: !!e.normalMap,
          objectSpaceNormalMap: 1 === e.normalMapType,
          tangentSpaceNormalMap: 0 === e.normalMapType,
          clearcoatMap: !!e.clearcoatMap,
          clearcoatRoughnessMap: !!e.clearcoatRoughnessMap,
          clearcoatNormalMap: !!e.clearcoatNormalMap,
          displacementMap: !!e.displacementMap,
          roughnessMap: !!e.roughnessMap,
          metalnessMap: !!e.metalnessMap,
          specularMap: !!e.specularMap,
          alphaMap: !!e.alphaMap,
          gradientMap: !!e.gradientMap,
          sheen: !!e.sheen,
          transmissionMap: !!e.transmissionMap,
          combine: e.combine,
          vertexTangents: e.normalMap && e.vertexTangents,
          vertexColors: e.vertexColors,
          vertexUvs:
            !!e.map ||
            !!e.bumpMap ||
            !!e.normalMap ||
            !!e.specularMap ||
            !!e.alphaMap ||
            !!e.emissiveMap ||
            !!e.roughnessMap ||
            !!e.metalnessMap ||
            !!e.clearcoatMap ||
            !!e.clearcoatRoughnessMap ||
            !!e.clearcoatNormalMap ||
            !!e.displacementMap ||
            !!e.transmissionMap,
          uvsVertexOnly:
            !(
              e.map ||
              e.bumpMap ||
              e.normalMap ||
              e.specularMap ||
              e.alphaMap ||
              e.emissiveMap ||
              e.roughnessMap ||
              e.metalnessMap ||
              e.clearcoatNormalMap ||
              e.transmissionMap
            ) && !!e.displacementMap,
          fog: !!F,
          useFog: e.fog,
          fogExp2: F && F.isFogExp2,
          flatShading: e.flatShading,
          sizeAttenuation: e.sizeAttenuation,
          logarithmicDepthBuffer: f,
          skinning: e.skinning && 0 < aa,
          maxBones: aa,
          useVertexTexture: K,
          morphTargets: e.morphTargets,
          morphNormals: e.morphNormals,
          maxMorphTargets: c.maxMorphTargets,
          maxMorphNormals: c.maxMorphNormals,
          numDirLights: q.directional.length,
          numPointLights: q.point.length,
          numSpotLights: q.spot.length,
          numRectAreaLights: q.rectArea.length,
          numHemiLights: q.hemi.length,
          numDirLightShadows: q.directionalShadowMap.length,
          numPointLightShadows: q.pointShadowMap.length,
          numSpotLightShadows: q.spotShadowMap.length,
          numClippingpls: h.numpls,
          numClipIntersection: h.numIntersection,
          dithering: e.dithering,
          shadowMapEnabled: c.shadowMap.enabled && 0 < A.length,
          shadowMapType: c.shadowMap.type,
          toneMapping: e.toneMapped ? c.toneMapping : 0,
          physicallyCorrectLights: c.physicallyCorrectLights,
          premultipliedAlpha: e.premultipliedAlpha,
          alphaTest: e.alphaTest,
          doubleSided: 2 === e.side,
          flipSided: 1 === e.side,
          depthPacking: void 0 !== e.depthPacking ? e.depthPacking : !1,
          index0AttributeName: e.index0AttributeName,
          extensionDerivatives: e.extensions && e.extensions.derivatives,
          extensionFragDepth: e.extensions && e.extensions.fragDepth,
          extensionDrawBuffers: e.extensions && e.extensions.drawBuffers,
          extensionShaderTextureLOD:
            e.extensions && e.extensions.shaderTextureLOD,
          rendererExtensionFragDepth: t || b.has('EXT_frag_depth'),
          rendererExtensionDrawBuffers: t || b.has('WEBGL_draw_buffers'),
          rendererExtensionShaderTextureLod:
            t || b.has('EXT_shader_texture_lod'),
          customProgramCacheKey: e.customProgramCacheKey(),
        }
      },
      getProgramCacheKey: function (a) {
        var b = []
        a.shaderID
          ? b.push(a.shaderID)
          : (b.push(a.fragmentShader), b.push(a.vertexShader))
        if (void 0 !== a.defines)
          for (var d in a.defines) b.push(d), b.push(a.defines[d])
        if (!1 === a.isRawShaderMaterial) {
          for (d = 0; d < F.length; d++) b.push(a[F[d]])
          b.push(c.outputEncoding)
          b.push(c.gammaFactor)
        }
        b.push(a.customProgramCacheKey)
        return b.join()
      },
      getUniforms: function (a) {
        var b = p[a.type]
        return b ? Nh.clone(qb[b].uniforms) : a.uniforms
      },
      acquireProgram: function (a, b) {
        for (var d, h = 0, l = q.length; h < l; h++) {
          var t = q[h]
          if (t.cacheKey === b) {
            d = t
            ++d.usedTimes
            break
          }
        }
        void 0 === d && ((d = new ik(c, b, a, e)), q.push(d))
        return d
      },
      releaseProgram: function (a) {
        if (0 === --a.usedTimes) {
          var b = q.indexOf(a)
          q[b] = q[q.length - 1]
          q.pop()
          a.destroy()
        }
      },
      programs: q,
    }
  }
  function lk() {
    var c = new WeakMap()
    return {
      get: function (a) {
        var b = c.get(a)
        void 0 === b && ((b = {}), c.set(a, b))
        return b
      },
      remove: function (a) {
        c['delete'](a)
      },
      update: function (a, b, d) {
        c.get(a)[b] = d
      },
      dispose: function () {
        c = new WeakMap()
      },
    }
  }
  function mk(c, a) {
    return c.groupOrder !== a.groupOrder
      ? c.groupOrder - a.groupOrder
      : c.renderOrder !== a.renderOrder
      ? c.renderOrder - a.renderOrder
      : c.program !== a.program
      ? c.program.id - a.program.id
      : c.material.id !== a.material.id
      ? c.material.id - a.material.id
      : c.z !== a.z
      ? c.z - a.z
      : c.id - a.id
  }
  function nk(c, a) {
    return c.groupOrder !== a.groupOrder
      ? c.groupOrder - a.groupOrder
      : c.renderOrder !== a.renderOrder
      ? c.renderOrder - a.renderOrder
      : c.z !== a.z
      ? a.z - c.z
      : c.id - a.id
  }
  function ok(c, a) {
    return c.renderOrder !== a.renderOrder
      ? c.renderOrder - a.renderOrder
      : c.id - a.id
  }
  function Oh(c) {
    function a(a, e, h, f, g, D) {
      var q = b[d],
        t = c.get(h)
      void 0 === q
        ? ((q = {
            id: a.id,
            object: a,
            geometry: e,
            material: h,
            program: t.program || l,
            groupOrder: f,
            renderOrder: a.renderOrder,
            z: g,
            group: D,
          }),
          (b[d] = q))
        : ((q.id = a.id),
          (q.object = a),
          (q.geometry = e),
          (q.material = h),
          (q.program = t.program || l),
          (q.groupOrder = f),
          (q.renderOrder = a.renderOrder),
          (q.z = g),
          (q.group = D))
      d++
      return q
    }
    var b = [],
      d = 0,
      e = [],
      h = [],
      l = { id: -1 }
    return {
      opaque: e,
      transparent: h,
      init: function () {
        d = 0
        e.length = 0
        h.length = 0
      },
      push: function (b, c, d, l, f, g) {
        b = a(b, c, d, l, f, g)
        ;(!0 === d.transparent ? h : e).push(b)
      },
      unshift: function (b, c, d, l, f, g) {
        b = a(b, c, d, l, f, g)
        ;(!0 === d.transparent ? h : e).unshift(b)
      },
      finish: function () {
        for (var a = d, c = b.length; a < c; a++) {
          var e = b[a]
          if (null === e.id) break
          e.id = null
          e.object = null
          e.geometry = null
          e.material = null
          e.program = null
          e.group = null
        }
      },
      sort: function (a, b) {
        1 < e.length && e.sort(a || mk)
        1 < h.length && h.sort(b || nk)
      },
    }
  }
  function pk(c) {
    var a = new WeakMap()
    return {
      get: function (b, d) {
        var e = a.get(b),
          h
        void 0 === e
          ? ((h = new Oh(c)), a.set(b, new WeakMap()), a.get(b).set(d, h))
          : ((h = e.get(d)), void 0 === h && ((h = new Oh(c)), e.set(d, h)))
        return h
      },
      dispose: function () {
        a = new WeakMap()
      },
    }
  }
  function qk() {
    var c = {}
    return {
      get: function (a) {
        if (void 0 !== c[a.id]) return c[a.id]
        var b
        switch (a.type) {
          case 'q9':
            b = { direction: new p(), color: new H() }
            break
          case 'SpotLight':
            b = {
              position: new p(),
              direction: new p(),
              color: new H(),
              distance: 0,
              coneCos: 0,
              penumbraCos: 0,
              decay: 0,
            }
            break
          case 'PointLight':
            b = { position: new p(), color: new H(), distance: 0, decay: 0 }
            break
          case 'HemisphereLight':
            b = { direction: new p(), skyColor: new H(), groundColor: new H() }
            break
          case 'RectAreaLight':
            b = {
              color: new H(),
              position: new p(),
              halfWidth: new p(),
              halfHeight: new p(),
            }
        }
        return (c[a.id] = b)
      },
    }
  }
  function rk() {
    var c = {}
    return {
      get: function (a) {
        if (void 0 !== c[a.id]) return c[a.id]
        var b
        switch (a.type) {
          case 'q9':
            b = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new B(),
            }
            break
          case 'SpotLight':
            b = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new B(),
            }
            break
          case 'PointLight':
            b = {
              shadowBias: 0,
              shadowNormalBias: 0,
              shadowRadius: 1,
              shadowMapSize: new B(),
              shadowCameraNear: 1,
              shadowCameraFar: 1e3,
            }
        }
        return (c[a.id] = b)
      },
    }
  }
  function sk(c, a) {
    return (a.castShadow ? 1 : 0) - (c.castShadow ? 1 : 0)
  }
  function tk() {
    for (
      var c = new qk(),
        a = rk(),
        b = {
          version: 0,
          hash: {
            directionalLength: -1,
            pointLength: -1,
            spotLength: -1,
            rectAreaLength: -1,
            hemiLength: -1,
            numDirectionalShadows: -1,
            numPointShadows: -1,
            numSpotShadows: -1,
          },
          ambient: [0, 0, 0],
          probe: [],
          directional: [],
          directionalShadow: [],
          directionalShadowMap: [],
          directionalShadowMatrix: [],
          spot: [],
          spotShadow: [],
          spotShadowMap: [],
          spotShadowMatrix: [],
          rectArea: [],
          rectAreaLTC1: null,
          rectAreaLTC2: null,
          point: [],
          pointShadow: [],
          pointShadowMap: [],
          pointShadowMatrix: [],
          hemi: [],
        },
        d = 0;
      9 > d;
      d++
    )
      b.probe.push(new p())
    var e = new p(),
      h = new O(),
      l = new O()
    return {
      setup: function (d, t, f) {
        for (var q = (t = 0), A = 0, g = 0; 9 > g; g++) b.probe[g].set(0, 0, 0)
        var k = (g = 0),
          p = 0,
          F = 0,
          m = 0,
          n = 0,
          u = 0,
          w = 0
        f = f.matrixWorldInverse
        d.sort(sk)
        for (var v = 0, z = d.length; v < z; v++) {
          var r = d[v],
            y = r.color,
            x = r.intensity,
            B = r.distance,
            Ga = r.shadow && r.shadow.map ? r.shadow.map.texture : null
          if (r.isq10) (t += y.r * x), (q += y.g * x), (A += y.b * x)
          else if (r.isLightProbe)
            for (Ga = 0; 9 > Ga; Ga++)
              b.probe[Ga].addScaledVector(r.sh.coefficients[Ga], x)
          else if (r.isq9) {
            x = c.get(r)
            x.color.copy(r.color).multiplyScalar(r.intensity)
            x.direction.setFromMatrixPosition(r.matrixWorld)
            e.setFromMatrixPosition(r.target.matrixWorld)
            x.direction.sub(e)
            x.direction.transformDirection(f)
            if (r.castShadow) {
              var C = r.shadow,
                y = a.get(r)
              y.shadowBias = C.bias
              y.shadowNormalBias = C.normalBias
              y.shadowRadius = C.radius
              y.shadowMapSize = C.mapSize
              b.directionalShadow[g] = y
              b.directionalShadowMap[g] = Ga
              b.directionalShadowMatrix[g] = r.shadow.matrix
              n++
            }
            b.directional[g] = x
            g++
          } else
            r.isSpotLight
              ? ((C = c.get(r)),
                C.position.setFromMatrixPosition(r.matrixWorld),
                C.position.applyMatrix4(f),
                C.color.copy(y).multiplyScalar(x),
                (C.distance = B),
                C.direction.setFromMatrixPosition(r.matrixWorld),
                e.setFromMatrixPosition(r.target.matrixWorld),
                C.direction.sub(e),
                C.direction.transformDirection(f),
                (C.coneCos = Math.cos(r.angle)),
                (C.penumbraCos = Math.cos(r.angle * (1 - r.penumbra))),
                (C.decay = r.decay),
                r.castShadow &&
                  ((x = r.shadow),
                  (y = a.get(r)),
                  (y.shadowBias = x.bias),
                  (y.shadowNormalBias = x.normalBias),
                  (y.shadowRadius = x.radius),
                  (y.shadowMapSize = x.mapSize),
                  (b.spotShadow[p] = y),
                  (b.spotShadowMap[p] = Ga),
                  (b.spotShadowMatrix[p] = r.shadow.matrix),
                  w++),
                (b.spot[p] = C),
                p++)
              : r.isRectAreaLight
              ? ((Ga = c.get(r)),
                Ga.color.copy(y).multiplyScalar(x),
                Ga.position.setFromMatrixPosition(r.matrixWorld),
                Ga.position.applyMatrix4(f),
                l.identity(),
                h.copy(r.matrixWorld),
                h.premultiply(f),
                l.extractRotation(h),
                Ga.halfWidth.set(0.5 * r.width, 0, 0),
                Ga.halfHeight.set(0, 0.5 * r.height, 0),
                Ga.halfWidth.applyMatrix4(l),
                Ga.halfHeight.applyMatrix4(l),
                (b.rectArea[F] = Ga),
                F++)
              : r.isPointLight
              ? ((x = c.get(r)),
                x.position.setFromMatrixPosition(r.matrixWorld),
                x.position.applyMatrix4(f),
                x.color.copy(r.color).multiplyScalar(r.intensity),
                (x.distance = r.distance),
                (x.decay = r.decay),
                r.castShadow &&
                  ((C = r.shadow),
                  (y = a.get(r)),
                  (y.shadowBias = C.bias),
                  (y.shadowNormalBias = C.normalBias),
                  (y.shadowRadius = C.radius),
                  (y.shadowMapSize = C.mapSize),
                  (y.shadowCameraNear = C.camera.near),
                  (y.shadowCameraFar = C.camera.far),
                  (b.pointShadow[k] = y),
                  (b.pointShadowMap[k] = Ga),
                  (b.pointShadowMatrix[k] = r.shadow.matrix),
                  u++),
                (b.point[k] = x),
                k++)
              : r.isHemisphereLight &&
                ((Ga = c.get(r)),
                Ga.direction.setFromMatrixPosition(r.matrixWorld),
                Ga.direction.transformDirection(f),
                Ga.direction.normalize(),
                Ga.skyColor.copy(r.color).multiplyScalar(x),
                Ga.groundColor.copy(r.groundColor).multiplyScalar(x),
                (b.hemi[m] = Ga),
                m++)
        }
        0 < F && ((b.rectAreaLTC1 = N.LTC_1), (b.rectAreaLTC2 = N.LTC_2))
        b.ambient[0] = t
        b.ambient[1] = q
        b.ambient[2] = A
        d = b.hash
        if (
          d.directionalLength !== g ||
          d.pointLength !== k ||
          d.spotLength !== p ||
          d.rectAreaLength !== F ||
          d.hemiLength !== m ||
          d.numDirectionalShadows !== n ||
          d.numPointShadows !== u ||
          d.numSpotShadows !== w
        )
          (b.directional.length = g),
            (b.spot.length = p),
            (b.rectArea.length = F),
            (b.point.length = k),
            (b.hemi.length = m),
            (b.directionalShadow.length = n),
            (b.directionalShadowMap.length = n),
            (b.pointShadow.length = u),
            (b.pointShadowMap.length = u),
            (b.spotShadow.length = w),
            (b.spotShadowMap.length = w),
            (b.directionalShadowMatrix.length = n),
            (b.pointShadowMatrix.length = u),
            (b.spotShadowMatrix.length = w),
            (d.directionalLength = g),
            (d.pointLength = k),
            (d.spotLength = p),
            (d.rectAreaLength = F),
            (d.hemiLength = m),
            (d.numDirectionalShadows = n),
            (d.numPointShadows = u),
            (d.numSpotShadows = w),
            (b.version = uk++)
      },
      state: b,
    }
  }
  function Ph() {
    var c = new tk(),
      a = [],
      b = []
    return {
      init: function () {
        a.length = 0
        b.length = 0
      },
      state: { lightsArray: a, shadowsArray: b, lights: c },
      setupLights: function (d) {
        c.setup(a, b, d)
      },
      pushLight: function (b) {
        a.push(b)
      },
      pushShadow: function (a) {
        b.push(a)
      },
    }
  }
  function vk() {
    var c = new WeakMap()
    return {
      get: function (a, b) {
        var d
        !1 === c.has(a)
          ? ((d = new Ph()), c.set(a, new WeakMap()), c.get(a).set(b, d))
          : !1 === c.get(a).has(b)
          ? ((d = new Ph()), c.get(a).set(b, d))
          : (d = c.get(a).get(b))
        return d
      },
      dispose: function () {
        c = new WeakMap()
      },
    }
  }
  function bc(c) {
    y.call(this)
    this.type = 'naDepthMaterial'
    this.depthPacking = 3200
    this.morphTargets = this.skinning = !1
    this.displacementMap = this.alphaMap = this.map = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.fog = !1
    this.setValues(c)
  }
  function cc(c) {
    y.call(this)
    this.type = 'naDistanceMaterial'
    this.referencePosition = new p()
    this.nearDistance = 1
    this.farDistance = 1e3
    this.morphTargets = this.skinning = !1
    this.displacementMap = this.alphaMap = this.map = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.fog = !1
    this.setValues(c)
  }
  function Qh(c, a, b) {
    function d(a, b, c) {
      c = (a << 0) | (b << 1) | (c << 2)
      var d = M[c]
      void 0 === d &&
        ((d = new bc({ depthPacking: 3201, morphTargets: a, skinning: b })),
        (M[c] = d))
      return d
    }
    function e(a, b, c) {
      c = (a << 0) | (b << 1) | (c << 2)
      var d = D[c]
      void 0 === d &&
        ((d = new cc({ morphTargets: a, skinning: b })), (D[c] = d))
      return d
    }
    function h(a, b, h, l, q, t, f) {
      var A = d,
        g = a.customDepthMaterial
      !0 === l.isPointLight && ((A = e), (g = a.customDistanceMaterial))
      void 0 === g
        ? ((g = !1),
          !0 === h.morphTargets &&
            (g =
              b.morphAttributes &&
              b.morphAttributes.position &&
              0 < b.morphAttributes.position.length),
          (b = !1),
          !0 === a.isSkinnedna &&
            (!0 === h.skinning
              ? (b = !0)
              : console.warn(
                  'THREE.WebGLShadowMap: THREE.Skinnedna with material.skinning set to false:',
                  a
                )),
          (a = A(g, b, !0 === a.isInstancedna)))
        : (a = g)
      c.localClippingEnabled &&
        !0 === h.clipShadows &&
        0 !== h.clippingpls.length &&
        ((g = a.uuid),
        (A = h.uuid),
        (b = J[g]),
        void 0 === b && ((b = {}), (J[g] = b)),
        (g = b[A]),
        void 0 === g && ((g = a.clone()), (b[A] = g)),
        (a = g))
      a.visible = h.visible
      a.wireframe = h.wireframe
      a.side =
        3 === f
          ? null !== h.shadowSide
            ? h.shadowSide
            : h.side
          : null !== h.shadowSide
          ? h.shadowSide
          : p[h.side]
      a.clipShadows = h.clipShadows
      a.clippingpls = h.clippingpls
      a.clipIntersection = h.clipIntersection
      a.wireframeLinewidth = h.wireframeLinewidth
      a.linewidth = h.linewidth
      !0 === l.isPointLight &&
        !0 === a.isnaDistanceMaterial &&
        (a.referencePosition.setFromMatrixPosition(l.matrixWorld),
        (a.nearDistance = q),
        (a.farDistance = t))
      return a
    }
    function l(b, d, e, t, f) {
      if (!1 !== b.visible) {
        if (
          b.layers.test(d.layers) &&
          (b.isna || b.isLine || b.isPoints) &&
          (b.castShadow || (b.receiveShadow && 3 === f)) &&
          (!b.frustumCulled || q.intersectsObject(b))
        ) {
          b.modelViewMatrix.multiplyMatrices(
            e.matrixWorldInverse,
            b.matrixWorld
          )
          var A = a.update(b),
            g = b.material
          if (Array.isArray(g))
            for (var K = A.groups, M = 0, k = K.length; M < k; M++) {
              var D = K[M],
                J = g[D.materialIndex]
              J &&
                J.visible &&
                ((J = h(b, A, J, t, e.near, e.far, f)),
                c.renderBufferDirect(e, null, A, J, b, D))
            }
          else
            g.visible &&
              ((g = h(b, A, g, t, e.near, e.far, f)),
              c.renderBufferDirect(e, null, A, g, b, null))
        }
        b = b.children
        A = 0
        for (g = b.length; A < g; A++) l(b[A], d, e, t, f)
      }
    }
    var q = new $a(),
      t = new B(),
      f = new B(),
      g = new P(),
      M = [],
      D = [],
      J = {},
      p = { 0: 1, 1: 0, 2: 2 },
      F = new wa({
        defines: { SAMPLE_RATE: 0.25, HALF_SAMPLE_RATE: 0.125 },
        uniforms: {
          shadow_pass: { value: null },
          resolution: { value: new B() },
          radius: { value: 4 },
        },
        vertexShader:
          'void main() {\n\tgl_Position \x3d vec4( position, 1.0 );\n}',
        fragmentShader:
          'uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include \x3cpacking\x3e\nvoid main() {\n\tfloat mean \x3d 0.0;\n\tfloat squared_mean \x3d 0.0;\n\tfloat depth \x3d unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy ) / resolution ) );\n\tfor ( float i \x3d -1.0; i \x3c 1.0 ; i +\x3d SAMPLE_RATE) {\n\t\t#ifdef HORIZONAL_PASS\n\t\t\tvec2 distribution \x3d unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( i, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean +\x3d distribution.x;\n\t\t\tsquared_mean +\x3d distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth \x3d unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, i ) * radius ) / resolution ) );\n\t\t\tmean +\x3d depth;\n\t\t\tsquared_mean +\x3d depth * depth;\n\t\t#endif\n\t}\n\tmean \x3d mean * HALF_SAMPLE_RATE;\n\tsquared_mean \x3d squared_mean * HALF_SAMPLE_RATE;\n\tfloat std_dev \x3d sqrt( squared_mean - mean * mean );\n\tgl_FragColor \x3d pack2HalfToRGBA( vec2( mean, std_dev ) );\n}',
      }),
      m = F.clone()
    m.defines.HORIZONAL_PASS = 1
    var n = new I()
    n.setAttribute(
      'position',
      new C(new Float32Array([-1, -1, 0.5, 3, -1, 0.5, -1, 3, 0.5]), 3)
    )
    var u = new ca(n, F),
      w = this
    this.enabled = !1
    this.autoUpdate = !0
    this.needsUpdate = !1
    this.type = 1
    this.render = function (d, e, h) {
      if (
        !1 !== w.enabled &&
        (!1 !== w.autoUpdate || !1 !== w.needsUpdate) &&
        0 !== d.length
      ) {
        var A = c.getRenderTarget(),
          K = c.getActiveCubeFace(),
          M = c.getActiveMipmapLevel(),
          D = c.state
        D.setBlending(0)
        D.buffers.color.setClear(1, 1, 1, 1)
        D.buffers.depth.setTest(!0)
        D.setScissorTest(!1)
        for (var J = 0, p = d.length; J < p; J++) {
          var aa = d[J],
            n = aa.shadow
          if (!1 !== n.autoUpdate || !1 !== n.needsUpdate)
            if (void 0 === n)
              console.warn('THREE.WebGLShadowMap:', aa, 'has no shadow.')
            else {
              t.copy(n.mapSize)
              var r = n.getFrameExtents()
              t.multiply(r)
              f.copy(n.mapSize)
              if (t.x > b || t.y > b)
                t.x > b &&
                  ((f.x = Math.floor(b / r.x)),
                  (t.x = f.x * r.x),
                  (n.mapSize.x = f.x)),
                  t.y > b &&
                    ((f.y = Math.floor(b / r.y)),
                    (t.y = f.y * r.y),
                    (n.mapSize.y = f.y))
              null !== n.map ||
                n.isPointLightShadow ||
                3 !== this.type ||
                ((r = { minFilter: 1006, magFilter: 1006, format: 1023 }),
                (n.map = new k(t.x, t.y, r)),
                (n.map.texture.name = aa.name + '.shadowMap'),
                (n.mapPass = new k(t.x, t.y, r)),
                n.camera.updateProjectionMatrix())
              null === n.map &&
                ((n.map = new k(t.x, t.y, {
                  minFilter: 1003,
                  magFilter: 1003,
                  format: 1023,
                })),
                (n.map.texture.name = aa.name + '.shadowMap'),
                n.camera.updateProjectionMatrix())
              c.setRenderTarget(n.map)
              c.clear()
              for (var r = n.getViewportCount(), ka = 0; ka < r; ka++) {
                var v = n.getViewport(ka)
                g.set(f.x * v.x, f.y * v.y, f.x * v.z, f.y * v.w)
                D.viewport(g)
                n.updateMatrices(aa, ka)
                q = n.getFrustum()
                l(e, h, n.camera, aa, this.type)
              }
              n.isPointLightShadow ||
                3 !== this.type ||
                ((aa = n),
                (r = h),
                (ka = a.update(u)),
                (F.uniforms.shadow_pass.value = aa.map.texture),
                (F.uniforms.resolution.value = aa.mapSize),
                (F.uniforms.radius.value = aa.radius),
                c.setRenderTarget(aa.mapPass),
                c.clear(),
                c.renderBufferDirect(r, null, ka, F, u, null),
                (m.uniforms.shadow_pass.value = aa.mapPass.texture),
                (m.uniforms.resolution.value = aa.mapSize),
                (m.uniforms.radius.value = aa.radius),
                c.setRenderTarget(aa.map),
                c.clear(),
                c.renderBufferDirect(r, null, ka, m, u, null))
              n.needsUpdate = !1
            }
        }
        w.needsUpdate = !1
        c.setRenderTarget(A, K, M)
      }
    }
  }
  function wk(c, a, b) {
    function d(a, b, d) {
      var e = new Uint8Array(4),
        h = c.createTexture()
      c.bindTexture(a, h)
      c.texParameteri(a, 10241, 9728)
      c.texParameteri(a, 10240, 9728)
      for (a = 0; a < d; a++)
        c.texImage2D(b + a, 0, 6408, 1, 1, 0, 6408, 5121, e)
      return h
    }
    function e(a) {
      !0 !== p[a] && (c.enable(a), (p[a] = !0))
    }
    function h(a) {
      !1 !== p[a] && (c.disable(a), (p[a] = !1))
    }
    function l(a, b, d, l, q, t, f, A) {
      if (0 === a) m && (h(3042), (m = !1))
      else if ((m || (e(3042), (m = !0)), 5 !== a)) {
        if (a !== n || A !== x) {
          if (100 !== u || 100 !== v) c.blendEquation(32774), (v = u = 100)
          if (A)
            switch (a) {
              case 1:
                c.blendFuncSeparate(1, 771, 1, 771)
                break
              case 2:
                c.blendFunc(1, 1)
                break
              case 3:
                c.blendFuncSeparate(0, 0, 769, 771)
                break
              case 4:
                c.blendFuncSeparate(0, 768, 0, 770)
                break
              default:
                console.error('THREE.WebGLState: Invalid blending: ', a)
            }
          else
            switch (a) {
              case 1:
                c.blendFuncSeparate(770, 771, 1, 771)
                break
              case 2:
                c.blendFunc(770, 1)
                break
              case 3:
                c.blendFunc(0, 769)
                break
              case 4:
                c.blendFunc(0, 768)
                break
              default:
                console.error('THREE.WebGLState: Invalid blending: ', a)
            }
          y = z = w = r = null
          n = a
          x = A
        }
      } else {
        q = q || b
        t = t || d
        f = f || l
        if (b !== u || q !== v)
          c.blendEquationSeparate(xc[b], xc[q]), (u = b), (v = q)
        if (d !== r || l !== w || t !== z || f !== y)
          c.blendFuncSeparate($e[d], $e[l], $e[t], $e[f]),
            (r = d),
            (w = l),
            (z = t),
            (y = f)
        n = a
        x = null
      }
    }
    function q(a) {
      B !== a && (a ? c.frontFace(2304) : c.frontFace(2305), (B = a))
    }
    function t(a) {
      0 !== a
        ? (e(2884),
          a !== C &&
            (1 === a
              ? c.cullFace(1029)
              : 2 === a
              ? c.cullFace(1028)
              : c.cullFace(1032)))
        : h(2884)
      C = a
    }
    function f(a, b, d) {
      if (a) {
        if ((e(32823), L !== b || Q !== d))
          c.polygonOffset(b, d), (L = b), (Q = d)
      } else h(32823)
    }
    function g(a) {
      void 0 === a && (a = 33984 + H - 1)
      I !== a && (c.activeTexture(a), (I = a))
    }
    b = b.isWebGL2
    var M = new (function () {
        var a = !1,
          b = new P(),
          d = null,
          e = new P(0, 0, 0, 0)
        return {
          setMask: function (b) {
            d === b || a || (c.colorMask(b, b, b, b), (d = b))
          },
          setLocked: function (b) {
            a = b
          },
          setClear: function (a, d, h, l, q) {
            !0 === q && ((a *= l), (d *= l), (h *= l))
            b.set(a, d, h, l)
            !1 === e.equals(b) && (c.clearColor(a, d, h, l), e.copy(b))
          },
          reset: function () {
            a = !1
            d = null
            e.set(-1, 0, 0, 0)
          },
        }
      })(),
      k = new (function () {
        var a = !1,
          b = null,
          d = null,
          l = null
        return {
          setTest: function (a) {
            a ? e(2929) : h(2929)
          },
          setMask: function (d) {
            b === d || a || (c.depthMask(d), (b = d))
          },
          setFunc: function (a) {
            if (d !== a) {
              if (a)
                switch (a) {
                  case 0:
                    c.depthFunc(512)
                    break
                  case 1:
                    c.depthFunc(519)
                    break
                  case 2:
                    c.depthFunc(513)
                    break
                  case 3:
                    c.depthFunc(515)
                    break
                  case 4:
                    c.depthFunc(514)
                    break
                  case 5:
                    c.depthFunc(518)
                    break
                  case 6:
                    c.depthFunc(516)
                    break
                  case 7:
                    c.depthFunc(517)
                    break
                  default:
                    c.depthFunc(515)
                }
              else c.depthFunc(515)
              d = a
            }
          },
          setLocked: function (b) {
            a = b
          },
          setClear: function (a) {
            l !== a && (c.clearDepth(a), (l = a))
          },
          reset: function () {
            a = !1
            l = d = b = null
          },
        }
      })(),
      J = new (function () {
        var a = !1,
          b = null,
          d = null,
          l = null,
          q = null,
          t = null,
          f = null,
          A = null,
          g = null
        return {
          setTest: function (b) {
            a || (b ? e(2960) : h(2960))
          },
          setMask: function (d) {
            b === d || a || (c.stencilMask(d), (b = d))
          },
          setFunc: function (a, b, e) {
            if (d !== a || l !== b || q !== e)
              c.stencilFunc(a, b, e), (d = a), (l = b), (q = e)
          },
          setOp: function (a, b, d) {
            if (t !== a || f !== b || A !== d)
              c.stencilOp(a, b, d), (t = a), (f = b), (A = d)
          },
          setLocked: function (b) {
            a = b
          },
          setClear: function (a) {
            g !== a && (c.clearStencil(a), (g = a))
          },
          reset: function () {
            a = !1
            g = A = f = t = q = l = d = b = null
          },
        }
      })(),
      p = {},
      F = null,
      m = null,
      n = null,
      u = null,
      r = null,
      w = null,
      v = null,
      z = null,
      y = null,
      x = !1,
      B = null,
      C = null,
      E = null,
      L = null,
      Q = null,
      H = c.getParameter(35661),
      za = !1,
      G = 0,
      G = c.getParameter(7938)
    ;-1 !== G.indexOf('WebGL')
      ? ((G = parseFloat(/^WebGL\ ([0-9])/.exec(G)[1])), (za = 1 <= G))
      : -1 !== G.indexOf('OpenGL ES') &&
        ((G = parseFloat(/^OpenGL\ ES\ ([0-9])/.exec(G)[1])), (za = 2 <= G))
    var I = null,
      O = {},
      N = new P(),
      R = new P(),
      X = {}
    X[3553] = d(3553, 3553, 1)
    X[34067] = d(34067, 34069, 6)
    M.setClear(0, 0, 0, 1)
    k.setClear(1)
    J.setClear(0)
    e(2929)
    k.setFunc(3)
    q(!1)
    t(1)
    e(2884)
    l(0)
    var xc = { 100: 32774, 101: 32778, 102: 32779 }
    b
      ? ((xc[103] = 32775), (xc[104] = 32776))
      : ((a = a.get('EXT_blend_minmax')),
        null !== a && ((xc[103] = a.MIN_EXT), (xc[104] = a.MAX_EXT)))
    var $e = {
      200: 0,
      201: 1,
      202: 768,
      204: 770,
      210: 776,
      208: 774,
      206: 772,
      203: 769,
      205: 771,
      209: 775,
      207: 773,
    }
    return {
      buffers: { color: M, depth: k, stencil: J },
      enable: e,
      disable: h,
      useProgram: function (a) {
        return F !== a ? (c.useProgram(a), (F = a), !0) : !1
      },
      setBlending: l,
      setMaterial: function (a, b) {
        2 === a.side ? h(2884) : e(2884)
        var c = 1 === a.side
        b && (c = !c)
        q(c)
        1 === a.blending && !1 === a.transparent
          ? l(0)
          : l(
              a.blending,
              a.blendEquation,
              a.blendSrc,
              a.blendDst,
              a.blendEquationAlpha,
              a.blendSrcAlpha,
              a.blendDstAlpha,
              a.premultipliedAlpha
            )
        k.setFunc(a.depthFunc)
        k.setTest(a.depthTest)
        k.setMask(a.depthWrite)
        M.setMask(a.colorWrite)
        c = a.stencilWrite
        J.setTest(c)
        c &&
          (J.setMask(a.stencilWriteMask),
          J.setFunc(a.stencilFunc, a.stencilRef, a.stencilFuncMask),
          J.setOp(a.stencilFail, a.stencilZFail, a.stencilZPass))
        f(a.polygonOffset, a.polygonOffsetFactor, a.polygonOffsetUnits)
      },
      setFlipSided: q,
      setCullFace: t,
      setLineWidth: function (a) {
        a !== E && (za && c.lineWidth(a), (E = a))
      },
      setPolygonOffset: f,
      setScissorTest: function (a) {
        a ? e(3089) : h(3089)
      },
      activeTexture: g,
      bindTexture: function (a, b) {
        null === I && g()
        var d = O[I]
        void 0 === d && ((d = { type: void 0, texture: void 0 }), (O[I] = d))
        if (d.type !== a || d.texture !== b)
          c.bindTexture(a, b || X[a]), (d.type = a), (d.texture = b)
      },
      unbindTexture: function () {
        var a = O[I]
        void 0 !== a &&
          void 0 !== a.type &&
          (c.bindTexture(a.type, null), (a.type = void 0), (a.texture = void 0))
      },
      compressedTexImage2D: function () {
        try {
          c.compressedTexImage2D.apply(c, arguments)
        } catch (gb) {
          console.error('THREE.WebGLState:', gb)
        }
      },
      texImage2D: function () {
        try {
          c.texImage2D.apply(c, arguments)
        } catch (gb) {
          console.error('THREE.WebGLState:', gb)
        }
      },
      texImage3D: function () {
        try {
          c.texImage3D.apply(c, arguments)
        } catch (gb) {
          console.error('THREE.WebGLState:', gb)
        }
      },
      scissor: function (a) {
        !1 === N.equals(a) && (c.scissor(a.x, a.y, a.z, a.w), N.copy(a))
      },
      viewport: function (a) {
        !1 === R.equals(a) && (c.viewport(a.x, a.y, a.z, a.w), R.copy(a))
      },
      reset: function () {
        p = {}
        I = null
        O = {}
        C = B = n = F = null
        M.reset()
        k.reset()
        J.reset()
      },
    }
  }
  function xk(c, a, b, d, e, h, l) {
    function q(a, b) {
      return I
        ? new OffscreenCanvas(a, b)
        : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas')
    }
    function t(a, b, c, d) {
      var e = 1
      if (a.width > d || a.height > d) e = d / Math.max(a.width, a.height)
      if (1 > e || !0 === b) {
        if (
          ('undefined' !== typeof HTMLImageElement &&
            a instanceof HTMLImageElement) ||
          ('undefined' !== typeof HTMLCanvasElement &&
            a instanceof HTMLCanvasElement) ||
          ('undefined' !== typeof ImageBitmap && a instanceof ImageBitmap)
        )
          return (
            (d = b ? ea.floorPowerOfTwo : Math.floor),
            (b = d(e * a.width)),
            (e = d(e * a.height)),
            void 0 === za && (za = q(b, e)),
            (c = c ? q(b, e) : za),
            (c.width = b),
            (c.height = e),
            c.getContext('2d').drawImage(a, 0, 0, b, e),
            console.warn(
              'THREE.q5: Texture has been resized from (' +
                a.width +
                'x' +
                a.height +
                ') to (' +
                b +
                'x' +
                e +
                ').'
            ),
            c
          )
        'data' in a &&
          console.warn(
            'THREE.q5: Image in DataTexture is too big (' +
              a.width +
              'x' +
              a.height +
              ').'
          )
      }
      return a
    }
    function f(a) {
      return ea.isPowerOfTwo(a.width) && ea.isPowerOfTwo(a.height)
    }
    function g(a, b) {
      return (
        a.generateMipmaps && b && 1003 !== a.minFilter && 1006 !== a.minFilter
      )
    }
    function M(a, b, e, h) {
      c.generateMipmap(a)
      d.get(b).__maxMipLevel = Math.log(Math.max(e, h)) * Math.LOG2E
    }
    function k(b, d, e) {
      if (!1 === C) return d
      if (null !== b) {
        if (void 0 !== c[b]) return c[b]
        console.warn(
          "THREE.q5: Attempt to use non-existing WebGL internal format '" +
            b +
            "'"
        )
      }
      b = d
      6403 === d &&
        (5126 === e && (b = 33326),
        5131 === e && (b = 33325),
        5121 === e && (b = 33321))
      6407 === d &&
        (5126 === e && (b = 34837),
        5131 === e && (b = 34843),
        5121 === e && (b = 32849))
      6408 === d &&
        (5126 === e && (b = 34836),
        5131 === e && (b = 34842),
        5121 === e && (b = 32856))
      ;(33325 !== b && 33326 !== b && 34842 !== b && 34836 !== b) ||
        a.get('EXT_color_buffer_float')
      return b
    }
    function J(a) {
      return 1003 === a || 1004 === a || 1005 === a ? 9728 : 9729
    }
    function p(a) {
      a = a.target
      a.removeEventListener('dispose', p)
      var b = d.get(a)
      void 0 !== b.__webglInit &&
        (c.deleteTexture(b.__webglTexture), d.remove(a))
      a.isVideoTexture && H['delete'](a)
      l.memory.textures--
    }
    function m(a) {
      a = a.target
      a.removeEventListener('dispose', m)
      var b = d.get(a),
        e = d.get(a.texture)
      if (a) {
        void 0 !== e.__webglTexture && c.deleteTexture(e.__webglTexture)
        a.depthTexture && a.depthTexture.dispose()
        if (a.isWebGLCubeRenderTarget)
          for (e = 0; 6 > e; e++)
            c.deleteFramebuffer(b.__webglFramebuffer[e]),
              b.__webglDepthbuffer &&
                c.deleteRenderbuffer(b.__webglDepthbuffer[e])
        else
          c.deleteFramebuffer(b.__webglFramebuffer),
            b.__webglDepthbuffer && c.deleteRenderbuffer(b.__webglDepthbuffer),
            b.__webglMultisampledFramebuffer &&
              c.deleteFramebuffer(b.__webglMultisampledFramebuffer),
            b.__webglColorRenderbuffer &&
              c.deleteRenderbuffer(b.__webglColorRenderbuffer),
            b.__webglDepthRenderbuffer &&
              c.deleteRenderbuffer(b.__webglDepthRenderbuffer)
        d.remove(a.texture)
        d.remove(a)
      }
      l.memory.textures--
    }
    function n(a, c) {
      var e = d.get(a)
      if (a.isVideoTexture) {
        var h = l.render.frame
        H.get(a) !== h && (H.set(a, h), a.update())
      }
      if (0 < a.version && e.__version !== a.version)
        if (((h = a.image), void 0 === h))
          console.warn(
            'THREE.q5: Texture marked for update but image is undefined'
          )
        else if (!1 === h.complete)
          console.warn(
            'THREE.q5: Texture marked for update but image is incomplete'
          )
        else {
          z(e, a, c)
          return
        }
      b.activeTexture(33984 + c)
      b.bindTexture(3553, e.__webglTexture)
    }
    function u(a, e) {
      if (6 === a.image.length) {
        var l = d.get(a)
        if (0 < a.version && l.__version !== a.version) {
          v(l, a)
          b.activeTexture(33984 + e)
          b.bindTexture(34067, l.__webglTexture)
          c.pixelStorei(37440, a.flipY)
          for (
            var q =
                a && (a.isCompressedTexture || a.image[0].isCompressedTexture),
              A = a.image[0] && a.image[0].isDataTexture,
              K = [],
              D = 0;
            6 > D;
            D++
          )
            K[D] =
              q || A
                ? A
                  ? a.image[D].image
                  : a.image[D]
                : t(a.image[D], !1, !0, L)
          var D = K[0],
            J = f(D) || C,
            p = h.convert(a.format),
            m = h.convert(a.type),
            F = k(a.internalFormat, p, m)
          w(34067, a, J)
          var n
          if (q) {
            for (A = 0; 6 > A; A++)
              for (n = K[A].mipmaps, q = 0; q < n.length; q++) {
                var aa = n[q]
                1023 !== a.format && 1022 !== a.format
                  ? null !== p
                    ? b.compressedTexImage2D(
                        34069 + A,
                        q,
                        F,
                        aa.width,
                        aa.height,
                        0,
                        aa.data
                      )
                    : console.warn(
                        'THREE.q5: Attempt to load unsupported compressed texture format in .setTextureCube()'
                      )
                  : b.texImage2D(
                      34069 + A,
                      q,
                      F,
                      aa.width,
                      aa.height,
                      0,
                      p,
                      m,
                      aa.data
                    )
              }
            l.__maxMipLevel = n.length - 1
          } else {
            n = a.mipmaps
            for (q = 0; 6 > q; q++)
              if (A)
                for (
                  b.texImage2D(
                    34069 + q,
                    0,
                    F,
                    K[q].width,
                    K[q].height,
                    0,
                    p,
                    m,
                    K[q].data
                  ),
                    aa = 0;
                  aa < n.length;
                  aa++
                ) {
                  var u = n[aa].image[q].image
                  b.texImage2D(
                    34069 + q,
                    aa + 1,
                    F,
                    u.width,
                    u.height,
                    0,
                    p,
                    m,
                    u.data
                  )
                }
              else
                for (
                  b.texImage2D(34069 + q, 0, F, p, m, K[q]), aa = 0;
                  aa < n.length;
                  aa++
                )
                  b.texImage2D(34069 + q, aa + 1, F, p, m, n[aa].image[q])
            l.__maxMipLevel = n.length
          }
          g(a, J) && M(34067, a, D.width, D.height)
          l.__version = a.version
          if (a.onUpdate) a.onUpdate(a)
        } else
          b.activeTexture(33984 + e), b.bindTexture(34067, l.__webglTexture)
      }
    }
    function r(a, c) {
      b.activeTexture(33984 + c)
      b.bindTexture(34067, d.get(a).__webglTexture)
    }
    function w(b, h, l) {
      l
        ? (c.texParameteri(b, 10242, N[h.wrapS]),
          c.texParameteri(b, 10243, N[h.wrapT]),
          (32879 !== b && 35866 !== b) || c.texParameteri(b, 32882, N[h.wrapR]),
          c.texParameteri(b, 10240, P[h.magFilter]),
          c.texParameteri(b, 10241, P[h.minFilter]))
        : (c.texParameteri(b, 10242, 33071),
          c.texParameteri(b, 10243, 33071),
          (32879 !== b && 35866 !== b) || c.texParameteri(b, 32882, 33071),
          (1001 === h.wrapS && 1001 === h.wrapT) ||
            console.warn(
              'THREE.q5: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.'
            ),
          c.texParameteri(b, 10240, J(h.magFilter)),
          c.texParameteri(b, 10241, J(h.minFilter)),
          1003 !== h.minFilter &&
            1006 !== h.minFilter &&
            console.warn(
              'THREE.q5: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.'
            ))
      !(l = a.get('EXT_texture_filter_anisotropic')) ||
        (1015 === h.type && null === a.get('OES_texture_float_linear')) ||
        (1016 === h.type &&
          null === (C || a.get('OES_texture_half_float_linear'))) ||
        !(1 < h.anisotropy || d.get(h).__currentAnisotropy) ||
        (c.texParameterf(
          b,
          l.TEXTURE_MAX_ANISOTROPY_EXT,
          Math.min(h.anisotropy, e.getMaxAnisotropy())
        ),
        (d.get(h).__currentAnisotropy = h.anisotropy))
    }
    function v(a, b) {
      void 0 === a.__webglInit &&
        ((a.__webglInit = !0),
        b.addEventListener('dispose', p),
        (a.__webglTexture = c.createTexture()),
        l.memory.textures++)
    }
    function z(a, d, e) {
      var l = 3553
      d.isDataTexture2DArray && (l = 35866)
      d.isDataTexture3D && (l = 32879)
      v(a, d)
      b.activeTexture(33984 + e)
      b.bindTexture(l, a.__webglTexture)
      c.pixelStorei(37440, d.flipY)
      c.pixelStorei(37441, d.premultiplyAlpha)
      c.pixelStorei(3317, d.unpackAlignment)
      e = C
        ? !1
        : 1001 !== d.wrapS ||
          1001 !== d.wrapT ||
          (1003 !== d.minFilter && 1006 !== d.minFilter)
      e = e && !1 === f(d.image)
      e = t(d.image, e, !1, G)
      var q = f(e) || C,
        A = h.convert(d.format),
        K = h.convert(d.type),
        D = k(d.internalFormat, A, K)
      w(l, d, q)
      var J,
        p = d.mipmaps
      if (d.isDepthTexture)
        (D = 6402),
          C
            ? (D =
                1015 === d.type
                  ? 36012
                  : 1014 === d.type
                  ? 33190
                  : 1020 === d.type
                  ? 35056
                  : 33189)
            : 1015 === d.type &&
              console.error(
                'q5: Floating point depth texture requires WebGL2.'
              ),
          1026 === d.format &&
            6402 === D &&
            1012 !== d.type &&
            1014 !== d.type &&
            (console.warn(
              'THREE.q5: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.'
            ),
            (d.type = 1012),
            (K = h.convert(d.type))),
          1027 === d.format &&
            6402 === D &&
            ((D = 34041),
            1020 !== d.type &&
              (console.warn(
                'THREE.q5: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.'
              ),
              (d.type = 1020),
              (K = h.convert(d.type)))),
          b.texImage2D(3553, 0, D, e.width, e.height, 0, A, K, null)
      else if (d.isDataTexture)
        if (0 < p.length && q) {
          for (var m = 0, F = p.length; m < F; m++)
            (J = p[m]),
              b.texImage2D(3553, m, D, J.width, J.height, 0, A, K, J.data)
          d.generateMipmaps = !1
          a.__maxMipLevel = p.length - 1
        } else
          b.texImage2D(3553, 0, D, e.width, e.height, 0, A, K, e.data),
            (a.__maxMipLevel = 0)
      else if (d.isCompressedTexture) {
        m = 0
        for (F = p.length; m < F; m++)
          (J = p[m]),
            1023 !== d.format && 1022 !== d.format
              ? null !== A
                ? b.compressedTexImage2D(
                    3553,
                    m,
                    D,
                    J.width,
                    J.height,
                    0,
                    J.data
                  )
                : console.warn(
                    'THREE.q5: Attempt to load unsupported compressed texture format in .uploadTexture()'
                  )
              : b.texImage2D(3553, m, D, J.width, J.height, 0, A, K, J.data)
        a.__maxMipLevel = p.length - 1
      } else if (d.isDataTexture2DArray)
        b.texImage3D(35866, 0, D, e.width, e.height, e.depth, 0, A, K, e.data),
          (a.__maxMipLevel = 0)
      else if (d.isDataTexture3D)
        b.texImage3D(32879, 0, D, e.width, e.height, e.depth, 0, A, K, e.data),
          (a.__maxMipLevel = 0)
      else if (0 < p.length && q) {
        m = 0
        for (F = p.length; m < F; m++)
          (J = p[m]), b.texImage2D(3553, m, D, A, K, J)
        d.generateMipmaps = !1
        a.__maxMipLevel = p.length - 1
      } else b.texImage2D(3553, 0, D, A, K, e), (a.__maxMipLevel = 0)
      g(d, q) && M(l, d, e.width, e.height)
      a.__version = d.version
      if (d.onUpdate) d.onUpdate(d)
    }
    function y(a, e, l, q) {
      var t = h.convert(e.texture.format),
        f = h.convert(e.texture.type),
        A = k(e.texture.internalFormat, t, f)
      b.texImage2D(q, 0, A, e.width, e.height, 0, t, f, null)
      c.bindFramebuffer(36160, a)
      c.framebufferTexture2D(36160, l, q, d.get(e.texture).__webglTexture, 0)
      c.bindFramebuffer(36160, null)
    }
    function x(a, b, d) {
      c.bindRenderbuffer(36161, a)
      if (b.depthBuffer && !b.stencilBuffer) {
        var e = 33189
        d
          ? ((d = b.depthTexture) &&
              d.isDepthTexture &&
              (1015 === d.type ? (e = 36012) : 1014 === d.type && (e = 33190)),
            (d = B(b)),
            c.renderbufferStorageMultisample(36161, d, e, b.width, b.height))
          : c.renderbufferStorage(36161, e, b.width, b.height)
        c.framebufferRenderbuffer(36160, 36096, 36161, a)
      } else b.depthBuffer && b.stencilBuffer ? (d ? ((d = B(b)), c.renderbufferStorageMultisample(36161, d, 35056, b.width, b.height)) : c.renderbufferStorage(36161, 34041, b.width, b.height), c.framebufferRenderbuffer(36160, 33306, 36161, a)) : ((a = h.convert(b.texture.format)), (e = h.convert(b.texture.type)), (a = k(b.texture.internalFormat, a, e)), d ? ((d = B(b)), c.renderbufferStorageMultisample(36161, d, a, b.width, b.height)) : c.renderbufferStorage(36161, a, b.width, b.height))
      c.bindRenderbuffer(36161, null)
    }
    function B(a) {
      return C && a.isWebGLMultisampleRenderTarget ? Math.min(Q, a.samples) : 0
    }
    var C = e.isWebGL2,
      E = e.maxTextures,
      L = e.maxCubemapSize,
      G = e.maxTextureSize,
      Q = e.maxSamples,
      H = new WeakMap(),
      za,
      I = !1
    try {
      I =
        'undefined' !== typeof OffscreenCanvas &&
        null !== new OffscreenCanvas(1, 1).getContext('2d')
    } catch (xc) {}
    var O = 0,
      N = { 1e3: 10497, 1001: 33071, 1002: 33648 },
      P = {
        1003: 9728,
        1004: 9984,
        1005: 9986,
        1006: 9729,
        1007: 9985,
        1008: 9987,
      },
      R = !1,
      X = !1
    this.allocateTextureUnit = function () {
      var a = O
      a >= E &&
        console.warn(
          'THREE.WebGLTextures: Trying to use ' +
            a +
            ' texture units while this GPU supports only ' +
            E
        )
      O += 1
      return a
    }
    this.resetTextureUnits = function () {
      O = 0
    }
    this.setTexture2D = n
    this.setTexture2DArray = function (a, c) {
      var e = d.get(a)
      0 < a.version && e.__version !== a.version
        ? z(e, a, c)
        : (b.activeTexture(33984 + c), b.bindTexture(35866, e.__webglTexture))
    }
    this.setTexture3D = function (a, c) {
      var e = d.get(a)
      0 < a.version && e.__version !== a.version
        ? z(e, a, c)
        : (b.activeTexture(33984 + c), b.bindTexture(32879, e.__webglTexture))
    }
    this.setTextureCube = u
    this.setTextureCubeDynamic = r
    this.setupRenderTarget = function (a) {
      var e = d.get(a),
        q = d.get(a.texture)
      a.addEventListener('dispose', m)
      q.__webglTexture = c.createTexture()
      l.memory.textures++
      var t = !0 === a.isWebGLCubeRenderTarget,
        A = !0 === a.isWebGLMultisampleRenderTarget,
        K = f(a) || C
      !C ||
        1022 !== a.texture.format ||
        (1015 !== a.texture.type && 1016 !== a.texture.type) ||
        ((a.texture.format = 1023),
        console.warn(
          'THREE.q5: Rendering to textures with RGB format is not supported. Using RGBA format instead.'
        ))
      if (t)
        for (e.__webglFramebuffer = [], A = 0; 6 > A; A++)
          e.__webglFramebuffer[A] = c.createFramebuffer()
      else if (((e.__webglFramebuffer = c.createFramebuffer()), A))
        if (C) {
          e.__webglMultisampledFramebuffer = c.createFramebuffer()
          e.__webglColorRenderbuffer = c.createRenderbuffer()
          c.bindRenderbuffer(36161, e.__webglColorRenderbuffer)
          var A = h.convert(a.texture.format),
            D = h.convert(a.texture.type),
            A = k(a.texture.internalFormat, A, D),
            D = B(a)
          c.renderbufferStorageMultisample(36161, D, A, a.width, a.height)
          c.bindFramebuffer(36160, e.__webglMultisampledFramebuffer)
          c.framebufferRenderbuffer(
            36160,
            36064,
            36161,
            e.__webglColorRenderbuffer
          )
          c.bindRenderbuffer(36161, null)
          a.depthBuffer &&
            ((e.__webglDepthRenderbuffer = c.createRenderbuffer()),
            x(e.__webglDepthRenderbuffer, a, !0))
          c.bindFramebuffer(36160, null)
        } else
          console.warn(
            'THREE.q5: WebGLMultisampleRenderTarget can only be used with WebGL2.'
          )
      if (t) {
        b.bindTexture(34067, q.__webglTexture)
        w(34067, a.texture, K)
        for (q = 0; 6 > q; q++) y(e.__webglFramebuffer[q], a, 36064, 34069 + q)
        g(a.texture, K) && M(34067, a.texture, a.width, a.height)
        b.bindTexture(34067, null)
      } else
        b.bindTexture(3553, q.__webglTexture),
          w(3553, a.texture, K),
          y(e.__webglFramebuffer, a, 36064, 3553),
          g(a.texture, K) && M(3553, a.texture, a.width, a.height),
          b.bindTexture(3553, null)
      if (a.depthBuffer) {
        e = d.get(a)
        K = !0 === a.isWebGLCubeRenderTarget
        if (a.depthTexture) {
          if (K)
            throw Error(
              'target.depthTexture not supported in Cube render targets'
            )
          if (a && a.isWebGLCubeRenderTarget)
            throw Error(
              'Depth Texture with cube render targets is not supported'
            )
          c.bindFramebuffer(36160, e.__webglFramebuffer)
          if (!a.depthTexture || !a.depthTexture.isDepthTexture)
            throw Error(
              'renderTarget.depthTexture must be an instance of THREE.DepthTexture'
            )
          ;(d.get(a.depthTexture).__webglTexture &&
            a.depthTexture.image.width === a.width &&
            a.depthTexture.image.height === a.height) ||
            ((a.depthTexture.image.width = a.width),
            (a.depthTexture.image.height = a.height),
            (a.depthTexture.needsUpdate = !0))
          n(a.depthTexture, 0)
          e = d.get(a.depthTexture).__webglTexture
          if (1026 === a.depthTexture.format)
            c.framebufferTexture2D(36160, 36096, 3553, e, 0)
          else if (1027 === a.depthTexture.format)
            c.framebufferTexture2D(36160, 33306, 3553, e, 0)
          else throw Error('Unknown depthTexture format')
        } else if (K)
          for (e.__webglDepthbuffer = [], K = 0; 6 > K; K++)
            c.bindFramebuffer(36160, e.__webglFramebuffer[K]),
              (e.__webglDepthbuffer[K] = c.createRenderbuffer()),
              x(e.__webglDepthbuffer[K], a, !1)
        else
          c.bindFramebuffer(36160, e.__webglFramebuffer),
            (e.__webglDepthbuffer = c.createRenderbuffer()),
            x(e.__webglDepthbuffer, a, !1)
        c.bindFramebuffer(36160, null)
      }
    }
    this.updateRenderTargetMipmap = function (a) {
      var c = a.texture,
        e = f(a) || C
      if (g(c, e)) {
        var e = a.isWebGLCubeRenderTarget ? 34067 : 3553,
          h = d.get(c).__webglTexture
        b.bindTexture(e, h)
        M(e, c, a.width, a.height)
        b.bindTexture(e, null)
      }
    }
    this.updateMultisampleRenderTarget = function (a) {
      if (a.isWebGLMultisampleRenderTarget)
        if (C) {
          var b = d.get(a)
          c.bindFramebuffer(36008, b.__webglMultisampledFramebuffer)
          c.bindFramebuffer(36009, b.__webglFramebuffer)
          var e = a.width,
            h = a.height,
            l = 16384
          a.depthBuffer && (l |= 256)
          a.stencilBuffer && (l |= 1024)
          c.blitFramebuffer(0, 0, e, h, 0, 0, e, h, l, 9728)
          c.bindFramebuffer(36160, b.__webglMultisampledFramebuffer)
        } else
          console.warn(
            'THREE.q5: WebGLMultisampleRenderTarget can only be used with WebGL2.'
          )
    }
    this.safeSetTexture2D = function (a, b) {
      a &&
        a.isWebGLRenderTarget &&
        (!1 === R &&
          (console.warn(
            "THREE.WebGLTextures.safeSetTexture2D: don't use render targets as textures. Use their .texture property instead."
          ),
          (R = !0)),
        (a = a.texture))
      n(a, b)
    }
    this.safeSetTextureCube = function (a, b) {
      a &&
        a.isWebGLCubeRenderTarget &&
        (!1 === X &&
          (console.warn(
            "THREE.WebGLTextures.safeSetTextureCube: don't use cube render targets as textures. Use their .texture property instead."
          ),
          (X = !0)),
        (a = a.texture))
      ;(a && a.isCubeTexture) ||
      (Array.isArray(a.image) && 6 === a.image.length)
        ? u(a, b)
        : r(a, b)
    }
  }
  function Rh(c, a, b) {
    var d = b.isWebGL2
    return {
      convert: function (b) {
        var c
        if (1009 === b) return 5121
        if (1017 === b) return 32819
        if (1018 === b) return 32820
        if (1019 === b) return 33635
        if (1010 === b) return 5120
        if (1011 === b) return 5122
        if (1012 === b) return 5123
        if (1013 === b) return 5124
        if (1014 === b) return 5125
        if (1015 === b) return 5126
        if (1016 === b) {
          if (d) return 5131
          c = a.get('OES_texture_half_float')
          return null !== c ? c.HALF_FLOAT_OES : null
        }
        if (1021 === b) return 6406
        if (1022 === b) return 6407
        if (1023 === b) return 6408
        if (1024 === b) return 6409
        if (1025 === b) return 6410
        if (1026 === b) return 6402
        if (1027 === b) return 34041
        if (1028 === b) return 6403
        if (1029 === b) return 36244
        if (1030 === b) return 33319
        if (1031 === b) return 33320
        if (1032 === b) return 36248
        if (1033 === b) return 36249
        if (33776 === b || 33777 === b || 33778 === b || 33779 === b)
          if (((c = a.get('WEBGL_compressed_texture_s3tc')), null !== c)) {
            if (33776 === b) return c.COMPRESSED_RGB_S3TC_DXT1_EXT
            if (33777 === b) return c.COMPRESSED_RGBA_S3TC_DXT1_EXT
            if (33778 === b) return c.COMPRESSED_RGBA_S3TC_DXT3_EXT
            if (33779 === b) return c.COMPRESSED_RGBA_S3TC_DXT5_EXT
          } else return null
        if (35840 === b || 35841 === b || 35842 === b || 35843 === b)
          if (((c = a.get('WEBGL_compressed_texture_pvrtc')), null !== c)) {
            if (35840 === b) return c.COMPRESSED_RGB_PVRTC_4BPPV1_IMG
            if (35841 === b) return c.COMPRESSED_RGB_PVRTC_2BPPV1_IMG
            if (35842 === b) return c.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG
            if (35843 === b) return c.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG
          } else return null
        if (36196 === b)
          return (
            (c = a.get('WEBGL_compressed_texture_etc1')),
            null !== c ? c.COMPRESSED_RGB_ETC1_WEBGL : null
          )
        if (37492 === b || 37496 === b)
          if (((c = a.get('WEBGL_compressed_texture_etc')), null !== c)) {
            if (37492 === b) return c.COMPRESSED_RGB8_ETC2
            if (37496 === b) return c.COMPRESSED_RGBA8_ETC2_EAC
          }
        if (
          37808 === b ||
          37809 === b ||
          37810 === b ||
          37811 === b ||
          37812 === b ||
          37813 === b ||
          37814 === b ||
          37815 === b ||
          37816 === b ||
          37817 === b ||
          37818 === b ||
          37819 === b ||
          37820 === b ||
          37821 === b ||
          37840 === b ||
          37841 === b ||
          37842 === b ||
          37843 === b ||
          37844 === b ||
          37845 === b ||
          37846 === b ||
          37847 === b ||
          37848 === b ||
          37849 === b ||
          37850 === b ||
          37851 === b ||
          37852 === b ||
          37853 === b
        )
          return (
            (c = a.get('WEBGL_compressed_texture_astc')), null !== c ? b : null
          )
        if (36492 === b)
          return (
            (c = a.get('EXT_texture_compression_bptc')), null !== c ? b : null
          )
        if (1020 === b) {
          if (d) return 34042
          c = a.get('WEBGL_depth_texture')
          return null !== c ? c.UNSIGNED_INT_24_8_WEBGL : null
        }
      },
    }
  }
  function bf(c) {
    la.call(this)
    this.cameras = c || []
  }
  function dc() {
    n.call(this)
    this.type = 'Group'
  }
  function Vd() {
    this._hand = this._grip = this._targetRay = null
  }
  function Sh(c, a) {
    function b(a) {
      var b = m.get(a.inputSource)
      b && b.dispatchEvent({ type: a.type })
    }
    function d() {
      m.forEach(function (a, b) {
        a.disconnect(b)
      })
      m.clear()
      c.setFramebuffer(null)
      c.setRenderTarget(c.getRenderTarget())
      B.stop()
      q.isPresenting = !1
      q.dispatchEvent({ type: 'sessionend' })
    }
    function e(a) {
      g = a
      B.setContext(t)
      B.start()
      q.isPresenting = !0
      q.dispatchEvent({ type: 'sessionstart' })
    }
    function h(a) {
      for (var b = t.inputSources, c = 0; c < J.length; c++) m.set(b[c], J[c])
      for (b = 0; b < a.removed.length; b++) {
        var c = a.removed[b],
          d = m.get(c)
        d &&
          (d.dispatchEvent({ type: 'disconnected', data: c }), m['delete'](c))
      }
      for (b = 0; b < a.added.length; b++)
        (c = a.added[b]),
          (d = m.get(c)) && d.dispatchEvent({ type: 'connected', data: c })
    }
    function l(a, b) {
      null === b
        ? a.matrixWorld.copy(a.matrix)
        : a.matrixWorld.multiplyMatrices(b.matrixWorld, a.matrix)
      a.matrixWorldInverse.getInverse(a.matrixWorld)
    }
    var q = this,
      t = null,
      f = 1,
      g = null,
      M = 'local-floor',
      k = null,
      J = [],
      m = new Map(),
      F = new la()
    F.layers.enable(1)
    F.viewport = new P()
    var n = new la()
    n.layers.enable(2)
    n.viewport = new P()
    var u = [F, n],
      r = new bf()
    r.layers.enable(1)
    r.layers.enable(2)
    var w = null,
      v = null
    this.isPresenting = this.enabled = !1
    this.getController = function (a) {
      var b = J[a]
      void 0 === b && ((b = new Vd()), (J[a] = b))
      return b.getTargetRaySpace()
    }
    this.getControllerGrip = function (a) {
      var b = J[a]
      void 0 === b && ((b = new Vd()), (J[a] = b))
      return b.getGripSpace()
    }
    this.getHand = function (a) {
      var b = J[a]
      void 0 === b && ((b = new Vd()), (J[a] = b))
      return b.getHandSpace()
    }
    this.setFramebufferScaleFactor = function (a) {
      f = a
      !0 === q.isPresenting &&
        console.warn(
          'THREE.WebXRManager: Cannot change framebuffer scale while presenting.'
        )
    }
    this.setReferenceSpaceType = function (a) {
      M = a
      !0 === q.isPresenting &&
        console.warn(
          'THREE.WebXRManager: Cannot change reference space type while presenting.'
        )
    }
    this.getReferenceSpace = function () {
      return g
    }
    this.getSession = function () {
      return t
    }
    this.setSession = function (c) {
      t = c
      null !== t &&
        (t.addEventListener('select', b),
        t.addEventListener('selectstart', b),
        t.addEventListener('selectend', b),
        t.addEventListener('squeeze', b),
        t.addEventListener('squeezestart', b),
        t.addEventListener('squeezeend', b),
        t.addEventListener('end', d),
        (c = a.getContextAttributes()),
        !0 !== c.xrCompatible && a.makeXRCompatible(),
        (c = new XRWebGLLayer(t, a, {
          antialias: c.antialias,
          alpha: c.alpha,
          depth: c.depth,
          stencil: c.stencil,
          framebufferScaleFactor: f,
        })),
        t.updateRenderState({ baseLayer: c }),
        t.requestReferenceSpace(M).then(e),
        t.addEventListener('inputsourceschange', h))
    }
    var z = new p(),
      y = new p()
    this.getCamera = function (a) {
      r.near = n.near = F.near = a.near
      r.far = n.far = F.far = a.far
      if (w !== r.near || v !== r.far)
        t.updateRenderState({ depthNear: r.near, depthFar: r.far }),
          (w = r.near),
          (v = r.far)
      var b = a.parent,
        c = r.cameras
      l(r, b)
      for (var d = 0; d < c.length; d++) l(c[d], b)
      a.matrixWorld.copy(r.matrixWorld)
      a = a.children
      b = 0
      for (d = a.length; b < d; b++) a[b].updateMatrixWorld(!0)
      if (2 === c.length) {
        z.setFromMatrixPosition(F.matrixWorld)
        y.setFromMatrixPosition(n.matrixWorld)
        var c = z.distanceTo(y),
          e = F.projectionMatrix.elements,
          h = n.projectionMatrix.elements,
          q = e[14] / (e[10] - 1)
        a = e[14] / (e[10] + 1)
        var b = (e[9] + 1) / e[5],
          d = (e[9] - 1) / e[5],
          f = (e[8] - 1) / e[0],
          A = (h[8] + 1) / h[0],
          h = q * f,
          e = q * A,
          A = c / (-f + A),
          f = A * -f
        F.matrixWorld.decompose(r.position, r.quaternion, r.scale)
        r.translateX(f)
        r.translateZ(A)
        r.matrixWorld.compose(r.position, r.quaternion, r.scale)
        r.matrixWorldInverse.getInverse(r.matrixWorld)
        q += A
        A = a + A
        r.projectionMatrix.makePerspective(
          h - f,
          e + (c - f),
          ((b * a) / A) * q,
          ((d * a) / A) * q,
          q,
          A
        )
      } else r.projectionMatrix.copy(F.projectionMatrix)
      return r
    }
    var x = null,
      B = new za()
    B.setAnimationLoop(function (a, b) {
      k = b.getViewerPose(g)
      if (null !== k) {
        var d = k.views,
          e = t.renderState.baseLayer
        c.setFramebuffer(e.framebuffer)
        var h = !1
        d.length !== r.cameras.length && ((r.cameras.length = 0), (h = !0))
        for (var l = 0; l < d.length; l++) {
          var q = d[l],
            f = e.getViewport(q),
            A = u[l]
          A.matrix.fromArray(q.transform.matrix)
          A.projectionMatrix.fromArray(q.projectionMatrix)
          A.viewport.set(f.x, f.y, f.width, f.height)
          0 === l && r.matrix.copy(A.matrix)
          !0 === h && r.cameras.push(A)
        }
      }
      d = t.inputSources
      for (e = 0; e < J.length; e++) J[e].update(d[e], b, g)
      x && x(a, b)
    })
    this.setAnimationLoop = function (a) {
      x = a
    }
    this.dispose = function () {}
  }
  function yk(c) {
    function a(a, b) {
      a.opacity.value = b.opacity
      b.color && a.diffuse.value.copy(b.color)
      b.emissive &&
        a.emissive.value.copy(b.emissive).multiplyScalar(b.emissiveIntensity)
      b.map && (a.map.value = b.map)
      b.alphaMap && (a.alphaMap.value = b.alphaMap)
      b.specularMap && (a.specularMap.value = b.specularMap)
      var d = c.get(b).envMap
      d &&
        ((a.envMap.value = d),
        (a.flipEnvMap.value = d.isCubeTexture ? -1 : 1),
        (a.reflectivity.value = b.reflectivity),
        (a.refractionRatio.value = b.refractionRatio),
        (d = c.get(d).__maxMipLevel),
        void 0 !== d && (a.maxMipLevel.value = d))
      b.lightMap &&
        ((a.lightMap.value = b.lightMap),
        (a.lightMapIntensity.value = b.lightMapIntensity))
      b.aoMap &&
        ((a.aoMap.value = b.aoMap), (a.aoMapIntensity.value = b.aoMapIntensity))
      var e
      b.map
        ? (e = b.map)
        : b.specularMap
        ? (e = b.specularMap)
        : b.displacementMap
        ? (e = b.displacementMap)
        : b.normalMap
        ? (e = b.normalMap)
        : b.bumpMap
        ? (e = b.bumpMap)
        : b.roughnessMap
        ? (e = b.roughnessMap)
        : b.metalnessMap
        ? (e = b.metalnessMap)
        : b.alphaMap
        ? (e = b.alphaMap)
        : b.emissiveMap
        ? (e = b.emissiveMap)
        : b.clearcoatMap
        ? (e = b.clearcoatMap)
        : b.clearcoatNormalMap
        ? (e = b.clearcoatNormalMap)
        : b.clearcoatRoughnessMap && (e = b.clearcoatRoughnessMap)
      void 0 !== e &&
        (e.isWebGLRenderTarget && (e = e.texture),
        !0 === e.matrixAutoUpdate && e.updateMatrix(),
        a.uvTransform.value.copy(e.matrix))
      var q
      b.aoMap ? (q = b.aoMap) : b.lightMap && (q = b.lightMap)
      void 0 !== q &&
        (q.isWebGLRenderTarget && (q = q.texture),
        !0 === q.matrixAutoUpdate && q.updateMatrix(),
        a.uv2Transform.value.copy(q.matrix))
    }
    function b(a, b) {
      a.roughness.value = b.roughness
      a.metalness.value = b.metalness
      b.roughnessMap && (a.roughnessMap.value = b.roughnessMap)
      b.metalnessMap && (a.metalnessMap.value = b.metalnessMap)
      b.emissiveMap && (a.emissiveMap.value = b.emissiveMap)
      b.bumpMap &&
        ((a.bumpMap.value = b.bumpMap),
        (a.bumpScale.value = b.bumpScale),
        1 === b.side && (a.bumpScale.value *= -1))
      b.normalMap &&
        ((a.normalMap.value = b.normalMap),
        a.normalScale.value.copy(b.normalScale),
        1 === b.side && a.normalScale.value.negate())
      b.displacementMap &&
        ((a.displacementMap.value = b.displacementMap),
        (a.displacementScale.value = b.displacementScale),
        (a.displacementBias.value = b.displacementBias))
      c.get(b).envMap && (a.envMapIntensity.value = b.envMapIntensity)
    }
    return {
      refreshFogUniforms: function (a, b) {
        a.fogColor.value.copy(b.color)
        b.isFog
          ? ((a.fogNear.value = b.near), (a.fogFar.value = b.far))
          : b.isFogExp2 && (a.fogDensity.value = b.density)
      },
      refreshMaterialUniforms: function (c, e, h, l) {
        if (e.isnaBasicMaterial) a(c, e)
        else if (e.isq7)
          a(c, e), e.emissiveMap && (c.emissiveMap.value = e.emissiveMap)
        else if (e.isnaToonMaterial)
          a(c, e),
            e.gradientMap && (c.gradientMap.value = e.gradientMap),
            e.emissiveMap && (c.emissiveMap.value = e.emissiveMap),
            e.bumpMap &&
              ((c.bumpMap.value = e.bumpMap),
              (c.bumpScale.value = e.bumpScale),
              1 === e.side && (c.bumpScale.value *= -1)),
            e.normalMap &&
              ((c.normalMap.value = e.normalMap),
              c.normalScale.value.copy(e.normalScale),
              1 === e.side && c.normalScale.value.negate()),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias))
        else if (e.isnaPhongMaterial)
          a(c, e),
            c.specular.value.copy(e.specular),
            (c.shininess.value = Math.max(e.shininess, 1e-4)),
            e.emissiveMap && (c.emissiveMap.value = e.emissiveMap),
            e.bumpMap &&
              ((c.bumpMap.value = e.bumpMap),
              (c.bumpScale.value = e.bumpScale),
              1 === e.side && (c.bumpScale.value *= -1)),
            e.normalMap &&
              ((c.normalMap.value = e.normalMap),
              c.normalScale.value.copy(e.normalScale),
              1 === e.side && c.normalScale.value.negate()),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias))
        else if (e.isnaStandardMaterial)
          a(c, e),
            e.isnaPhysicalMaterial
              ? (b(c, e),
                (c.reflectivity.value = e.reflectivity),
                (c.clearcoat.value = e.clearcoat),
                (c.clearcoatRoughness.value = e.clearcoatRoughness),
                e.sheen && c.sheen.value.copy(e.sheen),
                e.clearcoatMap && (c.clearcoatMap.value = e.clearcoatMap),
                e.clearcoatRoughnessMap &&
                  (c.clearcoatRoughnessMap.value = e.clearcoatRoughnessMap),
                e.clearcoatNormalMap &&
                  (c.clearcoatNormalScale.value.copy(e.clearcoatNormalScale),
                  (c.clearcoatNormalMap.value = e.clearcoatNormalMap),
                  1 === e.side && c.clearcoatNormalScale.value.negate()),
                (c.transmission.value = e.transmission),
                e.transmissionMap &&
                  (c.transmissionMap.value = e.transmissionMap))
              : b(c, e)
        else if (e.isnaMatcapMaterial)
          a(c, e),
            e.matcap && (c.matcap.value = e.matcap),
            e.bumpMap &&
              ((c.bumpMap.value = e.bumpMap),
              (c.bumpScale.value = e.bumpScale),
              1 === e.side && (c.bumpScale.value *= -1)),
            e.normalMap &&
              ((c.normalMap.value = e.normalMap),
              c.normalScale.value.copy(e.normalScale),
              1 === e.side && c.normalScale.value.negate()),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias))
        else if (e.isnaDepthMaterial)
          a(c, e),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias))
        else if (e.isnaDistanceMaterial)
          a(c, e),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias)),
            c.referencePosition.value.copy(e.referencePosition),
            (c.nearDistance.value = e.nearDistance),
            (c.farDistance.value = e.farDistance)
        else if (e.isnaNormalMaterial)
          a(c, e),
            e.bumpMap &&
              ((c.bumpMap.value = e.bumpMap),
              (c.bumpScale.value = e.bumpScale),
              1 === e.side && (c.bumpScale.value *= -1)),
            e.normalMap &&
              ((c.normalMap.value = e.normalMap),
              c.normalScale.value.copy(e.normalScale),
              1 === e.side && c.normalScale.value.negate()),
            e.displacementMap &&
              ((c.displacementMap.value = e.displacementMap),
              (c.displacementScale.value = e.displacementScale),
              (c.displacementBias.value = e.displacementBias))
        else if (e.isb3)
          c.diffuse.value.copy(e.color),
            (c.opacity.value = e.opacity),
            e.isLineDashedMaterial &&
              ((c.dashSize.value = e.dashSize),
              (c.totalSize.value = e.dashSize + e.gapSize),
              (c.scale.value = e.scale))
        else if (e.isPointsMaterial) {
          c.diffuse.value.copy(e.color)
          c.opacity.value = e.opacity
          c.size.value = e.size * h
          c.scale.value = 0.5 * l
          e.map && (c.map.value = e.map)
          e.alphaMap && (c.alphaMap.value = e.alphaMap)
          var d
          e.map ? (d = e.map) : e.alphaMap && (d = e.alphaMap)
          void 0 !== d &&
            (!0 === d.matrixAutoUpdate && d.updateMatrix(),
            c.uvTransform.value.copy(d.matrix))
        } else if (e.isSpriteMaterial) {
          c.diffuse.value.copy(e.color)
          c.opacity.value = e.opacity
          c.rotation.value = e.rotation
          e.map && (c.map.value = e.map)
          e.alphaMap && (c.alphaMap.value = e.alphaMap)
          var t
          e.map ? (t = e.map) : e.alphaMap && (t = e.alphaMap)
          void 0 !== t &&
            (!0 === t.matrixAutoUpdate && t.updateMatrix(),
            c.uvTransform.value.copy(t.matrix))
        } else
          e.isShadowMaterial
            ? (c.color.value.copy(e.color), (c.opacity.value = e.opacity))
            : e.isShaderMaterial && (e.uniformsNeedUpdate = !1)
      },
    }
  }
  function Wd(c) {
    function a(a, b) {
      for (var c = 0; c < a.length; c++) {
        var d = F.getContext(a[c], b)
        if (null !== d) return d
      }
      return null
    }
    function b() {
      Ca = new lj(W)
      Ra = new ij(W, Ca, c)
      !1 === Ra.isWebGL2 &&
        (Ca.get('WEBGL_depth_texture'),
        Ca.get('OES_texture_float'),
        Ca.get('OES_texture_half_float'),
        Ca.get('OES_texture_half_float_linear'),
        Ca.get('OES_standard_derivatives'),
        Ca.get('OES_element_index_uint'),
        Ca.get('OES_vertex_array_object'),
        Ca.get('ANGLE_instanced_arrays'))
      Ca.get('OES_texture_float_linear')
      va = new Rh(W, Ca, Ra)
      Da = new wk(W, Ca, Ra)
      Da.scissor(Z.copy(ja).multiplyScalar(U).floor())
      Da.viewport(S.copy(fa).multiplyScalar(U).floor())
      la = new oj(W)
      da = new lk()
      ga = new xk(W, Ca, Da, da, Ra, va, la)
      wa = new kj(G)
      Ja = new ej(W, Ra)
      ua = new gj(W, Ca, Ja, Ra)
      Lb = new mj(W, Ja, la, ua)
      ra = new sj(W, Lb, Ja, la)
      Aa = new rj(W)
      ma = new jj(da)
      pa = new kk(G, wa, Ca, Ra, ua, ma)
      ya = new yk(da)
      xa = new pk(da)
      ta = new vk()
      qa = new fj(G, wa, Da, ra, z)
      Ba = new hj(W, Ca, la, Ra)
      Ea = new nj(W, Ca, la, Ra)
      la.programs = pa.programs
      G.capabilities = Ra
      G.extensions = Ca
      G.properties = da
      G.renderLists = xa
      G.state = Da
      G.info = la
    }
    function d(a) {
      a.preventDefault()
      console.log('THREE.q5: Context Lost.')
      H = !0
    }
    function e() {
      console.log('THREE.q5: Context Restored.')
      H = !1
      b()
    }
    function h(a) {
      a = a.target
      a.removeEventListener('dispose', h)
      l(a)
      da.remove(a)
    }
    function l(a) {
      a = da.get(a).program
      void 0 !== a && pa.releaseProgram(a)
    }
    function q(a, b) {
      a.render(function (a) {
        G.renderBufferImmediate(a, b)
      })
    }
    function t(a, b, c, d) {
      if (!1 !== a.visible) {
        if (a.layers.test(b.layers))
          if (a.isGroup) c = a.renderOrder
          else if (a.isLOD) !0 === a.autoUpdate && a.update(b)
          else if (a.isLight) L.pushLight(a), a.castShadow && L.pushShadow(a)
          else if (a.isSprite) {
            if (!a.frustumCulled || na.intersectsSprite(a)) {
              d && ec.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ud)
              var e = ra.update(a),
                h = a.material
              h.visible && E.push(a, e, h, c, ec.z, null)
            }
          } else if (a.isImmediateRenderObject)
            d && ec.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ud),
              E.push(a, null, a.material, c, ec.z, null)
          else if (a.isna || a.isLine || a.isPoints)
            if (
              (a.isSkinnedna &&
                a.skeleton.frame !== la.render.frame &&
                (a.skeleton.update(), (a.skeleton.frame = la.render.frame)),
              !a.frustumCulled || na.intersectsObject(a))
            )
              if (
                (d && ec.setFromMatrixPosition(a.matrixWorld).applyMatrix4(Ud),
                (e = ra.update(a)),
                (h = a.material),
                Array.isArray(h))
              )
                for (var l = e.groups, q = 0, f = l.length; q < f; q++) {
                  var A = l[q],
                    g = h[A.materialIndex]
                  g && g.visible && E.push(a, e, g, c, ec.z, A)
                }
              else h.visible && E.push(a, e, h, c, ec.z, null)
        a = a.children
        e = 0
        for (h = a.length; e < h; e++) t(a[e], b, c, d)
      }
    }
    function f(a, b, c, d, e, h, l) {
      setTimeout(function () {
        if (!c.funcrm || !c.funcrm(l)) {
          for (
            var q = [], t = Math.min(e * (h + 1), a.length), f = e * h;
            f < t;
            f++
          )
            q.push(a[f])
          b(q, c, d)
        }
      }, 1)
      e * (h + 1) < a.length && f(a, b, c, d, e, h + 1, l)
    }
    function g(a, b, c) {
      if (b.funcrm && b.crm) {
        for (var d = [], e = Math.min(8e3, a.length), h = 0; h < e; h++)
          d.push(a[h])
        M(d, b, c)
        8e3 < a.length && f(a, M, b, c, 8e3, 1, b.crm)
      } else M(a, b, c)
    }
    function M(a, b, c) {
      for (
        var d = !0 === b.isss ? b.overrideMaterial : null, e = 0, h = a.length;
        e < h;
        e++
      ) {
        var l = a[e],
          q = l.object,
          t = l.geometry,
          f = null === d ? l.material : d,
          l = l.group
        if (c.isArrayCamera) {
          T = c
          for (var A = c.cameras, g = 0, K = A.length; g < K; g++) {
            var M = A[g]
            q.layers.test(M.layers) &&
              (Da.viewport(S.copy(M.viewport)),
              L.setupLights(M),
              k(q, b, M, t, f, l))
          }
        } else (T = null), k(q, b, c, t, f, l)
      }
    }
    function k(a, b, c, d, e, h) {
      a.onBeforeRender(G, b, c, d, e, h)
      L = ta.get(b, T || c)
      a.modelViewMatrix.multiplyMatrices(c.matrixWorldInverse, a.matrixWorld)
      a.normalMatrix.getNormalMatrix(a.modelViewMatrix)
      if (a.isImmediateRenderObject) {
        var l = m(c, b, e, a)
        Da.setMaterial(e)
        ua.reset()
        q(a, l)
      } else G.renderBufferDirect(c, b, d, e, a, h)
      a.onAfterRender(G, b, c, d, e, h)
      L = ta.get(b, T || c)
    }
    function J(a, b, c) {
      !0 !== b.isss && (b = oa)
      var d = da.get(a),
        e = L.state.lights,
        q = e.state.version
      c = pa.getParameters(a, e.state, L.state.shadowsArray, b, c)
      var t = pa.getProgramCacheKey(c),
        f = d.program,
        A = !0
      if (void 0 === f) a.addEventListener('dispose', h)
      else if (f.cacheKey !== t) l(a)
      else {
        if (d.lightsStateVersion === q && void 0 !== c.shaderID) {
          b = a.isnaStandardMaterial ? b.environment : null
          d.envMap = wa.get(a.envMap || b)
          return
        }
        A = !1
      }
      A &&
        ((c.uniforms = pa.getUniforms(a)),
        a.onBeforeCompile(c, G),
        (f = pa.acquireProgram(c, t)),
        (d.program = f),
        (d.uniforms = c.uniforms),
        (d.outputEncoding = c.outputEncoding))
      c = d.uniforms
      if ((!a.isShaderMaterial && !a.isRawShaderMaterial) || !0 === a.clipping)
        (d.numClippingpls = ma.numpls),
          (d.numIntersection = ma.numIntersection),
          (c.clippingpls = ma.uniform)
      d.environment = a.isnaStandardMaterial ? b.environment : null
      d.fog = b.fog
      d.envMap = wa.get(a.envMap || d.environment)
      d.needsLights =
        a.isq7 ||
        a.isnaToonMaterial ||
        a.isnaPhongMaterial ||
        a.isnaStandardMaterial ||
        a.isShadowMaterial ||
        (a.isShaderMaterial && !0 === a.lights)
      d.lightsStateVersion = q
      d.needsLights &&
        ((c.ambientLightColor.value = e.state.ambient),
        (c.lightProbe.value = e.state.probe),
        (c.directionalLights.value = e.state.directional),
        (c.directionalLightShadows.value = e.state.directionalShadow),
        (c.spotLights.value = e.state.spot),
        (c.spotLightShadows.value = e.state.spotShadow),
        (c.rectAreaLights.value = e.state.rectArea),
        (c.ltc_1.value = e.state.rectAreaLTC1),
        (c.ltc_2.value = e.state.rectAreaLTC2),
        (c.pointLights.value = e.state.point),
        (c.pointLightShadows.value = e.state.pointShadow),
        (c.hemisphereLights.value = e.state.hemi),
        (c.directionalShadowMap.value = e.state.directionalShadowMap),
        (c.directionalShadowMatrix.value = e.state.directionalShadowMatrix),
        (c.spotShadowMap.value = e.state.spotShadowMap),
        (c.spotShadowMatrix.value = e.state.spotShadowMatrix),
        (c.pointShadowMap.value = e.state.pointShadowMap),
        (c.pointShadowMatrix.value = e.state.pointShadowMatrix))
      a = d.program.getUniforms()
      a = ac.seqWithValue(a.seq, c)
      d.uniformsList = a
    }
    function m(a, b, c, d) {
      !0 !== b.isss && (b = oa)
      ga.resetTextureUnits()
      var e = b.fog,
        h = c.isnaStandardMaterial ? b.environment : null,
        l = null === R ? G.outputEncoding : R.texture.encoding,
        q = wa.get(c.envMap || h),
        t = da.get(c),
        f = L.state.lights
      !0 === af &&
        ((!0 !== rg && a === V) || ma.setState(c, a, a === V && c.id === Y))
      c.version === t.__version
        ? c.fog && t.fog !== e
          ? J(c, b, d)
          : t.environment !== h
          ? J(c, b, d)
          : t.needsLights && t.lightsStateVersion !== f.state.version
          ? J(c, b, d)
          : void 0 === t.numClippingpls ||
            (t.numClippingpls === ma.numpls &&
              t.numIntersection === ma.numIntersection)
          ? t.outputEncoding !== l
            ? J(c, b, d)
            : t.envMap !== q && J(c, b, d)
          : J(c, b, d)
        : (J(c, b, d), (t.__version = c.version))
      var A = !1,
        f = (q = !1)
      b = t.program
      h = b.getUniforms()
      l = t.uniforms
      Da.useProgram(b.program) && (f = q = A = !0)
      c.id !== Y && ((Y = c.id), (q = !0))
      if (A || V !== a) {
        h.setValue(W, 'projectionMatrix', a.projectionMatrix)
        Ra.logarithmicDepthBuffer &&
          h.setValue(W, 'logDepthBufFC', 2 / (Math.log(a.far + 1) / Math.LN2))
        V !== a && ((V = a), (f = q = !0))
        if (
          c.isShaderMaterial ||
          c.isnaPhongMaterial ||
          c.isnaToonMaterial ||
          c.isnaStandardMaterial ||
          c.envMap
        )
          (A = h.map.cameraPosition),
            void 0 !== A &&
              A.setValue(W, ec.setFromMatrixPosition(a.matrixWorld))
        ;(c.isnaPhongMaterial ||
          c.isnaToonMaterial ||
          c.isq7 ||
          c.isnaBasicMaterial ||
          c.isnaStandardMaterial ||
          c.isShaderMaterial) &&
          h.setValue(W, 'isOrthographic', !0 === a.isOrthographicCamera)
        ;(c.isnaPhongMaterial ||
          c.isnaToonMaterial ||
          c.isq7 ||
          c.isnaBasicMaterial ||
          c.isnaStandardMaterial ||
          c.isShaderMaterial ||
          c.isShadowMaterial ||
          c.skinning) &&
          h.setValue(W, 'viewMatrix', a.matrixWorldInverse)
      }
      if (
        c.skinning &&
        (h.setOptional(W, d, 'bindMatrix'),
        h.setOptional(W, d, 'bindMatrixInverse'),
        (a = d.skeleton))
      )
        if (((A = a.bones), Ra.floatVertexTextures)) {
          if (void 0 === a.boneTexture) {
            var A = Math.sqrt(4 * A.length),
              A = ea.ceilPowerOfTwo(A),
              A = Math.max(A, 4),
              g = new Float32Array(A * A * 4)
            g.set(a.boneMatrices)
            var K = new Za(g, A, A, 1023, 1015)
            a.boneMatrices = g
            a.boneTexture = K
            a.boneTextureSize = A
          }
          h.setValue(W, 'boneTexture', a.boneTexture, ga)
          h.setValue(W, 'boneTextureSize', a.boneTextureSize)
        } else h.setOptional(W, a, 'boneMatrices')
      if (q || t.receiveShadow !== d.receiveShadow)
        (t.receiveShadow = d.receiveShadow),
          h.setValue(W, 'receiveShadow', d.receiveShadow)
      q &&
        (h.setValue(W, 'toneMappingExposure', G.toneMappingExposure),
        t.needsLights &&
          ((a = f),
          (l.ambientLightColor.needsUpdate = a),
          (l.lightProbe.needsUpdate = a),
          (l.directionalLights.needsUpdate = a),
          (l.directionalLightShadows.needsUpdate = a),
          (l.pointLights.needsUpdate = a),
          (l.pointLightShadows.needsUpdate = a),
          (l.spotLights.needsUpdate = a),
          (l.spotLightShadows.needsUpdate = a),
          (l.rectAreaLights.needsUpdate = a),
          (l.hemisphereLights.needsUpdate = a)),
        e && c.fog && ya.refreshFogUniforms(l, e),
        ya.refreshMaterialUniforms(l, c, U, ba),
        ac.upload(W, t.uniformsList, l, ga))
      c.isShaderMaterial &&
        !0 === c.uniformsNeedUpdate &&
        (ac.upload(W, t.uniformsList, l, ga), (c.uniformsNeedUpdate = !1))
      c.isSpriteMaterial && h.setValue(W, 'center', d.center)
      h.setValue(W, 'modelViewMatrix', d.modelViewMatrix)
      h.setValue(W, 'normalMatrix', d.normalMatrix)
      h.setValue(W, 'modelMatrix', d.matrixWorld)
      return b
    }
    c = c || {}
    var F =
        void 0 !== c.canvas
          ? c.canvas
          : document.createElementNS('http://www.w3.org/1999/xhtml', 'canvas'),
      n = void 0 !== c.context ? c.context : null,
      r = void 0 !== c.alpha ? c.alpha : !1,
      u = void 0 !== c.depth ? c.depth : !0,
      w = void 0 !== c.stencil ? c.stencil : !0,
      v = void 0 !== c.antialias ? c.antialias : !1,
      z = void 0 !== c.premultipliedAlpha ? c.premultipliedAlpha : !0,
      x = void 0 !== c.preserveDrawingBuffer ? c.preserveDrawingBuffer : !1,
      y = void 0 !== c.powerPreference ? c.powerPreference : 'default',
      C =
        void 0 !== c.failIfMajorPerformanceCaveat
          ? c.failIfMajorPerformanceCaveat
          : !1,
      E = null,
      L = null
    this.domElement = F
    this.debug = { checkShaderErrors: !0 }
    this.sortObjects = this.autoClearStencil = this.autoClearDepth = this.autoClearColor = this.autoClear = !0
    this.clippingpls = []
    this.localClippingEnabled = !1
    this.gammaFactor = 2
    this.outputEncoding = 3e3
    this.physicallyCorrectLights = !1
    this.toneMapping = 0
    this.toneMappingExposure = 1
    this.maxMorphTargets = 8
    this.maxMorphNormals = 4
    var G = this,
      H = !1,
      Q = null,
      I = 0,
      N = 0,
      R = null,
      X = null,
      Y = -1,
      V = null,
      T = null,
      S = new P(),
      Z = new P(),
      ca = null,
      gb = F.width,
      ba = F.height,
      U = 1,
      ia = null,
      ha = null,
      fa = new P(0, 0, gb, ba),
      ja = new P(0, 0, gb, ba),
      sa = !1,
      na = new $a(),
      af = !1,
      rg = !1,
      Ud = new O(),
      ec = new p(),
      oa = {
        background: null,
        fog: null,
        environment: null,
        overrideMaterial: null,
        isss: !0,
      },
      W = n
    try {
      n = {
        alpha: r,
        depth: u,
        stencil: w,
        antialias: v,
        premultipliedAlpha: z,
        preserveDrawingBuffer: x,
        powerPreference: y,
        failIfMajorPerformanceCaveat: C,
      }
      F.addEventListener('webglcontextlost', d, !1)
      F.addEventListener('webglcontextrestored', e, !1)
      if (
        null === W &&
        ((r = ['webgl2', 'webgl', 'experimental-webgl']),
        !0 === G.isWebGL1Renderer && r.shift(),
        (W = a(r, n)),
        null === W)
      ) {
        if (a(r))
          throw Error(
            'Error creating WebGL context with your selected attributes.'
          )
        throw Error('Error creating WebGL context.')
      }
      void 0 === W.getShaderPrecisionFormat &&
        (W.getShaderPrecisionFormat = function () {
          return { rangeMin: 1, rangeMax: 1, precision: 1 }
        })
    } catch (Th) {
      throw (console.error('THREE.q5: ' + Th.message), Th)
    }
    var Ca,
      Ra,
      Da,
      la,
      da,
      ga,
      wa,
      Ja,
      Lb,
      ra,
      pa,
      ya,
      xa,
      ta,
      ma,
      qa,
      Aa,
      Ba,
      Ea,
      va,
      ua
    b()
    var Qa = new Sh(G, W)
    this.xr = Qa
    var Ia = new Qh(G, ra, Ra.maxTextureSize)
    this.shadowMap = Ia
    this.getContext = function () {
      return W
    }
    this.getContextAttributes = function () {
      return W.getContextAttributes()
    }
    this.forceContextLoss = function () {
      var a = Ca.get('WEBGL_lose_context')
      a && a.loseContext()
    }
    this.forceContextRestore = function () {
      var a = Ca.get('WEBGL_lose_context')
      a && a.restoreContext()
    }
    this.getPixelRatio = function () {
      return U
    }
    this.setPixelRatio = function (a) {
      void 0 !== a && ((U = a), this.setSize(gb, ba, !1))
    }
    this.getSize = function (a) {
      void 0 === a &&
        (console.warn('q5: .getsize() now requires a vt2 as an argument'),
        (a = new B()))
      return a.set(gb, ba)
    }
    this.setSize = function (a, b, c) {
      Qa.isPresenting
        ? console.warn(
            "THREE.q5: Can't change size while VR device is presenting."
          )
        : ((gb = a),
          (ba = b),
          (F.width = Math.floor(a * U)),
          (F.height = Math.floor(b * U)),
          !1 !== c && ((F.style.width = a + 'px'), (F.style.height = b + 'px')),
          this.setViewport(0, 0, a, b))
    }
    this.getDrawingBufferSize = function (a) {
      void 0 === a &&
        (console.warn(
          'q5: .getdrawingBufferSize() now requires a vt2 as an argument'
        ),
        (a = new B()))
      return a.set(gb * U, ba * U).floor()
    }
    this.setDrawingBufferSize = function (a, b, c) {
      gb = a
      ba = b
      U = c
      F.width = Math.floor(a * c)
      F.height = Math.floor(b * c)
      this.setViewport(0, 0, a, b)
    }
    this.getCurrentViewport = function (a) {
      void 0 === a &&
        (console.warn(
          'q5: .getCurrentViewport() now requires a Vector4 as an argument'
        ),
        (a = new P()))
      return a.copy(S)
    }
    this.getViewport = function (a) {
      return a.copy(fa)
    }
    this.setViewport = function (a, b, c, d) {
      a.isVector4 ? fa.set(a.x, a.y, a.z, a.w) : fa.set(a, b, c, d)
      Da.viewport(S.copy(fa).multiplyScalar(U).floor())
    }
    this.getScissor = function (a) {
      return a.copy(ja)
    }
    this.setScissor = function (a, b, c, d) {
      a.isVector4 ? ja.set(a.x, a.y, a.z, a.w) : ja.set(a, b, c, d)
      Da.scissor(Z.copy(ja).multiplyScalar(U).floor())
    }
    this.getScissorTest = function () {
      return sa
    }
    this.setScissorTest = function (a) {
      Da.setScissorTest((sa = a))
    }
    this.setOpaqueSort = function (a) {
      ia = a
    }
    this.setTransparentSort = function (a) {
      ha = a
    }
    this.getClearColor = function () {
      return qa.getClearColor()
    }
    this.setClearColor = function () {
      qa.setClearColor.apply(qa, arguments)
    }
    this.getClearAlpha = function () {
      return qa.getClearAlpha()
    }
    this.setClearAlpha = function () {
      qa.setClearAlpha.apply(qa, arguments)
    }
    this.clear = function (a, b, c) {
      var d = 0
      if (void 0 === a || a) d |= 16384
      if (void 0 === b || b) d |= 256
      if (void 0 === c || c) d |= 1024
      W.clear(d)
    }
    this.clearColor = function () {
      this.clear(!0, !1, !1)
    }
    this.clearDepth = function () {
      this.clear(!1, !0, !1)
    }
    this.clearStencil = function () {
      this.clear(!1, !1, !0)
    }
    this.dispose = function () {
      F.removeEventListener('webglcontextlost', d, !1)
      F.removeEventListener('webglcontextrestored', e, !1)
      xa.dispose()
      ta.dispose()
      da.dispose()
      wa.dispose()
      ra.dispose()
      ua.dispose()
      Qa.dispose()
      Fa.stop()
    }
    this.renderBufferImmediate = function (a, b) {
      ua.initAttributes()
      var c = da.get(a)
      a.hasPositions && !c.position && (c.position = W.createBuffer())
      a.hasNormals && !c.normal && (c.normal = W.createBuffer())
      a.hasUvs && !c.uv && (c.uv = W.createBuffer())
      a.hasColors && !c.color && (c.color = W.createBuffer())
      var d = b.getAttributes()
      a.hasPositions &&
        (W.bindBuffer(34962, c.position),
        W.bufferData(34962, a.positionArray, 35048),
        ua.enableAttribute(d.position),
        W.vertexAttribPointer(d.position, 3, 5126, !1, 0, 0))
      a.hasNormals &&
        (W.bindBuffer(34962, c.normal),
        W.bufferData(34962, a.normalArray, 35048),
        ua.enableAttribute(d.normal),
        W.vertexAttribPointer(d.normal, 3, 5126, !1, 0, 0))
      a.hasUvs &&
        (W.bindBuffer(34962, c.uv),
        W.bufferData(34962, a.uvArray, 35048),
        ua.enableAttribute(d.uv),
        W.vertexAttribPointer(d.uv, 2, 5126, !1, 0, 0))
      a.hasColors &&
        (W.bindBuffer(34962, c.color),
        W.bufferData(34962, a.colorArray, 35048),
        ua.enableAttribute(d.color),
        W.vertexAttribPointer(d.color, 3, 5126, !1, 0, 0))
      ua.disableUnusedAttributes()
      W.drawArrays(4, 0, a.count)
      a.count = 0
    }
    this.renderBufferDirect = function (a, b, c, d, e, h) {
      null === b && (b = oa)
      var l = e.isna && 0 > e.matrixWorld.determinant()
      a = m(a, b, d, e)
      Da.setMaterial(d, l)
      l = c.index
      b = c.attributes.position
      if (null === l) {
        if (void 0 === b || 0 === b.count) return
      } else if (0 === l.count) return
      var q = 1
      !0 === d.wireframe && ((l = Lb.getWireframeAttribute(c)), (q = 2))
      ;(d.morphTargets || d.morphNormals) && Aa.update(e, c, d, a)
      ua.setup(e, d, a, c, l)
      var t
      a = Ba
      null !== l && ((t = Ja.get(l)), (a = Ea), a.setIndex(t))
      var f = c.drawRange.start * q,
        A = null !== h ? h.start * q : 0
      t = Math.max(f, A)
      h = Math.max(
        0,
        Math.min(
          null !== l ? l.count : b.count,
          f + c.drawRange.count * q,
          A + (null !== h ? h.count * q : Infinity)
        ) -
          1 -
          t +
          1
      )
      0 !== h &&
        (e.isna
          ? !0 === d.wireframe
            ? (Da.setLineWidth(d.wireframeLinewidth * (null === R ? U : 1)),
              a.setMode(1))
            : a.setMode(4)
          : e.isLine
          ? ((d = d.linewidth),
            void 0 === d && (d = 1),
            Da.setLineWidth(d * (null === R ? U : 1)),
            e.isb2 ? a.setMode(1) : e.isLineLoop ? a.setMode(2) : a.setMode(3))
          : e.isPoints
          ? a.setMode(0)
          : e.isSprite && a.setMode(4),
        e.isInstancedna
          ? a.renderInstances(t, h, e.count)
          : c.isInstanced_0x2
          ? a.renderInstances(
              t,
              h,
              Math.min(c.instanceCount, c._maxInstanceCount)
            )
          : a.render(t, h))
    }
    this.compile = function (a, b) {
      L = ta.get(a, b)
      L.init()
      a.traverse(function (a) {
        a.isLight && (L.pushLight(a), a.castShadow && L.pushShadow(a))
      })
      L.setupLights(b)
      var c = new WeakMap()
      a.traverse(function (b) {
        var d = b.material
        if (d)
          if (Array.isArray(d))
            for (var e = 0; e < d.length; e++) {
              var h = d[e]
              !1 === c.has(h) && (J(h, a, b), c.set(h))
            }
          else !1 === c.has(d) && (J(d, a, b), c.set(d))
      })
    }
    var Ha = null,
      Fa = new za()
    Fa.setAnimationLoop(function (a) {
      Qa.isPresenting || (Ha && Ha(a))
    })
    'undefined' !== typeof window && Fa.setContext(window)
    this.setAnimationLoop = function (a) {
      Ha = a
      Qa.setAnimationLoop(a)
      null === a ? Fa.stop() : Fa.start()
    }
    this.render = function (a, b, c, d) {
      var e, h
      void 0 !== c &&
        (console.warn(
          'THREE.q5.render(): the renderTarget argument has been removed. Use .setRenderTarget() instead.'
        ),
        (e = c))
      void 0 !== d &&
        (console.warn(
          'THREE.q5.render(): the forceClear argument has been removed. Use .clear() instead.'
        ),
        (h = d))
      if (void 0 !== b && !0 !== b.isCamera)
        console.error(
          'THREE.q5.render: camera is not an instance of THREE.Camera.'
        )
      else if (!0 !== H) {
        ua.resetDefaultState()
        Y = -1
        V = null
        !0 === a.autoUpdate && a.updateMatrixWorld()
        null === b.parent && b.updateMatrixWorld()
        !0 === Qa.enabled && !0 === Qa.isPresenting && (b = Qa.getCamera(b))
        if (!0 === a.isss) a.onBeforeRender(G, a, b, e || R)
        L = ta.get(a, b)
        L.init()
        Ud.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse)
        na.setFromProjectionMatrix(Ud)
        rg = this.localClippingEnabled
        af = ma.init(this.clippingpls, rg, b)
        E = xa.get(a, b)
        E.init()
        t(a, b, 0, G.sortObjects)
        E.finish()
        !0 === G.sortObjects && ((ha = ok), E.sort(ia, ha))
        !0 === af && ma.beginShadows()
        Ia.render(L.state.shadowsArray, a, b)
        L.setupLights(b)
        !0 === af && ma.endShadows()
        !0 === this.info.autoReset && this.info.reset()
        void 0 !== e && this.setRenderTarget(e)
        qa.render(E, a, b, h)
        c = E.opaque
        d = E.transparent
        if (!a.funcrm || !a.funcrm(a.crm)) {
          0 < c.length && g(c, a, b)
          0 < d.length && g(d, a, b)
          if (!0 === a.isss) a.onAfterRender(G, a, b)
          null !== R &&
            (ga.updateRenderTargetMipmap(R),
            ga.updateMultisampleRenderTarget(R))
          Da.buffers.depth.setTest(!0)
          Da.buffers.depth.setMask(!0)
          Da.buffers.color.setMask(!0)
          Da.setPolygonOffset(!1)
          L = E = null
        }
      }
    }
    this.setFramebuffer = function (a) {
      Q !== a && null === R && W.bindFramebuffer(36160, a)
      Q = a
    }
    this.getActiveCubeFace = function () {
      return I
    }
    this.getActiveMipmapLevel = function () {
      return N
    }
    this.getRenderList = function () {
      return E
    }
    this.setRenderList = function (a) {
      E = a
    }
    this.getRenderState = function () {
      return L
    }
    this.setRenderState = function (a) {
      L = a
    }
    this.getRenderTarget = function () {
      return R
    }
    this.setRenderTarget = function (a, b, c) {
      void 0 === b && (b = 0)
      void 0 === c && (c = 0)
      R = a
      I = b
      N = c
      a && void 0 === da.get(a).__webglFramebuffer && ga.setupRenderTarget(a)
      var d = Q,
        e = !1
      a
        ? ((d = da.get(a).__webglFramebuffer),
          a.isWebGLCubeRenderTarget
            ? ((d = d[b]), (e = !0))
            : (d = a.isWebGLMultisampleRenderTarget
                ? da.get(a).__webglMultisampledFramebuffer
                : d),
          S.copy(a.viewport),
          Z.copy(a.scissor),
          (ca = a.scissorTest))
        : (S.copy(fa).multiplyScalar(U).floor(),
          Z.copy(ja).multiplyScalar(U).floor(),
          (ca = sa))
      X !== d && (W.bindFramebuffer(36160, d), (X = d))
      Da.viewport(S)
      Da.scissor(Z)
      Da.setScissorTest(ca)
      e &&
        ((a = da.get(a.texture)),
        W.framebufferTexture2D(36160, 36064, 34069 + b, a.__webglTexture, c))
    }
    this.readRenderTargetPixels = function (a, b, c, d, e, h, l) {
      if (a && a.isWebGLRenderTarget) {
        var q = da.get(a).__webglFramebuffer
        a.isWebGLCubeRenderTarget && void 0 !== l && (q = q[l])
        if (q) {
          l = !1
          q !== X && (W.bindFramebuffer(36160, q), (l = !0))
          try {
            var t = a.texture,
              f = t.format,
              A = t.type
            1023 !== f && va.convert(f) !== W.getParameter(35739)
              ? console.error(
                  'THREE.q5.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.'
                )
              : 1009 === A ||
                va.convert(A) === W.getParameter(35738) ||
                (1015 === A &&
                  (Ra.isWebGL2 ||
                    Ca.get('OES_texture_float') ||
                    Ca.get('WEBGL_color_buffer_float'))) ||
                (1016 === A &&
                  (Ra.isWebGL2
                    ? Ca.get('EXT_color_buffer_float')
                    : Ca.get('EXT_color_buffer_half_float')))
              ? 36053 === W.checkFramebufferStatus(36160)
                ? 0 <= b &&
                  b <= a.width - d &&
                  0 <= c &&
                  c <= a.height - e &&
                  W.readPixels(b, c, d, e, va.convert(f), va.convert(A), h)
                : console.error(
                    'THREE.q5.readRenderTargetPixels: readPixels from renderTarget failed. Framebuffer not complete.'
                  )
              : console.error(
                  'THREE.q5.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.'
                )
          } finally {
            l && W.bindFramebuffer(36160, X)
          }
        }
      } else
        console.error(
          'THREE.q5.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.'
        )
    }
    this.copyFramebufferToTexture = function (a, b, c) {
      void 0 === c && (c = 0)
      var d = Math.pow(2, -c),
        e = Math.floor(b.image.width * d),
        d = Math.floor(b.image.height * d),
        h = va.convert(b.format)
      ga.setTexture2D(b, 0)
      W.copyTexImage2D(3553, c, h, a.x, a.y, e, d, 0)
      Da.unbindTexture()
    }
    this.copyTextureToTexture = function (a, b, c, d) {
      void 0 === d && (d = 0)
      var e = b.image.width,
        h = b.image.height,
        l = va.convert(c.format),
        q = va.convert(c.type)
      ga.setTexture2D(c, 0)
      W.pixelStorei(37440, c.flipY)
      W.pixelStorei(37441, c.premultiplyAlpha)
      W.pixelStorei(3317, c.unpackAlignment)
      b.isDataTexture
        ? W.texSubImage2D(3553, d, a.x, a.y, e, h, l, q, b.image.data)
        : b.isCompressedTexture
        ? W.compressedTexSubImage2D(
            3553,
            d,
            a.x,
            a.y,
            b.mipmaps[0].width,
            b.mipmaps[0].height,
            l,
            b.mipmaps[0].data
          )
        : W.texSubImage2D(3553, d, a.x, a.y, l, q, b.image)
      0 === d && c.generateMipmaps && W.generateMipmap(3553)
      Da.unbindTexture()
    }
    this.initTexture = function (a) {
      ga.setTexture2D(a, 0)
      Da.unbindTexture()
    }
    'undefined' !== typeof ___0x0_DEVTOOLS__ &&
      ___0x0_DEVTOOLS__.dispatchEvent(
        new CustomEvent('observe', { detail: this })
      )
  }
  function sg(c) {
    Wd.call(this, c)
  }
  function fc() {
    n.call(this)
    Object.defineProperty(this, 'isss', { value: !0 })
    this.type = 'ss'
    this.overrideMaterial = this.fog = this.environment = this.background = null
    this.autoUpdate = !0
    'undefined' !== typeof ___0x0_DEVTOOLS__ &&
      ___0x0_DEVTOOLS__.dispatchEvent(
        new CustomEvent('observe', { detail: this })
      )
  }
  function hb(c, a) {
    this.array = c
    this.stride = a
    this.count = void 0 !== c ? c.length / a : 0
    this.usage = 35044
    this.updateRange = { offset: 0, count: -1 }
    this.version = 0
    this.uuid = ea.generateUUID()
  }
  function gc(c, a, b, d) {
    this.name = ''
    this.data = c
    this.itemSize = a
    this.offset = b
    this.normalized = !0 === d
  }
  function hc(c) {
    y.call(this)
    this.type = 'SpriteMaterial'
    this.color = new H(16777215)
    this.alphaMap = this.map = null
    this.rotation = 0
    this.transparent = this.sizeAttenuation = !0
    this.setValues(c)
  }
  function Xd(c) {
    n.call(this)
    this.type = 'Sprite'
    if (void 0 === bd) {
      bd = new I()
      var a = new Float32Array([
          -0.5,
          -0.5,
          0,
          0,
          0,
          0.5,
          -0.5,
          0,
          1,
          0,
          0.5,
          0.5,
          0,
          1,
          1,
          -0.5,
          0.5,
          0,
          0,
          1,
        ]),
        a = new hb(a, 5)
      bd.setIndex([0, 1, 2, 0, 2, 3])
      bd.setAttribute('position', new gc(a, 3, 0, !1))
      bd.setAttribute('uv', new gc(a, 2, 3, !1))
    }
    this.geometry = bd
    this.material = void 0 !== c ? c : new hc()
    this.center = new B(0.5, 0.5)
  }
  function cf(c, a, b, d, e, h) {
    cd.subVectors(c, b).addScalar(0.5).multiply(d)
    void 0 !== e
      ? ((Yd.x = h * cd.x - e * cd.y), (Yd.y = e * cd.x + h * cd.y))
      : Yd.copy(cd)
    c.copy(a)
    c.x += Yd.x
    c.y += Yd.y
    c.applyMatrix4(Uh)
  }
  function Zd() {
    n.call(this)
    this._currentLevel = 0
    this.type = 'LOD'
    Object.defineProperties(this, { levels: { enumerable: !0, value: [] } })
    this.autoUpdate = !0
  }
  function df(c, a) {
    c &&
      c.is_0x6 &&
      console.error(
        'THREE.Skinnedna no longer supports THREE._0x6. Use THREE._0x2 instead.'
      )
    ca.call(this, c, a)
    this.type = 'Skinnedna'
    this.bindMode = 'attached'
    this.bindMatrix = new O()
    this.bindMatrixInverse = new O()
  }
  function ef(c, a) {
    c = c || []
    this.bones = c.slice(0)
    this.boneMatrices = new Float32Array(16 * this.bones.length)
    this.frame = -1
    if (void 0 === a) this.calculateInverses()
    else if (this.bones.length === a.length) this.boneInverses = a.slice(0)
    else {
      console.warn('THREE.Skeleton boneInverses is the wrong length.')
      this.boneInverses = []
      for (var b = 0, d = this.bones.length; b < d; b++)
        this.boneInverses.push(new O())
    }
  }
  function tg() {
    n.call(this)
    this.type = 'Bone'
  }
  function $d(c, a, b) {
    ca.call(this, c, a)
    this.instanceMatrix = new C(new Float32Array(16 * b), 16)
    this.mainna = this.selectna = this.instanceHide_qmodel = this.instanceColor = null
    this.count = b
    this.frustumCulled = !1
  }
  function ma(c) {
    y.call(this)
    this.type = 'b3'
    this.color = new H(16777215)
    this.linewidth = 1
    this.linejoin = this.linecap = 'round'
    this.morphTargets = !1
    this.setValues(c)
  }
  function ab(c, a, b) {
    1 === b &&
      console.error(
        'THREE.Line: parameter THREE.LinePieces no longer supported. Use THREE.b2 instead.'
      )
    n.call(this)
    this.type = 'Line'
    this.geometry = void 0 !== c ? c : new I()
    this.material = void 0 !== a ? a : new ma()
    this.updateMorphTargets()
  }
  function qa(c, a) {
    ab.call(this, c, a)
    this.type = 'b2'
  }
  function ff(c, a) {
    ab.call(this, c, a)
    this.type = 'LineLoop'
  }
  function rb(c) {
    y.call(this)
    this.type = 'PointsMaterial'
    this.color = new H(16777215)
    this.alphaMap = this.map = null
    this.size = 1
    this.sizeAttenuation = !0
    this.morphTargets = !1
    this.setValues(c)
  }
  function dd(c, a) {
    n.call(this)
    this.type = 'Points'
    this.geometry = void 0 !== c ? c : new I()
    this.material = void 0 !== a ? a : new rb()
    this.updateMorphTargets()
  }
  function ug(c, a, b, d, e, h, l) {
    var q = vg.distanceSqToPoint(c)
    q < b &&
      ((b = new p()),
      vg.closestPointToPoint(c, b),
      b.applyMatrix4(d),
      (c = e.ray.origin.distanceTo(b)),
      c < e.near ||
        c > e.far ||
        h.push({
          distance: c,
          distanceToRay: Math.sqrt(q),
          point: b,
          index: a,
          face: null,
          object: l,
        }))
  }
  function wg(c, a, b, d, e, h, l, q, t) {
    function f() {
      K.needsUpdate = !0
      c.requestVideoFrameCallback(f)
    }
    g.call(this, c, a, b, d, e, h, l, q, t)
    this.format = void 0 !== l ? l : 1022
    this.minFilter = void 0 !== h ? h : 1006
    this.magFilter = void 0 !== e ? e : 1006
    this.generateMipmaps = !1
    var K = this
    'requestVideoFrameCallback' in c && c.requestVideoFrameCallback(f)
  }
  function ed(c, a, b, d, e, h, l, q, t, f, K, M) {
    g.call(this, null, h, l, q, t, f, d, e, K, M)
    this.image = { width: a, height: b }
    this.mipmaps = c
    this.generateMipmaps = this.flipY = !1
  }
  function ae(c, a, b, d, e, h, l, q, t) {
    g.call(this, c, a, b, d, e, h, l, q, t)
    this.needsUpdate = !0
  }
  function be(c, a, b, d, e, h, l, q, t, f) {
    f = void 0 !== f ? f : 1026
    if (1026 !== f && 1027 !== f)
      throw Error(
        'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat'
      )
    void 0 === b && 1026 === f && (b = 1012)
    void 0 === b && 1027 === f && (b = 1020)
    g.call(this, null, d, e, h, l, q, f, b, t)
    this.image = { width: c, height: a }
    this.magFilter = void 0 !== l ? l : 1003
    this.minFilter = void 0 !== q ? q : 1003
    this.generateMipmaps = this.flipY = !1
  }
  function fd(c) {
    I.call(this)
    this.type = 'Wireframe_0x6'
    var a = [],
      b = [0, 0],
      d = {},
      e = ['a', 'b', 'c']
    if (c && c.is_0x6) {
      for (var h = c.faces, l = 0, q = h.length; l < q; l++)
        for (var t = h[l], f = 0; 3 > f; f++) {
          var g = t[e[f]],
            M = t[e[(f + 1) % 3]]
          b[0] = Math.min(g, M)
          b[1] = Math.max(g, M)
          g = b[0] + ',' + b[1]
          void 0 === d[g] && (d[g] = { index1: b[0], index2: b[1] })
        }
      for (var k in d)
        (b = d[k]),
          (h = c.vertices[b.index1]),
          a.push(h.x, h.y, h.z),
          (h = c.vertices[b.index2]),
          a.push(h.x, h.y, h.z)
    } else if (c && c.is_0x2)
      if (((k = new p()), null !== c.index)) {
        e = c.attributes.position
        l = c.index
        c = c.groups
        0 === c.length && (c = [{ start: 0, count: l.count, materialIndex: 0 }])
        q = 0
        for (t = c.length; q < t; ++q)
          for (g = c[q], f = M = g.start, g = M + g.count; f < g; f += 3)
            for (M = 0; 3 > M; M++) {
              var J = l.getX(f + M),
                m = l.getX(f + ((M + 1) % 3))
              b[0] = Math.min(J, m)
              b[1] = Math.max(J, m)
              J = b[0] + ',' + b[1]
              void 0 === d[J] && (d[J] = { index1: b[0], index2: b[1] })
            }
        for (h in d)
          (b = d[h]),
            k.from_0x3(e, b.index1),
            a.push(k.x, k.y, k.z),
            k.from_0x3(e, b.index2),
            a.push(k.x, k.y, k.z)
      } else
        for (d = c.attributes.position, b = 0, h = d.count / 3; b < h; b++)
          for (c = 0; 3 > c; c++)
            k.from_0x3(d, 3 * b + c),
              a.push(k.x, k.y, k.z),
              k.from_0x3(d, 3 * b + ((c + 1) % 3)),
              a.push(k.x, k.y, k.z)
    this.setAttribute('position', new E(a, 3))
  }
  function ce(c, a, b) {
    V.call(this)
    this.type = 'Parametric_0x6'
    this.parameters = { func: c, slices: a, stacks: b }
    this.from_0x2(new gd(c, a, b))
    this.mergeVertices()
  }
  function gd(c, a, b) {
    I.call(this)
    this.type = 'Parametric_0x2'
    this.parameters = { func: c, slices: a, stacks: b }
    var d = [],
      e = [],
      h = [],
      l = [],
      q = new p(),
      t = new p(),
      f = new p(),
      g = new p(),
      M = new p()
    3 > c.length &&
      console.error(
        'THREE.Parametric_0x6: Function must now modify a _0x1 as third parameter.'
      )
    for (var k = a + 1, J = 0; J <= b; J++)
      for (var m = J / b, F = 0; F <= a; F++) {
        var n = F / a
        c(n, m, t)
        e.push(t.x, t.y, t.z)
        0 <= n - 1e-5
          ? (c(n - 1e-5, m, f), g.subVectors(t, f))
          : (c(n + 1e-5, m, f), g.subVectors(f, t))
        0 <= m - 1e-5
          ? (c(n, m - 1e-5, f), M.subVectors(t, f))
          : (c(n, m + 1e-5, f), M.subVectors(f, t))
        q.crossVectors(g, M).normalize()
        h.push(q.x, q.y, q.z)
        l.push(n, m)
      }
    for (c = 0; c < b; c++)
      for (q = 0; q < a; q++)
        (t = c * k + q + 1),
          (f = (c + 1) * k + q + 1),
          (g = (c + 1) * k + q),
          d.push(c * k + q, t, g),
          d.push(t, f, g)
    this.setIndex(d)
    this.setAttribute('position', new E(e, 3))
    this.setAttribute('normal', new E(h, 3))
    this.setAttribute('uv', new E(l, 2))
  }
  function de(c, a, b, d) {
    V.call(this)
    this.type = 'Polyhedron_0x6'
    this.parameters = { vertices: c, indices: a, radius: b, detail: d }
    this.from_0x2(new bb(c, a, b, d))
    this.mergeVertices()
  }
  function bb(c, a, b, d) {
    function e(a) {
      q.push(a.x, a.y, a.z)
    }
    function h(a, b) {
      var d = 3 * a
      b.x = c[d + 0]
      b.y = c[d + 1]
      b.z = c[d + 2]
    }
    function l(a, b, c, d) {
      0 > d && 1 === a.x && (t[b] = a.x - 1)
      0 === c.x && 0 === c.z && (t[b] = d / 2 / Math.PI + 0.5)
    }
    I.call(this)
    this.type = 'Polyhedron_0x2'
    this.parameters = { vertices: c, indices: a, radius: b, detail: d }
    b = b || 1
    d = d || 0
    var q = [],
      t = []
    ;(function (b) {
      for (
        var c = new p(), d = new p(), l = new p(), q = 0;
        q < a.length;
        q += 3
      ) {
        h(a[q + 0], c)
        h(a[q + 1], d)
        h(a[q + 2], l)
        for (
          var t = c, f = d, A = l, g = Math.pow(2, b), k = [], m = 0;
          m <= g;
          m++
        ) {
          k[m] = []
          for (
            var n = t.clone().lerp(A, m / g),
              r = f.clone().lerp(A, m / g),
              u = g - m,
              w = 0;
            w <= u;
            w++
          )
            k[m][w] = 0 === w && m === g ? n : n.clone().lerp(r, w / u)
        }
        for (t = 0; t < g; t++)
          for (f = 0; f < 2 * (g - t) - 1; f++)
            (A = Math.floor(f / 2)),
              0 === f % 2
                ? (e(k[t][A + 1]), e(k[t + 1][A]), e(k[t][A]))
                : (e(k[t][A + 1]), e(k[t + 1][A + 1]), e(k[t + 1][A]))
      }
    })(d)
    ;(function (a) {
      for (var b = new p(), c = 0; c < q.length; c += 3)
        (b.x = q[c + 0]),
          (b.y = q[c + 1]),
          (b.z = q[c + 2]),
          b.normalize().multiplyScalar(a),
          (q[c + 0] = b.x),
          (q[c + 1] = b.y),
          (q[c + 2] = b.z)
    })(b)
    ;(function () {
      for (var a = new p(), b = 0; b < q.length; b += 3)
        (a.x = q[b + 0]),
          (a.y = q[b + 1]),
          (a.z = q[b + 2]),
          t.push(
            Math.atan2(a.z, -a.x) / 2 / Math.PI + 0.5,
            1 -
              (Math.atan2(-a.y, Math.sqrt(a.x * a.x + a.z * a.z)) / Math.PI +
                0.5)
          )
      for (
        var a = new p(),
          b = new p(),
          c = new p(),
          d = new p(),
          e = new B(),
          h = new B(),
          f = new B(),
          g = 0,
          k = 0;
        g < q.length;
        g += 9, k += 6
      ) {
        a.set(q[g + 0], q[g + 1], q[g + 2])
        b.set(q[g + 3], q[g + 4], q[g + 5])
        c.set(q[g + 6], q[g + 7], q[g + 8])
        e.set(t[k + 0], t[k + 1])
        h.set(t[k + 2], t[k + 3])
        f.set(t[k + 4], t[k + 5])
        d.copy(a).add(b).add(c).divideScalar(3)
        var m = Math.atan2(d.z, -d.x)
        l(e, k + 0, a, m)
        l(h, k + 2, b, m)
        l(f, k + 4, c, m)
      }
      for (a = 0; a < t.length; a += 6)
        (b = t[a + 0]),
          (c = t[a + 2]),
          (d = t[a + 4]),
          (e = Math.min(b, c, d)),
          0.9 < Math.max(b, c, d) &&
            0.1 > e &&
            (0.2 > b && (t[a + 0] += 1),
            0.2 > c && (t[a + 2] += 1),
            0.2 > d && (t[a + 4] += 1))
    })()
    this.setAttribute('position', new E(q, 3))
    this.setAttribute('normal', new E(q.slice(), 3))
    this.setAttribute('uv', new E(t, 2))
    0 === d ? this.computeVertexNormals() : this.normalizeNormals()
  }
  function ee(c, a) {
    V.call(this)
    this.type = 'Tetrahedron_0x6'
    this.parameters = { radius: c, detail: a }
    this.from_0x2(new hd(c, a))
    this.mergeVertices()
  }
  function hd(c, a) {
    bb.call(
      this,
      [1, 1, 1, -1, -1, 1, -1, 1, -1, 1, -1, -1],
      [2, 1, 0, 0, 3, 2, 1, 3, 0, 2, 3, 1],
      c,
      a
    )
    this.type = 'Tetrahedron_0x2'
    this.parameters = { radius: c, detail: a }
  }
  function fe(c, a) {
    V.call(this)
    this.type = 'Octahedron_0x6'
    this.parameters = { radius: c, detail: a }
    this.from_0x2(new yc(c, a))
    this.mergeVertices()
  }
  function yc(c, a) {
    bb.call(
      this,
      [1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 1, 0, 0, -1],
      [0, 2, 4, 0, 4, 3, 0, 3, 5, 0, 5, 2, 1, 2, 5, 1, 5, 3, 1, 3, 4, 1, 4, 2],
      c,
      a
    )
    this.type = 'Octahedron_0x2'
    this.parameters = { radius: c, detail: a }
  }
  function ge(c, a) {
    V.call(this)
    this.type = 'Icosahedron_0x6'
    this.parameters = { radius: c, detail: a }
    this.from_0x2(new id(c, a))
    this.mergeVertices()
  }
  function id(c, a) {
    var b = (1 + Math.sqrt(5)) / 2
    bb.call(
      this,
      [
        -1,
        b,
        0,
        1,
        b,
        0,
        -1,
        -b,
        0,
        1,
        -b,
        0,
        0,
        -1,
        b,
        0,
        1,
        b,
        0,
        -1,
        -b,
        0,
        1,
        -b,
        b,
        0,
        -1,
        b,
        0,
        1,
        -b,
        0,
        -1,
        -b,
        0,
        1,
      ],
      [
        0,
        11,
        5,
        0,
        5,
        1,
        0,
        1,
        7,
        0,
        7,
        10,
        0,
        10,
        11,
        1,
        5,
        9,
        5,
        11,
        4,
        11,
        10,
        2,
        10,
        7,
        6,
        7,
        1,
        8,
        3,
        9,
        4,
        3,
        4,
        2,
        3,
        2,
        6,
        3,
        6,
        8,
        3,
        8,
        9,
        4,
        9,
        5,
        2,
        4,
        11,
        6,
        2,
        10,
        8,
        6,
        7,
        9,
        8,
        1,
      ],
      c,
      a
    )
    this.type = 'Icosahedron_0x2'
    this.parameters = { radius: c, detail: a }
  }
  function he(c, a) {
    V.call(this)
    this.type = 'Dodecahedron_0x6'
    this.parameters = { radius: c, detail: a }
    this.from_0x2(new jd(c, a))
    this.mergeVertices()
  }
  function jd(c, a) {
    var b = (1 + Math.sqrt(5)) / 2,
      d = 1 / b
    bb.call(
      this,
      [
        -1,
        -1,
        -1,
        -1,
        -1,
        1,
        -1,
        1,
        -1,
        -1,
        1,
        1,
        1,
        -1,
        -1,
        1,
        -1,
        1,
        1,
        1,
        -1,
        1,
        1,
        1,
        0,
        -d,
        -b,
        0,
        -d,
        b,
        0,
        d,
        -b,
        0,
        d,
        b,
        -d,
        -b,
        0,
        -d,
        b,
        0,
        d,
        -b,
        0,
        d,
        b,
        0,
        -b,
        0,
        -d,
        b,
        0,
        -d,
        -b,
        0,
        d,
        b,
        0,
        d,
      ],
      [
        3,
        11,
        7,
        3,
        7,
        15,
        3,
        15,
        13,
        7,
        19,
        17,
        7,
        17,
        6,
        7,
        6,
        15,
        17,
        4,
        8,
        17,
        8,
        10,
        17,
        10,
        6,
        8,
        0,
        16,
        8,
        16,
        2,
        8,
        2,
        10,
        0,
        12,
        1,
        0,
        1,
        18,
        0,
        18,
        16,
        6,
        10,
        2,
        6,
        2,
        13,
        6,
        13,
        15,
        2,
        16,
        18,
        2,
        18,
        3,
        2,
        3,
        13,
        18,
        1,
        9,
        18,
        9,
        11,
        18,
        11,
        3,
        4,
        14,
        12,
        4,
        12,
        0,
        4,
        0,
        8,
        11,
        9,
        5,
        11,
        5,
        19,
        11,
        19,
        7,
        19,
        5,
        14,
        19,
        14,
        4,
        19,
        4,
        17,
        1,
        12,
        14,
        1,
        14,
        5,
        1,
        5,
        9,
      ],
      c,
      a
    )
    this.type = 'Dodecahedron_0x2'
    this.parameters = { radius: c, detail: a }
  }
  function ie(c, a, b, d, e, h) {
    V.call(this)
    this.type = 'Tube_0x6'
    this.parameters = {
      path: c,
      tubularSegments: a,
      radius: b,
      radialSegments: d,
      closed: e,
    }
    void 0 !== h && console.warn('THREE.Tube_0x6: taper has been removed.')
    c = new zc(c, a, b, d, e)
    this.tangents = c.tangents
    this.normals = c.normals
    this.binormals = c.binormals
    this.from_0x2(c)
    this.mergeVertices()
  }
  function zc(c, a, b, d, e) {
    function h(e) {
      g = c.getPointAt(e / a, g)
      var h = l.normals[e]
      e = l.binormals[e]
      for (var f = 0; f <= d; f++) {
        var A = (f / d) * Math.PI * 2,
          K = Math.sin(A),
          A = -Math.cos(A)
        t.x = A * h.x + K * e.x
        t.y = A * h.y + K * e.y
        t.z = A * h.z + K * e.z
        t.normalize()
        D.push(t.x, t.y, t.z)
        q.x = g.x + b * t.x
        q.y = g.y + b * t.y
        q.z = g.z + b * t.z
        k.push(q.x, q.y, q.z)
      }
    }
    I.call(this)
    this.type = 'Tube_0x2'
    this.parameters = {
      path: c,
      tubularSegments: a,
      radius: b,
      radialSegments: d,
      closed: e,
    }
    a = a || 64
    b = b || 1
    d = d || 8
    e = e || !1
    var l = c.computeFrenetFrames(a, e)
    this.tangents = l.tangents
    this.normals = l.normals
    this.binormals = l.binormals
    var q = new p(),
      t = new p(),
      f = new B(),
      g = new p(),
      k = [],
      D = [],
      m = [],
      n = []
    ;(function () {
      for (var b = 0; b < a; b++) h(b)
      h(!1 === e ? a : 0)
      for (b = 0; b <= a; b++)
        for (var c = 0; c <= d; c++)
          (f.x = b / a), (f.y = c / d), m.push(f.x, f.y)
      for (b = 1; b <= a; b++)
        for (c = 1; c <= d; c++) {
          var l = (d + 1) * b + (c - 1),
            q = (d + 1) * b + c,
            t = (d + 1) * (b - 1) + c
          n.push((d + 1) * (b - 1) + (c - 1), l, t)
          n.push(l, q, t)
        }
    })()
    this.setIndex(n)
    this.setAttribute('position', new E(k, 3))
    this.setAttribute('normal', new E(D, 3))
    this.setAttribute('uv', new E(m, 2))
  }
  function je(c, a, b, d, e, h, l) {
    V.call(this)
    this.type = 'TorusKnot_0x6'
    this.parameters = {
      radius: c,
      tube: a,
      tubularSegments: b,
      radialSegments: d,
      p: e,
      q: h,
    }
    void 0 !== l &&
      console.warn(
        'THREE.TorusKnot_0x6: heightScale has been deprecated. Use .scale( x, y, z ) instead.'
      )
    this.from_0x2(new kd(c, a, b, d, e, h))
    this.mergeVertices()
  }
  function kd(c, a, b, d, e, h) {
    function l(a, b, c, d, e) {
      var h = Math.sin(a)
      b = (c / b) * a
      c = Math.cos(b)
      e.x = d * (2 + c) * 0.5 * Math.cos(a)
      e.y = d * (2 + c) * h * 0.5
      e.z = d * Math.sin(b) * 0.5
    }
    I.call(this)
    this.type = 'TorusKnot_0x2'
    this.parameters = {
      radius: c,
      tube: a,
      tubularSegments: b,
      radialSegments: d,
      p: e,
      q: h,
    }
    c = c || 1
    a = a || 0.4
    b = Math.floor(b) || 64
    d = Math.floor(d) || 8
    e = e || 2
    h = h || 3
    for (
      var q = [],
        t = [],
        f = [],
        g = [],
        k = new p(),
        D = new p(),
        m = new p(),
        n = new p(),
        F = new p(),
        r = new p(),
        u = new p(),
        w = 0;
      w <= b;
      ++w
    ) {
      var v = (w / b) * e * Math.PI * 2
      l(v, e, h, c, m)
      l(v + 0.01, e, h, c, n)
      r.subVectors(n, m)
      u.addVectors(n, m)
      F.crossVectors(r, u)
      u.crossVectors(F, r)
      F.normalize()
      u.normalize()
      for (v = 0; v <= d; ++v) {
        var z = (v / d) * Math.PI * 2,
          x = -a * Math.cos(z),
          z = a * Math.sin(z)
        k.x = m.x + (x * u.x + z * F.x)
        k.y = m.y + (x * u.y + z * F.y)
        k.z = m.z + (x * u.z + z * F.z)
        t.push(k.x, k.y, k.z)
        D.subVectors(k, m).normalize()
        f.push(D.x, D.y, D.z)
        g.push(w / b)
        g.push(v / d)
      }
    }
    for (c = 1; c <= b; c++)
      for (a = 1; a <= d; a++)
        (e = (d + 1) * c + (a - 1)),
          (h = (d + 1) * c + a),
          (k = (d + 1) * (c - 1) + a),
          q.push((d + 1) * (c - 1) + (a - 1), e, k),
          q.push(e, h, k)
    this.setIndex(q)
    this.setAttribute('position', new E(t, 3))
    this.setAttribute('normal', new E(f, 3))
    this.setAttribute('uv', new E(g, 2))
  }
  function ke(c, a, b, d, e) {
    V.call(this)
    this.type = 'Torus_0x6'
    this.parameters = {
      radius: c,
      tube: a,
      radialSegments: b,
      tubularSegments: d,
      arc: e,
    }
    this.from_0x2(new ld(c, a, b, d, e))
    this.mergeVertices()
  }
  function ld(c, a, b, d, e) {
    I.call(this)
    this.type = 'Torus_0x2'
    this.parameters = {
      radius: c,
      tube: a,
      radialSegments: b,
      tubularSegments: d,
      arc: e,
    }
    c = c || 1
    a = a || 0.4
    b = Math.floor(b) || 8
    d = Math.floor(d) || 6
    e = e || 2 * Math.PI
    for (
      var h = [],
        l = [],
        q = [],
        t = [],
        f = new p(),
        g = new p(),
        k = new p(),
        D = 0;
      D <= b;
      D++
    )
      for (var m = 0; m <= d; m++) {
        var n = (m / d) * e,
          F = (D / b) * Math.PI * 2
        g.x = (c + a * Math.cos(F)) * Math.cos(n)
        g.y = (c + a * Math.cos(F)) * Math.sin(n)
        g.z = a * Math.sin(F)
        l.push(g.x, g.y, g.z)
        f.x = c * Math.cos(n)
        f.y = c * Math.sin(n)
        k.subVectors(g, f).normalize()
        q.push(k.x, k.y, k.z)
        t.push(m / d)
        t.push(D / b)
      }
    for (c = 1; c <= b; c++)
      for (a = 1; a <= d; a++)
        (e = (d + 1) * (c - 1) + a - 1),
          (f = (d + 1) * (c - 1) + a),
          (g = (d + 1) * c + a),
          h.push((d + 1) * c + a - 1, e, g),
          h.push(e, f, g)
    this.setIndex(h)
    this.setAttribute('position', new E(l, 3))
    this.setAttribute('normal', new E(q, 3))
    this.setAttribute('uv', new E(t, 2))
  }
  function Vh(c, a, b, d, e) {
    for (var h, l = 0, q = a, t = b - d; q < b; q += d)
      (l += (c[t] - c[q]) * (c[q + 1] + c[t + 1])), (t = q)
    if (e === 0 < l) for (e = a; e < b; e += d) h = Wh(e, c[e], c[e + 1], h)
    else for (e = b - d; e >= a; e -= d) h = Wh(e, c[e], c[e + 1], h)
    h && gf(h, h.next) && (le(h), (h = h.next))
    return h
  }
  function ic(c, a) {
    if (!c) return c
    a || (a = c)
    var b = c,
      d
    do
      if (
        ((d = !1), b.steiner || (!gf(b, b.next) && 0 !== Ba(b.prev, b, b.next)))
      )
        b = b.next
      else {
        le(b)
        b = a = b.prev
        if (b === b.next) break
        d = !0
      }
    while (d || b !== a)
    return a
  }
  function me(c, a, b, d, e, h, l) {
    if (c) {
      if (!l && h) {
        var q = c,
          t = q
        do
          null === t.z && (t.z = xg(t.x, t.y, d, e, h)),
            (t.prevZ = t.prev),
            (t = t.nextZ = t.next)
        while (t !== q)
        t.prevZ.nextZ = null
        t.prevZ = null
        var q = t,
          f,
          g,
          k,
          D,
          m,
          p,
          n = 1
        do {
          t = q
          k = q = null
          for (D = 0; t; ) {
            D++
            g = t
            for (f = m = 0; f < n && (m++, (g = g.nextZ), g); f++);
            for (p = n; 0 < m || (0 < p && g); )
              0 !== m && (0 === p || !g || t.z <= g.z)
                ? ((f = t), (t = t.nextZ), m--)
                : ((f = g), (g = g.nextZ), p--),
                k ? (k.nextZ = f) : (q = f),
                (f.prevZ = k),
                (k = f)
            t = g
          }
          k.nextZ = null
          n *= 2
        } while (1 < D)
      }
      for (q = c; c.prev !== c.next; ) {
        t = c.prev
        g = c.next
        if (h) k = zk(c, d, e, h)
        else
          a: if (
            ((k = c), (D = k.prev), (m = k), (n = k.next), 0 <= Ba(D, m, n))
          )
            k = !1
          else {
            for (f = k.next.next; f !== k.prev; ) {
              if (
                md(D.x, D.y, m.x, m.y, n.x, n.y, f.x, f.y) &&
                0 <= Ba(f.prev, f, f.next)
              ) {
                k = !1
                break a
              }
              f = f.next
            }
            k = !0
          }
        if (k)
          a.push(t.i / b),
            a.push(c.i / b),
            a.push(g.i / b),
            le(c),
            (q = c = g.next)
        else if (((c = g), c === q)) {
          if (!l) me(ic(c), a, b, d, e, h, 1)
          else if (1 === l) {
            c = ic(c)
            l = a
            q = b
            t = c
            do
              (g = t.prev),
                (k = t.next.next),
                !gf(g, k) &&
                  Xh(g, t, t.next, k) &&
                  ne(g, k) &&
                  ne(k, g) &&
                  (l.push(g.i / q),
                  l.push(t.i / q),
                  l.push(k.i / q),
                  le(t),
                  le(t.next),
                  (t = c = k)),
                (t = t.next)
            while (t !== c)
            c = ic(t)
            me(c, a, b, d, e, h, 2)
          } else if (2 === l)
            a: {
              l = c
              do {
                for (q = l.next.next; q !== l.prev; ) {
                  if ((t = l.i !== q.i)) {
                    t = l
                    g = q
                    if ((k = t.next.i !== g.i && t.prev.i !== g.i)) {
                      b: {
                        k = t
                        do {
                          if (
                            k.i !== t.i &&
                            k.next.i !== t.i &&
                            k.i !== g.i &&
                            k.next.i !== g.i &&
                            Xh(k, k.next, t, g)
                          ) {
                            k = !0
                            break b
                          }
                          k = k.next
                        } while (k !== t)
                        k = !1
                      }
                      k = !k
                    }
                    if (k) {
                      if ((k = ne(t, g) && ne(g, t))) {
                        k = t
                        D = !1
                        m = (t.x + g.x) / 2
                        n = (t.y + g.y) / 2
                        do
                          k.y > n !== k.next.y > n &&
                            k.next.y !== k.y &&
                            m <
                              ((k.next.x - k.x) * (n - k.y)) /
                                (k.next.y - k.y) +
                                k.x &&
                            (D = !D),
                            (k = k.next)
                        while (k !== t)
                        k = D
                      }
                      k =
                        (k && (Ba(t.prev, t, g.prev) || Ba(t, g.prev, g))) ||
                        (gf(t, g) &&
                          0 < Ba(t.prev, t, t.next) &&
                          0 < Ba(g.prev, g, g.next))
                    }
                    t = k
                  }
                  if (t) {
                    c = Yh(l, q)
                    l = ic(l, l.next)
                    c = ic(c, c.next)
                    me(l, a, b, d, e, h)
                    me(c, a, b, d, e, h)
                    break a
                  }
                  q = q.next
                }
                l = l.next
              } while (l !== c)
            }
          break
        }
      }
    }
  }
  function zk(c, a, b, d) {
    var e = c.prev,
      h = c.next
    if (0 <= Ba(e, c, h)) return !1
    var l = e.x > c.x ? (e.x > h.x ? e.x : h.x) : c.x > h.x ? c.x : h.x,
      q = e.y > c.y ? (e.y > h.y ? e.y : h.y) : c.y > h.y ? c.y : h.y,
      t = xg(
        e.x < c.x ? (e.x < h.x ? e.x : h.x) : c.x < h.x ? c.x : h.x,
        e.y < c.y ? (e.y < h.y ? e.y : h.y) : c.y < h.y ? c.y : h.y,
        a,
        b,
        d
      )
    a = xg(l, q, a, b, d)
    b = c.prevZ
    for (d = c.nextZ; b && b.z >= t && d && d.z <= a; ) {
      if (
        b !== c.prev &&
        b !== c.next &&
        md(e.x, e.y, c.x, c.y, h.x, h.y, b.x, b.y) &&
        0 <= Ba(b.prev, b, b.next)
      )
        return !1
      b = b.prevZ
      if (
        d !== c.prev &&
        d !== c.next &&
        md(e.x, e.y, c.x, c.y, h.x, h.y, d.x, d.y) &&
        0 <= Ba(d.prev, d, d.next)
      )
        return !1
      d = d.nextZ
    }
    for (; b && b.z >= t; ) {
      if (
        b !== c.prev &&
        b !== c.next &&
        md(e.x, e.y, c.x, c.y, h.x, h.y, b.x, b.y) &&
        0 <= Ba(b.prev, b, b.next)
      )
        return !1
      b = b.prevZ
    }
    for (; d && d.z <= a; ) {
      if (
        d !== c.prev &&
        d !== c.next &&
        md(e.x, e.y, c.x, c.y, h.x, h.y, d.x, d.y) &&
        0 <= Ba(d.prev, d, d.next)
      )
        return !1
      d = d.nextZ
    }
    return !0
  }
  function Ak(c, a) {
    return c.x - a.x
  }
  function Bk(c, a) {
    var b = a,
      d = c.x,
      e = c.y,
      h = -Infinity,
      l
    do {
      if (e <= b.y && e >= b.next.y && b.next.y !== b.y) {
        var q = b.x + ((e - b.y) * (b.next.x - b.x)) / (b.next.y - b.y)
        if (q <= d && q > h) {
          h = q
          if (q === d) {
            if (e === b.y) return b
            if (e === b.next.y) return b.next
          }
          l = b.x < b.next.x ? b : b.next
        }
      }
      b = b.next
    } while (b !== a)
    if (!l) return null
    if (d === h) return l
    var q = l,
      t = l.x,
      f = l.y,
      g = Infinity,
      k,
      b = l
    do {
      if (
        d >= b.x &&
        b.x >= t &&
        d !== b.x &&
        md(e < f ? d : h, e, t, f, e < f ? h : d, e, b.x, b.y)
      ) {
        k = Math.abs(e - b.y) / (d - b.x)
        var D
        if (
          (D = ne(b, c)) &&
          !(D = k < g) &&
          (D = k === g) &&
          !(D = b.x > l.x) &&
          (D = b.x === l.x)
        ) {
          D = l
          var m = b
          D = 0 > Ba(D.prev, D, m.prev) && 0 > Ba(m.next, D, D.next)
        }
        D && ((l = b), (g = k))
      }
      b = b.next
    } while (b !== q)
    return l
  }
  function xg(c, a, b, d, e) {
    c = 32767 * (c - b) * e
    a = 32767 * (a - d) * e
    c = (c | (c << 8)) & 16711935
    c = (c | (c << 4)) & 252645135
    c = (c | (c << 2)) & 858993459
    a = (a | (a << 8)) & 16711935
    a = (a | (a << 4)) & 252645135
    a = (a | (a << 2)) & 858993459
    return ((c | (c << 1)) & 1431655765) | (((a | (a << 1)) & 1431655765) << 1)
  }
  function Ck(c) {
    var a = c,
      b = c
    do {
      if (a.x < b.x || (a.x === b.x && a.y < b.y)) b = a
      a = a.next
    } while (a !== c)
    return b
  }
  function md(c, a, b, d, e, h, l, q) {
    return (
      0 <= (e - l) * (a - q) - (c - l) * (h - q) &&
      0 <= (c - l) * (d - q) - (b - l) * (a - q) &&
      0 <= (b - l) * (h - q) - (e - l) * (d - q)
    )
  }
  function Ba(c, a, b) {
    return (a.y - c.y) * (b.x - a.x) - (a.x - c.x) * (b.y - a.y)
  }
  function gf(c, a) {
    return c.x === a.x && c.y === a.y
  }
  function Xh(c, a, b, d) {
    var e = hf(Ba(c, a, b)),
      h = hf(Ba(c, a, d)),
      l = hf(Ba(b, d, c)),
      q = hf(Ba(b, d, a))
    return (e !== h && l !== q) ||
      (0 === e && jf(c, b, a)) ||
      (0 === h && jf(c, d, a)) ||
      (0 === l && jf(b, c, d)) ||
      (0 === q && jf(b, a, d))
      ? !0
      : !1
  }
  function jf(c, a, b) {
    return (
      a.x <= Math.max(c.x, b.x) &&
      a.x >= Math.min(c.x, b.x) &&
      a.y <= Math.max(c.y, b.y) &&
      a.y >= Math.min(c.y, b.y)
    )
  }
  function hf(c) {
    return 0 < c ? 1 : 0 > c ? -1 : 0
  }
  function ne(c, a) {
    return 0 > Ba(c.prev, c, c.next)
      ? 0 <= Ba(c, a, c.next) && 0 <= Ba(c, c.prev, a)
      : 0 > Ba(c, a, c.prev) || 0 > Ba(c, c.next, a)
  }
  function Yh(c, a) {
    var b = new yg(c.i, c.x, c.y),
      d = new yg(a.i, a.x, a.y),
      e = c.next,
      h = a.prev
    c.next = a
    a.prev = c
    b.next = e
    e.prev = b
    d.next = b
    b.prev = d
    h.next = d
    d.prev = h
    return d
  }
  function Wh(c, a, b, d) {
    c = new yg(c, a, b)
    d
      ? ((c.next = d.next), (c.prev = d), (d.next.prev = c), (d.next = c))
      : ((c.prev = c), (c.next = c))
    return c
  }
  function le(c) {
    c.next.prev = c.prev
    c.prev.next = c.next
    c.prevZ && (c.prevZ.nextZ = c.nextZ)
    c.nextZ && (c.nextZ.prevZ = c.prevZ)
  }
  function yg(c, a, b) {
    this.i = c
    this.x = a
    this.y = b
    this.nextZ = this.prevZ = this.z = this.next = this.prev = null
    this.steiner = !1
  }
  function Zh(c) {
    var a = c.length
    2 < a && c[a - 1].equals(c[0]) && c.pop()
  }
  function $h(c, a) {
    for (var b = 0; b < a.length; b++) c.push(a[b].x), c.push(a[b].y)
  }
  function Ac(c, a) {
    V.call(this)
    this.type = 'Extrude_0x6'
    this.parameters = { shapes: c, options: a }
    this.from_0x2(new Bb(c, a))
    this.mergeVertices()
  }
  function Bb(c, a) {
    function b(b) {
      function c(a, b, c) {
        b || console.error('THREE.Extrude_0x6: vec does not exist')
        return b.clone().multiplyScalar(c).add(a)
      }
      function l(a, b, c) {
        var d, e, h
        e = a.x - b.x
        h = a.y - b.y
        d = c.x - a.x
        var l = c.y - a.y,
          q = e * e + h * h
        if (Math.abs(e * l - h * d) > Number.EPSILON) {
          var f = Math.sqrt(q),
            t = Math.sqrt(d * d + l * l),
            q = b.x - h / f
          b = b.y + e / f
          l = ((c.x - l / t - q) * l - (c.y + d / t - b) * d) / (e * l - h * d)
          d = q + e * l - a.x
          e = b + h * l - a.y
          h = d * d + e * e
          if (2 >= h) return new B(d, e)
          h = Math.sqrt(h / 2)
        } else (a = !1), e > Number.EPSILON ? d > Number.EPSILON && (a = !0) : e < -Number.EPSILON ? d < -Number.EPSILON && (a = !0) : Math.sign(h) === Math.sign(l) && (a = !0), a ? ((d = -h), (h = Math.sqrt(q))) : ((d = e), (e = h), (h = Math.sqrt(q / 2)))
        return new B(d / h, e / h)
      }
      function q(a, b) {
        for (var c = a.length; 0 <= --c; ) {
          var h = c,
            l = c - 1
          0 > l && (l = a.length - 1)
          for (var q = 0, f = r + 2 * y; q < f; q++) {
            var t = X * q,
              A = X * (q + 1),
              K = b + l + t,
              D = b + l + A,
              A = b + h + A
            g(b + h + t)
            g(K)
            g(A)
            g(K)
            g(D)
            g(A)
            t = e.length / 3
            t = L.generateSideWallUV(d, e, t - 6, t - 3, t - 2, t - 1)
            k(t[0])
            k(t[1])
            k(t[3])
            k(t[1])
            k(t[2])
            k(t[3])
          }
        }
      }
      function f(a, b, c) {
        m.push(a)
        m.push(b)
        m.push(c)
      }
      function t(a, b, c) {
        g(a)
        g(b)
        g(c)
        a = e.length / 3
        a = L.generateTopUV(d, e, a - 3, a - 2, a - 1)
        k(a[0])
        k(a[1])
        k(a[2])
      }
      function g(a) {
        e.push(m[3 * a + 0])
        e.push(m[3 * a + 1])
        e.push(m[3 * a + 2])
      }
      function k(a) {
        h.push(a.x)
        h.push(a.y)
      }
      var m = [],
        n = void 0 !== a.curveSegments ? a.curveSegments : 12,
        r = void 0 !== a.steps ? a.steps : 1,
        u = void 0 !== a.depth ? a.depth : 100,
        w = void 0 !== a.bevelEnabled ? a.bevelEnabled : !0,
        v = void 0 !== a.bevelThickness ? a.bevelThickness : 6,
        z = void 0 !== a.bevelSize ? a.bevelSize : v - 2,
        x = void 0 !== a.bevelOffset ? a.bevelOffset : 0,
        y = void 0 !== a.bevelSegments ? a.bevelSegments : 3,
        C = a.extrudePath,
        L = void 0 !== a.UVGenerator ? a.UVGenerator : Dk
      void 0 !== a.amount &&
        (console.warn('THREE.Extrude_0x2: amount has been renamed to depth.'),
        (u = a.amount))
      var E,
        G = !1,
        H,
        Q,
        za,
        I
      C &&
        ((E = C.getSpacedPoints(r)),
        (G = !0),
        (w = !1),
        (H = C.computeFrenetFrames(r, !1)),
        (Q = new p()),
        (za = new p()),
        (I = new p()))
      w || (x = z = v = y = 0)
      b = b.extractPoints(n)
      var C = b.shape,
        O = b.holes
      if (!Nb.isClockWise(C))
        for (C = C.reverse(), b = 0, n = O.length; b < n; b++) {
          var N = O[b]
          Nb.isClockWise(N) && (O[b] = N.reverse())
        }
      var R = Nb.triangulateShape(C, O),
        P = C
      b = 0
      for (n = O.length; b < n; b++) C = C.concat(O[b])
      var X = C.length,
        V = R.length
      b = []
      for (var n = 0, N = P.length, Y = N - 1, S = n + 1; n < N; n++, Y++, S++)
        Y === N && (Y = 0), S === N && (S = 0), (b[n] = l(P[n], P[Y], P[S]))
      for (var n = [], N = b.concat(), S = 0, T = O.length; S < T; S++) {
        for (
          var U = O[S], Y = [], Z = 0, ba = U.length, ca = ba - 1, da = Z + 1;
          Z < ba;
          Z++, ca++, da++
        )
          ca === ba && (ca = 0),
            da === ba && (da = 0),
            (Y[Z] = l(U[Z], U[ca], U[da]))
        n.push(Y)
        N = N.concat(Y)
      }
      for (S = 0; S < y; S++) {
        Y = S / y
        T = v * Math.cos((Y * Math.PI) / 2)
        U = z * Math.sin((Y * Math.PI) / 2) + x
        Y = 0
        for (Z = P.length; Y < Z; Y++)
          (ba = c(P[Y], b[Y], U)), f(ba.x, ba.y, -T)
        Z = 0
        for (ba = O.length; Z < ba; Z++)
          for (var ca = O[Z], Y = n[Z], da = 0, ea = ca.length; da < ea; da++) {
            var fa = c(ca[da], Y[da], U)
            f(fa.x, fa.y, -T)
          }
      }
      Y = z + x
      for (S = 0; S < X; S++)
        (T = w ? c(C[S], N[S], Y) : C[S]),
          G
            ? (za.copy(H.normals[0]).multiplyScalar(T.x),
              Q.copy(H.binormals[0]).multiplyScalar(T.y),
              I.copy(E[0]).add(za).add(Q),
              f(I.x, I.y, I.z))
            : f(T.x, T.y, 0)
      for (S = 1; S <= r; S++)
        for (T = 0; T < X; T++)
          (U = w ? c(C[T], N[T], Y) : C[T]),
            G
              ? (za.copy(H.normals[S]).multiplyScalar(U.x),
                Q.copy(H.binormals[S]).multiplyScalar(U.y),
                I.copy(E[S]).add(za).add(Q),
                f(I.x, I.y, I.z))
              : f(U.x, U.y, (u / r) * S)
      for (H = y - 1; 0 <= H; H--) {
        za = H / y
        Q = v * Math.cos((za * Math.PI) / 2)
        za = z * Math.sin((za * Math.PI) / 2) + x
        I = 0
        for (C = P.length; I < C; I++)
          (N = c(P[I], b[I], za)), f(N.x, N.y, u + Q)
        I = 0
        for (C = O.length; I < C; I++)
          for (N = O[I], Y = n[I], S = 0, T = N.length; S < T; S++)
            (U = c(N[S], Y[S], za)),
              G ? f(U.x, U.y + E[r - 1].y, E[r - 1].x + Q) : f(U.x, U.y, u + Q)
      }
      ;(function () {
        var a = e.length / 3
        if (w) {
          for (var b = 0 * X, c = 0; c < V; c++) {
            var h = R[c]
            t(h[2] + b, h[1] + b, h[0] + b)
          }
          b = X * (r + 2 * y)
          for (c = 0; c < V; c++) (h = R[c]), t(h[0] + b, h[1] + b, h[2] + b)
        } else {
          for (b = 0; b < V; b++) (c = R[b]), t(c[2], c[1], c[0])
          for (b = 0; b < V; b++)
            (c = R[b]), t(c[0] + X * r, c[1] + X * r, c[2] + X * r)
        }
        d.addGroup(a, e.length / 3 - a, 0)
      })()
      ;(function () {
        var a = e.length / 3,
          b = 0
        q(P, b)
        for (var b = b + P.length, c = 0, h = O.length; c < h; c++) {
          var l = O[c]
          q(l, b)
          b += l.length
        }
        d.addGroup(a, e.length / 3 - a, 1)
      })()
    }
    I.call(this)
    this.type = 'Extrude_0x2'
    this.parameters = { shapes: c, options: a }
    c = Array.isArray(c) ? c : [c]
    for (var d = this, e = [], h = [], l = 0, q = c.length; l < q; l++) b(c[l])
    this.setAttribute('position', new E(e, 3))
    this.setAttribute('uv', new E(h, 2))
    this.computeVertexNormals()
  }
  function ai(c, a, b) {
    b.shapes = []
    if (Array.isArray(c))
      for (var d = 0, e = c.length; d < e; d++) b.shapes.push(c[d].uuid)
    else b.shapes.push(c.uuid)
    void 0 !== a.extrudePath && (b.options.extrudePath = a.extrudePath.toJSON())
    return b
  }
  function oe(c, a) {
    V.call(this)
    this.type = 'Text_0x6'
    this.parameters = { text: c, parameters: a }
    this.from_0x2(new nd(c, a))
    this.mergeVertices()
  }
  function nd(c, a) {
    a = a || {}
    var b = a.font
    if (!b || !b.isFont)
      return (
        console.error(
          'THREE.Text_0x6: font parameter is not an instance of THREE.Font.'
        ),
        new V()
      )
    b = b.generateShapes(c, a.size)
    a.depth = void 0 !== a.height ? a.height : 50
    void 0 === a.bevelThickness && (a.bevelThickness = 10)
    void 0 === a.bevelSize && (a.bevelSize = 8)
    void 0 === a.bevelEnabled && (a.bevelEnabled = !1)
    Bb.call(this, b, a)
    this.type = 'Text_0x2'
  }
  function pe(c, a, b, d, e, h, l) {
    V.call(this)
    this.type = 'Sphere_0x6'
    this.parameters = {
      radius: c,
      widthSegments: a,
      heightSegments: b,
      phiStart: d,
      phiLength: e,
      thetaStart: h,
      thetaLength: l,
    }
    this.from_0x2(new Bc(c, a, b, d, e, h, l))
    this.mergeVertices()
  }
  function Bc(c, a, b, d, e, h, l) {
    I.call(this)
    this.type = 'Sphere_0x2'
    this.parameters = {
      radius: c,
      widthSegments: a,
      heightSegments: b,
      phiStart: d,
      phiLength: e,
      thetaStart: h,
      thetaLength: l,
    }
    c = c || 1
    a = Math.max(3, Math.floor(a) || 8)
    b = Math.max(2, Math.floor(b) || 6)
    d = void 0 !== d ? d : 0
    e = void 0 !== e ? e : 2 * Math.PI
    h = void 0 !== h ? h : 0
    l = void 0 !== l ? l : Math.PI
    for (
      var q = Math.min(h + l, Math.PI),
        t = 0,
        f = [],
        g = new p(),
        k = new p(),
        D = [],
        m = [],
        n = [],
        r = [],
        u = 0;
      u <= b;
      u++
    ) {
      var w = [],
        v = u / b,
        z = 0
      0 == u && 0 == h
        ? (z = 0.5 / a)
        : u == b && q == Math.PI && (z = -0.5 / a)
      for (var x = 0; x <= a; x++) {
        var y = x / a
        g.x = -c * Math.cos(d + y * e) * Math.sin(h + v * l)
        g.y = c * Math.cos(h + v * l)
        g.z = c * Math.sin(d + y * e) * Math.sin(h + v * l)
        m.push(g.x, g.y, g.z)
        k.copy(g).normalize()
        n.push(k.x, k.y, k.z)
        r.push(y + z, 1 - v)
        w.push(t++)
      }
      f.push(w)
    }
    for (c = 0; c < b; c++)
      for (d = 0; d < a; d++)
        (e = f[c][d + 1]),
          (l = f[c][d]),
          (t = f[c + 1][d]),
          (g = f[c + 1][d + 1]),
          (0 !== c || 0 < h) && D.push(e, l, g),
          (c !== b - 1 || q < Math.PI) && D.push(l, t, g)
    this.setIndex(D)
    this.setAttribute('position', new E(m, 3))
    this.setAttribute('normal', new E(n, 3))
    this.setAttribute('uv', new E(r, 2))
  }
  function qe(c, a, b, d, e, h) {
    V.call(this)
    this.type = 'Ring_0x6'
    this.parameters = {
      innerRadius: c,
      outerRadius: a,
      thetaSegments: b,
      phiSegments: d,
      thetaStart: e,
      thetaLength: h,
    }
    this.from_0x2(new od(c, a, b, d, e, h))
    this.mergeVertices()
  }
  function od(c, a, b, d, e, h) {
    I.call(this)
    this.type = 'Ring_0x2'
    this.parameters = {
      innerRadius: c,
      outerRadius: a,
      thetaSegments: b,
      phiSegments: d,
      thetaStart: e,
      thetaLength: h,
    }
    c = c || 0.5
    a = a || 1
    e = void 0 !== e ? e : 0
    h = void 0 !== h ? h : 2 * Math.PI
    b = void 0 !== b ? Math.max(3, b) : 8
    d = void 0 !== d ? Math.max(1, d) : 1
    var l = [],
      q = [],
      t = [],
      f = [],
      g = c
    c = (a - c) / d
    for (var k = new p(), D = new B(), m = 0; m <= d; m++) {
      for (var n = 0; n <= b; n++) {
        var r = e + (n / b) * h
        k.x = g * Math.cos(r)
        k.y = g * Math.sin(r)
        q.push(k.x, k.y, k.z)
        t.push(0, 0, 1)
        D.x = (k.x / a + 1) / 2
        D.y = (k.y / a + 1) / 2
        f.push(D.x, D.y)
      }
      g += c
    }
    for (a = 0; a < d; a++)
      for (e = a * (b + 1), h = 0; h < b; h++)
        (g = h + e),
          (c = g + b + 1),
          (k = g + b + 2),
          (D = g + 1),
          l.push(g, c, D),
          l.push(c, k, D)
    this.setIndex(l)
    this.setAttribute('position', new E(q, 3))
    this.setAttribute('normal', new E(t, 3))
    this.setAttribute('uv', new E(f, 2))
  }
  function re(c, a, b, d) {
    V.call(this)
    this.type = 'Lathe_0x6'
    this.parameters = { points: c, segments: a, phiStart: b, phiLength: d }
    this.from_0x2(new pd(c, a, b, d))
    this.mergeVertices()
  }
  function pd(c, a, b, d) {
    I.call(this)
    this.type = 'Lathe_0x2'
    this.parameters = { points: c, segments: a, phiStart: b, phiLength: d }
    a = Math.floor(a) || 12
    b = b || 0
    d = d || 2 * Math.PI
    d = ea.clamp(d, 0, 2 * Math.PI)
    for (
      var e = [], h = [], l = [], q = 1 / a, f = new p(), g = new B(), k = 0;
      k <= a;
      k++
    )
      for (
        var m = b + k * q * d, D = Math.sin(m), m = Math.cos(m), n = 0;
        n <= c.length - 1;
        n++
      )
        (f.x = c[n].x * D),
          (f.y = c[n].y),
          (f.z = c[n].x * m),
          h.push(f.x, f.y, f.z),
          (g.x = k / a),
          (g.y = n / (c.length - 1)),
          l.push(g.x, g.y)
    for (b = 0; b < a; b++)
      for (q = 0; q < c.length - 1; q++)
        (f = q + b * c.length),
          (g = f + c.length),
          (k = f + c.length + 1),
          (D = f + 1),
          e.push(f, g, D),
          e.push(g, k, D)
    this.setIndex(e)
    this.setAttribute('position', new E(h, 3))
    this.setAttribute('uv', new E(l, 2))
    this.computeVertexNormals()
    if (d === 2 * Math.PI)
      for (
        d = this.attributes.normal.array,
          e = new p(),
          h = new p(),
          l = new p(),
          a = a * c.length * 3,
          q = b = 0;
        b < c.length;
        b++, q += 3
      )
        (e.x = d[q + 0]),
          (e.y = d[q + 1]),
          (e.z = d[q + 2]),
          (h.x = d[a + q + 0]),
          (h.y = d[a + q + 1]),
          (h.z = d[a + q + 2]),
          l.addVectors(e, h).normalize(),
          (d[q + 0] = d[a + q + 0] = l.x),
          (d[q + 1] = d[a + q + 1] = l.y),
          (d[q + 2] = d[a + q + 2] = l.z)
  }
  function Cc(c, a) {
    V.call(this)
    this.type = 'Shape_0x6'
    'object' === typeof a &&
      (console.warn('THREE.Shape_0x6: Options parameter has been removed.'),
      (a = a.curveSegments))
    this.parameters = { shapes: c, curveSegments: a }
    this.from_0x2(new Dc(c, a))
    this.mergeVertices()
  }
  function Dc(c, a) {
    function b(b) {
      var c = e.length / 3,
        q = b.extractPoints(a)
      b = q.shape
      var t = q.holes
      !1 === Nb.isClockWise(b) && (b = b.reverse())
      for (var q = 0, g = t.length; q < g; q++) {
        var A = t[q]
        !0 === Nb.isClockWise(A) && (t[q] = A.reverse())
      }
      q = Nb.triangulateShape(b, t)
      g = 0
      for (A = t.length; g < A; g++) b = b.concat(t[g])
      t = 0
      for (g = b.length; t < g; t++)
        (A = b[t]), e.push(A.x, A.y, 0), h.push(0, 0, 1), l.push(A.x, A.y)
      b = 0
      for (t = q.length; b < t; b++)
        (g = q[b]), d.push(g[0] + c, g[1] + c, g[2] + c), (f += 3)
    }
    I.call(this)
    this.type = 'Shape_0x2'
    this.parameters = { shapes: c, curveSegments: a }
    a = a || 12
    var d = [],
      e = [],
      h = [],
      l = [],
      q = 0,
      f = 0
    if (!1 === Array.isArray(c)) b(c)
    else
      for (var g = 0; g < c.length; g++)
        b(c[g]), this.addGroup(q, f, g), (q += f), (f = 0)
    this.setIndex(d)
    this.setAttribute('position', new E(e, 3))
    this.setAttribute('normal', new E(h, 3))
    this.setAttribute('uv', new E(l, 2))
  }
  function bi(c, a) {
    a.shapes = []
    if (Array.isArray(c))
      for (var b = 0, d = c.length; b < d; b++) a.shapes.push(c[b].uuid)
    else a.shapes.push(c.uuid)
    return a
  }
  function qd(c, a) {
    I.call(this)
    this.type = 'Edges_0x6'
    this.parameters = { thresholdAngle: a }
    var b = [],
      d = Math.cos(ea.DEG2RAD * (void 0 !== a ? a : 1)),
      e = [0, 0],
      h = {},
      l,
      q,
      f = ['a', 'b', 'c'],
      g
    c.is_0x2 ? ((g = new V()), g.from_0x2(c)) : (g = c.clone())
    g.mergeVertices()
    g.computeFaceNormals()
    var k = g.vertices
    g = g.faces
    for (var m = 0, D = g.length; m < D; m++)
      for (var n = g[m], p = 0; 3 > p; p++)
        (l = n[f[p]]),
          (q = n[f[(p + 1) % 3]]),
          (e[0] = Math.min(l, q)),
          (e[1] = Math.max(l, q)),
          (l = e[0] + ',' + e[1]),
          void 0 === h[l]
            ? (h[l] = { index1: e[0], index2: e[1], face1: m, face2: void 0 })
            : (h[l].face2 = m)
    for (l in h)
      if (
        ((e = h[l]),
        void 0 === e.face2 || g[e.face1].normal.dot(g[e.face2].normal) <= d)
      )
        (f = k[e.index1]),
          b.push(f.x, f.y, f.z),
          (f = k[e.index2]),
          b.push(f.x, f.y, f.z)
    this.setAttribute('position', new E(b, 3))
  }
  function Ec(c, a, b, d, e, h, l, q) {
    V.call(this)
    this.type = 'Cylinder_0x6'
    this.parameters = {
      radiusTop: c,
      radiusBottom: a,
      height: b,
      radialSegments: d,
      heightSegments: e,
      openEnded: h,
      thetaStart: l,
      thetaLength: q,
    }
    this.from_0x2(new Ob(c, a, b, d, e, h, l, q))
    this.mergeVertices()
  }
  function Ob(c, a, b, d, e, h, l, q) {
    function f(b) {
      for (
        var e = r,
          h = new B(),
          f = new p(),
          t = 0,
          A = !0 === b ? c : a,
          K = !0 === b ? 1 : -1,
          M = 1;
        M <= d;
        M++
      )
        m.push(0, w * K, 0), D.push(0, K, 0), n.push(0.5, 0.5), r++
      for (var M = r, J = 0; J <= d; J++) {
        var u = (J / d) * q + l,
          F = Math.cos(u),
          u = Math.sin(u)
        f.x = A * u
        f.y = w * K
        f.z = A * F
        m.push(f.x, f.y, f.z)
        D.push(0, K, 0)
        h.x = 0.5 * F + 0.5
        h.y = 0.5 * u * K + 0.5
        n.push(h.x, h.y)
        r++
      }
      for (h = 0; h < d; h++)
        (f = e + h),
          (A = M + h),
          !0 === b ? k.push(A, A + 1, f) : k.push(A + 1, A, f),
          (t += 3)
      g.addGroup(v, t, !0 === b ? 1 : 2)
      v += t
    }
    I.call(this)
    this.type = 'Cylinder_0x2'
    this.parameters = {
      radiusTop: c,
      radiusBottom: a,
      height: b,
      radialSegments: d,
      heightSegments: e,
      openEnded: h,
      thetaStart: l,
      thetaLength: q,
    }
    var g = this
    c = void 0 !== c ? c : 1
    a = void 0 !== a ? a : 1
    b = b || 1
    d = Math.floor(d) || 8
    e = Math.floor(e) || 1
    h = void 0 !== h ? h : !1
    l = void 0 !== l ? l : 0
    q = void 0 !== q ? q : 2 * Math.PI
    var k = [],
      m = [],
      D = [],
      n = [],
      r = 0,
      u = [],
      w = b / 2,
      v = 0
    ;(function () {
      for (
        var h = new p(), f = new p(), t = 0, A = (a - c) / b, K = 0;
        K <= e;
        K++
      ) {
        for (
          var M = [], J = K / e, F = J * (a - c) + c, aa = 0;
          aa <= d;
          aa++
        ) {
          var z = aa / d,
            x = z * q + l,
            y = Math.sin(x),
            x = Math.cos(x)
          f.x = F * y
          f.y = -J * b + w
          f.z = F * x
          m.push(f.x, f.y, f.z)
          h.set(y, A, x).normalize()
          D.push(h.x, h.y, h.z)
          n.push(z, 1 - J)
          M.push(r++)
        }
        u.push(M)
      }
      for (h = 0; h < d; h++)
        for (f = 0; f < e; f++)
          (A = u[f + 1][h]),
            (K = u[f + 1][h + 1]),
            (M = u[f][h + 1]),
            k.push(u[f][h], A, M),
            k.push(A, K, M),
            (t += 6)
      g.addGroup(v, t, 0)
      v += t
    })()
    !1 === h && (0 < c && f(!0), 0 < a && f(!1))
    this.setIndex(k)
    this.setAttribute('position', new E(m, 3))
    this.setAttribute('normal', new E(D, 3))
    this.setAttribute('uv', new E(n, 2))
  }
  function se(c, a, b, d, e, h, l) {
    Ec.call(this, 0, c, a, b, d, e, h, l)
    this.type = 'Cone_0x6'
    this.parameters = {
      radius: c,
      height: a,
      radialSegments: b,
      heightSegments: d,
      openEnded: e,
      thetaStart: h,
      thetaLength: l,
    }
  }
  function te(c, a, b, d, e, h, l) {
    Ob.call(this, 0, c, a, b, d, e, h, l)
    this.type = 'Cone_0x2'
    this.parameters = {
      radius: c,
      height: a,
      radialSegments: b,
      heightSegments: d,
      openEnded: e,
      thetaStart: h,
      thetaLength: l,
    }
  }
  function ue(c, a, b, d) {
    V.call(this)
    this.type = 'Circle_0x6'
    this.parameters = { radius: c, segments: a, thetaStart: b, thetaLength: d }
    this.from_0x2(new rd(c, a, b, d))
    this.mergeVertices()
  }
  function rd(c, a, b, d) {
    I.call(this)
    this.type = 'Circle_0x2'
    this.parameters = { radius: c, segments: a, thetaStart: b, thetaLength: d }
    c = c || 1
    a = void 0 !== a ? Math.max(3, a) : 8
    b = void 0 !== b ? b : 0
    d = void 0 !== d ? d : 2 * Math.PI
    var e = [],
      h = [],
      l = [],
      q = [],
      f = new p(),
      g = new B()
    h.push(0, 0, 0)
    l.push(0, 0, 1)
    q.push(0.5, 0.5)
    for (var k = 0, m = 3; k <= a; k++, m += 3) {
      var D = b + (k / a) * d
      f.x = c * Math.cos(D)
      f.y = c * Math.sin(D)
      h.push(f.x, f.y, f.z)
      l.push(0, 0, 1)
      g.x = (h[m] / c + 1) / 2
      g.y = (h[m + 1] / c + 1) / 2
      q.push(g.x, g.y)
    }
    for (c = 1; c <= a; c++) e.push(c, c + 1, 0)
    this.setIndex(e)
    this.setAttribute('position', new E(h, 3))
    this.setAttribute('normal', new E(l, 3))
    this.setAttribute('uv', new E(q, 2))
  }
  function Fc(c) {
    y.call(this)
    this.type = 'ShadowMaterial'
    this.color = new H(0)
    this.transparent = !0
    this.setValues(c)
  }
  function Pb(c) {
    wa.call(this, c)
    this.type = 'RawShaderMaterial'
  }
  function Cb(c) {
    y.call(this)
    this.defines = { STANDARD: '' }
    this.type = 'naStandardMaterial'
    this.color = new H(16777215)
    this.roughness = 1
    this.metalness = 0
    this.lightMap = this.map = null
    this.lightMapIntensity = 1
    this.aoMap = null
    this.aoMapIntensity = 1
    this.emissive = new H(0)
    this.emissiveIntensity = 1
    this.bumpMap = this.emissiveMap = null
    this.bumpScale = 1
    this.normalMap = null
    this.normalMapType = 0
    this.normalScale = new B(1, 1)
    this.displacementMap = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.envMap = this.alphaMap = this.metalnessMap = this.roughnessMap = null
    this.envMapIntensity = 1
    this.refractionRatio = 0.98
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.wireframeLinejoin = this.wireframeLinecap = 'round'
    this.vertexTangents = this.morphNormals = this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function jc(c) {
    Cb.call(this)
    this.defines = { STANDARD: '', PHYSICAL: '' }
    this.type = 'naPhysicalMaterial'
    this.clearcoat = 0
    this.clearcoatMap = null
    this.clearcoatRoughness = 0
    this.clearcoatRoughnessMap = null
    this.clearcoatNormalScale = new B(1, 1)
    this.clearcoatNormalMap = null
    this.reflectivity = 0.5
    this.sheen = null
    this.transmission = 0
    this.transmissionMap = null
    this.setValues(c)
  }
  function kc(c) {
    y.call(this)
    this.type = 'naPhongMaterial'
    this.color = new H(16777215)
    this.specular = new H(1118481)
    this.shininess = 30
    this.lightMap = this.map = null
    this.lightMapIntensity = 1
    this.aoMap = null
    this.aoMapIntensity = 1
    this.emissive = new H(0)
    this.emissiveIntensity = 1
    this.bumpMap = this.emissiveMap = null
    this.bumpScale = 1
    this.normalMap = null
    this.normalMapType = 0
    this.normalScale = new B(1, 1)
    this.displacementMap = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.envMap = this.alphaMap = this.specularMap = null
    this.combine = 0
    this.reflectivity = 1
    this.refractionRatio = 0.98
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.wireframeLinejoin = this.wireframeLinecap = 'round'
    this.morphNormals = this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function Gc(c) {
    y.call(this)
    this.defines = { TOON: '' }
    this.type = 'naToonMaterial'
    this.color = new H(16777215)
    this.lightMap = this.gradientMap = this.map = null
    this.lightMapIntensity = 1
    this.aoMap = null
    this.aoMapIntensity = 1
    this.emissive = new H(0)
    this.emissiveIntensity = 1
    this.bumpMap = this.emissiveMap = null
    this.bumpScale = 1
    this.normalMap = null
    this.normalMapType = 0
    this.normalScale = new B(1, 1)
    this.displacementMap = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.alphaMap = null
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.wireframeLinejoin = this.wireframeLinecap = 'round'
    this.morphNormals = this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function Hc(c) {
    y.call(this)
    this.type = 'naNormalMaterial'
    this.bumpMap = null
    this.bumpScale = 1
    this.normalMap = null
    this.normalMapType = 0
    this.normalScale = new B(1, 1)
    this.displacementMap = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.morphNormals = this.morphTargets = this.skinning = this.fog = !1
    this.setValues(c)
  }
  function Ic(c) {
    y.call(this)
    this.type = 'q7'
    this.color = new H(16777215)
    this.lightMap = this.map = null
    this.lightMapIntensity = 1
    this.aoMap = null
    this.aoMapIntensity = 1
    this.emissive = new H(0)
    this.emissiveIntensity = 1
    this.envMap = this.alphaMap = this.specularMap = this.emissiveMap = null
    this.combine = 0
    this.reflectivity = 1
    this.refractionRatio = 0.98
    this.wireframe = !1
    this.wireframeLinewidth = 1
    this.wireframeLinejoin = this.wireframeLinecap = 'round'
    this.morphNormals = this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function Jc(c) {
    y.call(this)
    this.defines = { MATCAP: '' }
    this.type = 'naMatcapMaterial'
    this.color = new H(16777215)
    this.bumpMap = this.map = this.matcap = null
    this.bumpScale = 1
    this.normalMap = null
    this.normalMapType = 0
    this.normalScale = new B(1, 1)
    this.displacementMap = null
    this.displacementScale = 1
    this.displacementBias = 0
    this.alphaMap = null
    this.morphNormals = this.morphTargets = this.skinning = !1
    this.setValues(c)
  }
  function Kc(c) {
    ma.call(this)
    this.type = 'LineDashedMaterial'
    this.scale = 1
    this.dashSize = 3
    this.gapSize = 1
    this.setValues(c)
  }
  function ib(c, a, b, d) {
    this.parameterPositions = c
    this._cachedIndex = 0
    this.resultBuffer = void 0 !== d ? d : new a.constructor(b)
    this.sampleValues = a
    this.valueSize = b
  }
  function kf(c, a, b, d) {
    ib.call(this, c, a, b, d)
    this._offsetNext = this._weightNext = this._offsetPrev = this._weightPrev = -0
  }
  function ve(c, a, b, d) {
    ib.call(this, c, a, b, d)
  }
  function lf(c, a, b, d) {
    ib.call(this, c, a, b, d)
  }
  function Ma(c, a, b, d) {
    if (void 0 === c) throw Error('THREE.KeyframeTrack: track name is undefined')
    if (void 0 === a || 0 === a.length)
      throw Error('THREE.KeyframeTrack: no keyframes in track named ' + c)
    this.name = c
    this.times = xa.convertArray(a, this.TimeBufferType)
    this.values = xa.convertArray(b, this.ValueBufferType)
    this.setInterpolation(d || this.DefaultInterpolation)
  }
  function mf(c, a, b) {
    Ma.call(this, c, a, b)
  }
  function nf(c, a, b, d) {
    Ma.call(this, c, a, b, d)
  }
  function sd(c, a, b, d) {
    Ma.call(this, c, a, b, d)
  }
  function of(c, a, b, d) {
    ib.call(this, c, a, b, d)
  }
  function we(c, a, b, d) {
    Ma.call(this, c, a, b, d)
  }
  function pf(c, a, b, d) {
    Ma.call(this, c, a, b, d)
  }
  function td(c, a, b, d) {
    Ma.call(this, c, a, b, d)
  }
  function mb(c, a, b, d) {
    this.name = c
    this.tracks = b
    this.duration = void 0 !== a ? a : -1
    this.blendMode = void 0 !== d ? d : 2500
    this.uuid = ea.generateUUID()
    0 > this.duration && this.resetDuration()
  }
  function Ek(c) {
    switch (c.toLowerCase()) {
      case 'scalar':
      case 'double':
      case 'float':
      case 'number':
      case 'integer':
        return sd
      case 'vector':
      case 'vector2':
      case 'vector3':
      case 'vector4':
        return td
      case 'color':
        return nf
      case 'quaternion':
        return we
      case 'bool':
      case 'boolean':
        return mf
      case 'string':
        return pf
    }
    throw Error('THREE.KeyframeTrack: Unsupported typeName: ' + c)
  }
  function Fk(c) {
    if (void 0 === c.type)
      throw Error('THREE.KeyframeTrack: track type undefined, can not parse')
    var a = Ek(c.type)
    if (void 0 === c.times) {
      var b = [],
        d = []
      xa.flattenJSON(c.keys, b, d, 'value')
      c.times = b
      c.values = d
    }
    return void 0 !== a.parse
      ? a.parse(c)
      : new a(c.name, c.times, c.values, c.interpolation)
  }
  function zg(c, a, b) {
    var d = this,
      e = !1,
      h = 0,
      l = 0,
      q = void 0,
      f = []
    this.onStart = void 0
    this.onLoad = c
    this.onProgress = a
    this.onError = b
    this.itemStart = function (a) {
      l++
      if (!1 === e && void 0 !== d.onStart) d.onStart(a, h, l)
      e = !0
    }
    this.itemEnd = function (a) {
      h++
      if (void 0 !== d.onProgress) d.onProgress(a, h, l)
      if (h === l && ((e = !1), void 0 !== d.onLoad)) d.onLoad()
    }
    this.itemError = function (a) {
      if (void 0 !== d.onError) d.onError(a)
    }
    this.resolveURL = function (a) {
      return q ? q(a) : a
    }
    this.setURLModifier = function (a) {
      q = a
      return this
    }
    this.addHandler = function (a, b) {
      f.push(a, b)
      return this
    }
    this.removeHandler = function (a) {
      a = f.indexOf(a)
      ;-1 !== a && f.splice(a, 2)
      return this
    }
    this.getHandler = function (a) {
      for (var b = 0, c = f.length; b < c; b += 2) {
        var d = f[b],
          e = f[b + 1]
        d.global && (d.lastIndex = 0)
        if (d.test(a)) return e
      }
      return null
    }
  }
  function oa(c) {
    this.manager = void 0 !== c ? c : ci
    this.crossOrigin = 'anonymous'
    this.resourcePath = this.path = ''
    this.requestHeader = {}
  }
  function nb(c) {
    oa.call(this, c)
  }
  function Ag(c) {
    oa.call(this, c)
  }
  function Bg(c) {
    oa.call(this, c)
  }
  function ud(c) {
    oa.call(this, c)
  }
  function qf(c) {
    oa.call(this, c)
  }
  function rf(c) {
    oa.call(this, c)
  }
  function sf(c) {
    oa.call(this, c)
  }
  function T() {
    this.type = 'Curve'
    this.arcLengthDivisions = 200
  }
  function jb(c, a, b, d, e, h, l, q) {
    T.call(this)
    this.type = 'EllipseCurve'
    this.aX = c || 0
    this.aY = a || 0
    this.xRadius = b || 1
    this.yRadius = d || 1
    this.aStartAngle = e || 0
    this.aEndAngle = h || 2 * Math.PI
    this.aClockwise = l || !1
    this.aRotation = q || 0
  }
  function vd(c, a, b, d, e, h) {
    jb.call(this, c, a, b, b, d, e, h)
    this.type = 'ArcCurve'
  }
  function Cg() {
    var c = 0,
      a = 0,
      b = 0,
      d = 0
    return {
      initCatmullRom: function (e, h, l, q, f) {
        e = f * (l - e)
        q = f * (q - h)
        c = h
        a = e
        b = -3 * h + 3 * l - 2 * e - q
        d = 2 * h - 2 * l + e + q
      },
      initNonuniformCatmullRom: function (e, h, l, q, f, g, k) {
        e = ((h - e) / f - (l - e) / (f + g) + (l - h) / g) * g
        q = ((l - h) / g - (q - h) / (g + k) + (q - l) / k) * g
        c = h
        a = e
        b = -3 * h + 3 * l - 2 * e - q
        d = 2 * h - 2 * l + e + q
      },
      calc: function (e) {
        var h = e * e
        return c + a * e + b * h + d * h * e
      },
    }
  }
  function Sa(c, a, b, d) {
    T.call(this)
    this.type = 'CatmullRomCurve3'
    this.points = c || []
    this.closed = a || !1
    this.curveType = b || 'centripetal'
    this.tension = void 0 !== d ? d : 0.5
  }
  function di(c, a, b, d, e) {
    a = 0.5 * (d - a)
    e = 0.5 * (e - b)
    var h = c * c
    return (
      (2 * b - 2 * d + a + e) * c * h +
      (-3 * b + 3 * d - 2 * a - e) * h +
      a * c +
      b
    )
  }
  function xe(c, a, b, d) {
    var e = 1 - c
    return e * e * a + 2 * (1 - c) * c * b + c * c * d
  }
  function ye(c, a, b, d, e) {
    var h = 1 - c,
      l = 1 - c
    return (
      h * h * h * a +
      3 * l * l * c * b +
      3 * (1 - c) * c * c * d +
      c * c * c * e
    )
  }
  function sb(c, a, b, d) {
    T.call(this)
    this.type = 'CubicBezierCurve'
    this.v0 = c || new B()
    this.v1 = a || new B()
    this.v2 = b || new B()
    this.v3 = d || new B()
  }
  function Db(c, a, b, d) {
    T.call(this)
    this.type = 'CubicBezierCurve3'
    this.v0 = c || new p()
    this.v1 = a || new p()
    this.v2 = b || new p()
    this.v3 = d || new p()
  }
  function cb(c, a) {
    T.call(this)
    this.type = 'LineCurve'
    this.v1 = c || new B()
    this.v2 = a || new B()
  }
  function tb(c, a) {
    T.call(this)
    this.type = 'LineCurve3'
    this.v1 = c || new p()
    this.v2 = a || new p()
  }
  function ub(c, a, b) {
    T.call(this)
    this.type = 'QuadraticBezierCurve'
    this.v0 = c || new B()
    this.v1 = a || new B()
    this.v2 = b || new B()
  }
  function Eb(c, a, b) {
    T.call(this)
    this.type = 'QuadraticBezierCurve3'
    this.v0 = c || new p()
    this.v1 = a || new p()
    this.v2 = b || new p()
  }
  function vb(c) {
    T.call(this)
    this.type = 'SplineCurve'
    this.points = c || []
  }
  function Qb() {
    T.call(this)
    this.type = 'CurvePath'
    this.curves = []
    this.autoClose = !1
  }
  function wb(c) {
    Qb.call(this)
    this.type = 'Path'
    this.currentPoint = new B()
    c && this.setFromPoints(c)
  }
  function lc(c) {
    wb.call(this, c)
    this.uuid = ea.generateUUID()
    this.type = 'Shape'
    this.holes = []
  }
  function ra(c, a) {
    n.call(this)
    this.type = 'Light'
    this.color = new H(c)
    this.intensity = void 0 !== a ? a : 1
    this.receiveShadow = void 0
  }
  function tf(c, a, b) {
    ra.call(this, c, b)
    this.type = 'HemisphereLight'
    this.castShadow = void 0
    this.position.copy(n.DefaultUp)
    this.updateMatrix()
    this.groundColor = new H(a)
  }
  function Fb(c) {
    this.camera = c
    this.normalBias = this.bias = 0
    this.radius = 1
    this.mapSize = new B(512, 512)
    this.mapPass = this.map = null
    this.matrix = new O()
    this.autoUpdate = !0
    this.needsUpdate = !1
    this._frustum = new $a()
    this._frameExtents = new B(1, 1)
    this._viewportCount = 1
    this._viewports = [new P(0, 0, 1, 1)]
  }
  function Dg() {
    Fb.call(this, new la(50, 1, 0.5, 500))
  }
  function uf(c, a, b, d, e, h) {
    ra.call(this, c, a)
    this.type = 'SpotLight'
    this.position.copy(n.DefaultUp)
    this.updateMatrix()
    this.target = new n()
    Object.defineProperty(this, 'power', {
      get: function () {
        return this.intensity * Math.PI
      },
      set: function (a) {
        this.intensity = a / Math.PI
      },
    })
    this.distance = void 0 !== b ? b : 0
    this.angle = void 0 !== d ? d : Math.PI / 3
    this.penumbra = void 0 !== e ? e : 0
    this.decay = void 0 !== h ? h : 1
    this.shadow = new Dg()
  }
  function Eg() {
    Fb.call(this, new la(90, 1, 0.5, 500))
    this._frameExtents = new B(4, 2)
    this._viewportCount = 6
    this._viewports = [
      new P(2, 1, 1, 1),
      new P(0, 1, 1, 1),
      new P(3, 1, 1, 1),
      new P(1, 1, 1, 1),
      new P(3, 0, 1, 1),
      new P(1, 0, 1, 1),
    ]
    this._cubeDirections = [
      new p(1, 0, 0),
      new p(-1, 0, 0),
      new p(0, 0, 1),
      new p(0, 0, -1),
      new p(0, 1, 0),
      new p(0, -1, 0),
    ]
    this._cubeUps = [
      new p(0, 1, 0),
      new p(0, 1, 0),
      new p(0, 1, 0),
      new p(0, 1, 0),
      new p(0, 0, 1),
      new p(0, 0, -1),
    ]
  }
  function vf(c, a, b, d) {
    ra.call(this, c, a)
    this.type = 'PointLight'
    Object.defineProperty(this, 'power', {
      get: function () {
        return 4 * this.intensity * Math.PI
      },
      set: function (a) {
        this.intensity = a / (4 * Math.PI)
      },
    })
    this.distance = void 0 !== b ? b : 0
    this.decay = void 0 !== d ? d : 1
    this.shadow = new Eg()
  }
  function wd(c, a, b, d, e, h) {
    ua.call(this)
    this.type = 'OrthographicCamera'
    this.zoom = 1
    this.view = null
    this.left = void 0 !== c ? c : -1
    this.right = void 0 !== a ? a : 1
    this.top = void 0 !== b ? b : 1
    this.bottom = void 0 !== d ? d : -1
    this.near = void 0 !== e ? e : 0.1
    this.far = void 0 !== h ? h : 2e3
    this.updateProjectionMatrix()
  }
  function Fg() {
    Fb.call(this, new wd(-5, 5, 5, -5, 0.5, 500))
  }
  function wf(c, a) {
    ra.call(this, c, a)
    this.type = 'q9'
    this.position.copy(n.DefaultUp)
    this.updateMatrix()
    this.target = new n()
    this.shadow = new Fg()
  }
  function xf(c, a) {
    ra.call(this, c, a)
    this.type = 'q10'
    this.castShadow = void 0
  }
  function yf(c, a, b, d) {
    ra.call(this, c, a)
    this.type = 'RectAreaLight'
    this.width = void 0 !== b ? b : 10
    this.height = void 0 !== d ? d : 10
  }
  function ob(c, a) {
    ra.call(this, void 0, a)
    this.type = 'LightProbe'
    this.sh = void 0 !== c ? c : new Ta()
  }
  function zf(c) {
    oa.call(this, c)
    this.textures = {}
  }
  function ze() {
    I.call(this)
    this.type = 'Instanced_0x2'
    this.instanceCount = Infinity
  }
  function Af(c, a, b, d) {
    'number' === typeof b &&
      ((d = b),
      (b = !1),
      console.error(
        'THREE.Instanced_0x3: The constructor now expects normalized as the third argument.'
      ))
    C.call(this, c, a, b)
    this.meshPerAttribute = d || 1
  }
  function Bf(c) {
    oa.call(this, c)
  }
  function Cf(c) {
    oa.call(this, c)
  }
  function Gg(c) {
    'undefined' === typeof createImageBitmap &&
      console.warn('THREE.ImageBitmapLoader: createImageBitmap() not supported.')
    'undefined' === typeof fetch &&
      console.warn('THREE.ImageBitmapLoader: fetch() not supported.')
    oa.call(this, c)
    this.options = { premultiplyAlpha: 'none' }
  }
  function Hg() {
    this.type = 'ShapePath'
    this.color = new H()
    this.subPaths = []
    this.currentPath = null
  }
  function Ig(c) {
    this.type = 'Font'
    this.data = c
  }
  function Jg(c) {
    oa.call(this, c)
  }
  function Df(c) {
    oa.call(this, c)
  }
  function Kg(c, a, b) {
    ob.call(this, void 0, b)
    c = new H().set(c)
    b = new H().set(a)
    a = new p(c.r, c.g, c.b)
    c = new p(b.r, b.g, b.b)
    b = Math.sqrt(Math.PI)
    var d = b * Math.sqrt(0.75)
    this.sh.coefficients[0].copy(a).add(c).multiplyScalar(b)
    this.sh.coefficients[1].copy(a).sub(c).multiplyScalar(d)
  }
  function Lg(c, a) {
    ob.call(this, void 0, a)
    var b = new H().set(c)
    this.sh.coefficients[0]
      .set(b.r, b.g, b.b)
      .multiplyScalar(2 * Math.sqrt(Math.PI))
  }
  function ei() {
    this.type = 'StereoCamera'
    this.aspect = 1
    this.eyeSep = 0.064
    this.cameraL = new la()
    this.cameraL.layers.enable(1)
    this.cameraL.matrixAutoUpdate = !1
    this.cameraR = new la()
    this.cameraR.layers.enable(2)
    this.cameraR.matrixAutoUpdate = !1
    this._cache = {
      focus: null,
      fov: null,
      aspect: null,
      near: null,
      far: null,
      zoom: null,
      eyeSep: null,
    }
  }
  function xb() {
    n.call(this)
    this.type = 'AudioListener'
    this.context = Mg.getContext()
    this.gain = this.context.createGain()
    this.gain.connect(this.context.destination)
    this.filter = null
    this.timeDelta = 0
    this._clock = new xd()
  }
  function ja(c) {
    n.call(this)
    this.type = 'Audio'
    this.listener = c
    this.context = c.context
    this.gain = this.context.createGain()
    this.gain.connect(c.getInput())
    this.autoplay = !1
    this.buffer = null
    this.detune = 0
    this.loop = !1
    this.offset = this.loopEnd = this.loopStart = 0
    this.duration = void 0
    this.playbackRate = 1
    this.isPlaying = !1
    this.hasPlaybackControl = !0
    this.source = null
    this.sourceType = 'empty'
    this._progress = this._startedAt = 0
    this._connected = !1
    this.filters = []
  }
  function Wa(c) {
    ja.call(this, c)
    this.panner = this.context.createPanner()
    this.panner.panningModel = 'HRTF'
    this.panner.connect(this.gain)
  }
  function Ng(c, a, b) {
    this.binding = c
    this.valueSize = b
    var d
    switch (a) {
      case 'quaternion':
        c = this._slerp
        a = this._slerpAdditive
        d = this._setAdditiveIdentityQuaternion
        this.buffer = new Float64Array(6 * b)
        this._workIndex = 5
        break
      case 'string':
      case 'bool':
        a = c = this._select
        d = this._setAdditiveIdentityOther
        this.buffer = Array(5 * b)
        break
      default:
        ;(c = this._lerp),
          (a = this._lerpAdditive),
          (d = this._setAdditiveIdentityNumeric),
          (this.buffer = new Float64Array(5 * b))
    }
    this._mixBufferRegion = c
    this._mixBufferRegionAdditive = a
    this._setIdentity = d
    this._origIndex = 3
    this._addIndex = 4
    this.referenceCount = this.useCount = this.cumulativeWeightAdditive = this.cumulativeWeight = 0
  }
  function fi(c, a, b) {
    b = b || Ua.parseTrackName(a)
    this._targetGroup = c
    this._bindings = c.subscribe_(a, b)
  }
  function Ua(c, a, b) {
    this.path = a
    this.parsedPath = b || Ua.parseTrackName(a)
    this.node = Ua.findNode(c, this.parsedPath.nodeName) || c
    this.rootNode = c
  }
  function gi() {
    this.uuid = ea.generateUUID()
    this._objects = Array.prototype.slice.call(arguments)
    this.nCachedObjects_ = 0
    var c = {}
    this._indicesByUUID = c
    for (var a = 0, b = arguments.length; a !== b; ++a) c[arguments[a].uuid] = a
    this._paths = []
    this._parsedPaths = []
    this._bindings = []
    this._bindingsIndicesByPath = {}
    var d = this
    this.stats = {
      objects: {
        total: function () {
          return d._objects.length
        },
        inUse: function () {
          return this.total - d.nCachedObjects_
        },
      },
      bindingsPerObject: function () {
        return d._bindings.length
      },
    }
  }
  function Og(c) {
    this._root = c
    this._initMemoryManager()
    this.time = this._accuIndex = 0
    this.timeScale = 1
  }
  function Pg(c, a, b) {
    hb.call(this, c, a)
    this.meshPerAttribute = b || 1
  }
  function Qg(c, a, b, d, e) {
    this.buffer = c
    this.type = a
    this.itemSize = b
    this.elementSize = d
    this.count = e
    this.version = 0
  }
  function Rg(c, a, b, d) {
    this.ray = new pa(c, a)
    this.near = b || 0
    this.far = d || Infinity
    this.camera = null
    this.layers = new Ab()
    this.params = {
      na: {},
      Line: { threshold: 1 },
      LOD: {},
      Points: { threshold: 1 },
      Sprite: {},
    }
    Object.defineProperties(this.params, {
      PointCloud: {
        get: function () {
          console.warn(
            'THREE.rct: params.PointCloud has been renamed to params.Points.'
          )
          return this.Points
        },
      },
    })
  }
  function hi(c, a) {
    return c.distance - a.distance
  }
  function Sg(c, a, b, d) {
    c.layers.test(a.layers) && c.raycast(a, b)
    if (!0 === d) {
      c = c.children
      d = 0
      for (var e = c.length; d < e; d++) Sg(c[d], a, b, !0)
    }
  }
  function Ae(c) {
    n.call(this)
    this.material = c
    this.render = function () {}
    this.hasUvs = this.hasColors = this.hasNormals = this.hasPositions = !1
    this.uvArray = this.colorArray = this.normalArray = this.positionArray = null
    this.count = 0
  }
  function yd(c, a) {
    n.call(this)
    this.light = c
    this.light.updateMatrixWorld()
    this.matrix = c.matrixWorld
    this.matrixAutoUpdate = !1
    this.color = a
    for (
      var b = new I(),
        d = [
          0,
          0,
          0,
          0,
          0,
          1,
          0,
          0,
          0,
          1,
          0,
          1,
          0,
          0,
          0,
          -1,
          0,
          1,
          0,
          0,
          0,
          0,
          1,
          1,
          0,
          0,
          0,
          0,
          -1,
          1,
        ],
        e = 0,
        h = 1;
      32 > e;
      e++, h++
    ) {
      var l = (e / 32) * Math.PI * 2,
        q = (h / 32) * Math.PI * 2
      d.push(Math.cos(l), Math.sin(l), 1, Math.cos(q), Math.sin(q), 1)
    }
    b.setAttribute('position', new E(d, 3))
    d = new ma({ fog: !1, toneMapped: !1 })
    this.cone = new qa(b, d)
    this.add(this.cone)
    this.update()
  }
  function zd(c) {
    for (
      var a = ii(c),
        b = new I(),
        d = [],
        e = [],
        h = new H(0, 0, 1),
        l = new H(0, 1, 0),
        q = 0;
      q < a.length;
      q++
    ) {
      var f = a[q]
      f.parent &&
        f.parent.isBone &&
        (d.push(0, 0, 0),
        d.push(0, 0, 0),
        e.push(h.r, h.g, h.b),
        e.push(l.r, l.g, l.b))
    }
    b.setAttribute('position', new E(d, 3))
    b.setAttribute('color', new E(e, 3))
    d = new ma({
      vertexColors: !0,
      depthTest: !1,
      depthWrite: !1,
      toneMapped: !1,
      transparent: !0,
    })
    qa.call(this, b, d)
    this.type = 'SkeletonHelper'
    this.isSkeletonHelper = !0
    this.root = c
    this.bones = a
    this.matrix = c.matrixWorld
    this.matrixAutoUpdate = !1
  }
  function ii(c) {
    var a = []
    c && c.isBone && a.push(c)
    for (var b = 0; b < c.children.length; b++)
      a.push.apply(a, ii(c.children[b]))
    return a
  }
  function Ad(c, a, b) {
    a = new Bc(a, 4, 2)
    var d = new L({ wireframe: !0, fog: !1, toneMapped: !1 })
    ca.call(this, a, d)
    this.light = c
    this.light.updateMatrixWorld()
    this.color = b
    this.type = 'PointLightHelper'
    this.matrix = this.light.matrixWorld
    this.matrixAutoUpdate = !1
    this.update()
  }
  function Bd(c, a, b) {
    n.call(this)
    this.light = c
    this.light.updateMatrixWorld()
    this.matrix = c.matrixWorld
    this.matrixAutoUpdate = !1
    this.color = b
    c = new yc(a)
    c.rotateY(0.5 * Math.PI)
    this.material = new L({ wireframe: !0, fog: !1, toneMapped: !1 })
    void 0 === this.color && (this.material.vertexColors = !0)
    a = c.getAttribute('position')
    a = new Float32Array(3 * a.count)
    c.setAttribute('color', new C(a, 3))
    this.add(new ca(c, this.material))
    this.update()
  }
  function Be(c, a, b, d) {
    c = c || 10
    a = a || 10
    b = new H(void 0 !== b ? b : 4473924)
    d = new H(void 0 !== d ? d : 8947848)
    var e = a / 2,
      h = c / a,
      l = c / 2
    c = []
    for (var q = [], f = 0, g = 0, k = -l; f <= a; f++, k += h) {
      c.push(-l, 0, k, l, 0, k)
      c.push(k, 0, -l, k, 0, l)
      var m = f === e ? b : d
      m.toArray(q, g)
      g += 3
      m.toArray(q, g)
      g += 3
      m.toArray(q, g)
      g += 3
      m.toArray(q, g)
      g += 3
    }
    a = new I()
    a.setAttribute('position', new E(c, 3))
    a.setAttribute('color', new E(q, 3))
    b = new ma({ vertexColors: !0, toneMapped: !1 })
    qa.call(this, a, b)
    this.type = 'GridHelper'
  }
  function Ef(c, a, b, d, e, h) {
    c = c || 10
    a = a || 16
    b = b || 8
    d = d || 64
    e = new H(void 0 !== e ? e : 4473924)
    h = new H(void 0 !== h ? h : 8947848)
    for (var l = [], q = [], f = 0; f <= a; f++) {
      var g = (f / a) * 2 * Math.PI,
        k = Math.sin(g) * c,
        g = Math.cos(g) * c
      l.push(0, 0, 0)
      l.push(k, 0, g)
      k = f & 1 ? e : h
      q.push(k.r, k.g, k.b)
      q.push(k.r, k.g, k.b)
    }
    for (a = 0; a <= b; a++)
      for (f = a & 1 ? e : h, k = c - (c / b) * a, g = 0; g < d; g++) {
        var m = (g / d) * 2 * Math.PI,
          D = Math.sin(m) * k,
          m = Math.cos(m) * k
        l.push(D, 0, m)
        q.push(f.r, f.g, f.b)
        m = ((g + 1) / d) * 2 * Math.PI
        D = Math.sin(m) * k
        m = Math.cos(m) * k
        l.push(D, 0, m)
        q.push(f.r, f.g, f.b)
      }
    c = new I()
    c.setAttribute('position', new E(l, 3))
    c.setAttribute('color', new E(q, 3))
    l = new ma({ vertexColors: !0, toneMapped: !1 })
    qa.call(this, c, l)
    this.type = 'PolarGridHelper'
  }
  function Cd(c, a, b) {
    n.call(this)
    this.light = c
    this.light.updateMatrixWorld()
    this.matrix = c.matrixWorld
    this.matrixAutoUpdate = !1
    this.color = b
    void 0 === a && (a = 1)
    c = new I()
    c.setAttribute(
      'position',
      new E([-a, a, 0, a, a, 0, a, -a, 0, -a, -a, 0, -a, a, 0], 3)
    )
    a = new ma({ fog: !1, toneMapped: !1 })
    this.lightpl = new ab(c, a)
    this.add(this.lightpl)
    c = new I()
    c.setAttribute('position', new E([0, 0, 0, 0, 0, 1], 3))
    this.targetLine = new ab(c, a)
    this.add(this.targetLine)
    this.update()
  }
  function Ce(c) {
    function a(a, c, d) {
      b(a, d)
      b(c, d)
    }
    function b(a, b) {
      h.push(0, 0, 0)
      l.push(b.r, b.g, b.b)
      void 0 === q[a] && (q[a] = [])
      q[a].push(h.length / 3 - 1)
    }
    var d = new I(),
      e = new ma({ color: 16777215, vertexColors: !0, toneMapped: !1 }),
      h = [],
      l = [],
      q = {},
      f = new H(16755200),
      g = new H(16711680),
      k = new H(43775),
      m = new H(16777215),
      D = new H(3355443)
    a('n1', 'n2', f)
    a('n2', 'n4', f)
    a('n4', 'n3', f)
    a('n3', 'n1', f)
    a('f1', 'f2', f)
    a('f2', 'f4', f)
    a('f4', 'f3', f)
    a('f3', 'f1', f)
    a('n1', 'f1', f)
    a('n2', 'f2', f)
    a('n3', 'f3', f)
    a('n4', 'f4', f)
    a('p', 'n1', g)
    a('p', 'n2', g)
    a('p', 'n3', g)
    a('p', 'n4', g)
    a('u1', 'u2', k)
    a('u2', 'u3', k)
    a('u3', 'u1', k)
    a('c', 't', m)
    a('p', 'c', D)
    a('cn1', 'cn2', D)
    a('cn3', 'cn4', D)
    a('cf1', 'cf2', D)
    a('cf3', 'cf4', D)
    d.setAttribute('position', new E(h, 3))
    d.setAttribute('color', new E(l, 3))
    qa.call(this, d, e)
    this.type = 'CameraHelper'
    this.camera = c
    this.camera.updateProjectionMatrix && this.camera.updateProjectionMatrix()
    this.matrix = c.matrixWorld
    this.matrixAutoUpdate = !1
    this.pointMap = q
    this.update()
  }
  function va(c, a, b, d, e, h, l) {
    Ff.set(e, h, l).unproject(d)
    c = a[c]
    if (void 0 !== c)
      for (b = b.getAttribute('position'), a = 0, d = c.length; a < d; a++)
        b.setXYZ(c[a], Ff.x, Ff.y, Ff.z)
  }
  function mc(c, a) {
    void 0 === a && (a = 16776960)
    var b = new Uint16Array([
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        0,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        4,
        0,
        4,
        1,
        5,
        2,
        6,
        3,
        7,
      ]),
      d = new Float32Array(24),
      e = new I()
    e.setIndex(new C(b, 1))
    e.setAttribute('position', new C(d, 3))
    qa.call(this, e, new ma({ color: a, toneMapped: !1 }))
    this.object = c
    this.type = 'BoxHelper'
    this.matrixAutoUpdate = !1
    this.update()
  }
  function De(c, a) {
    void 0 === a && (a = 16776960)
    var b = new Uint16Array([
        0,
        1,
        1,
        2,
        2,
        3,
        3,
        0,
        4,
        5,
        5,
        6,
        6,
        7,
        7,
        4,
        0,
        4,
        1,
        5,
        2,
        6,
        3,
        7,
      ]),
      d = new I()
    d.setIndex(new C(b, 1))
    d.setAttribute(
      'position',
      new E(
        [
          1,
          1,
          1,
          -1,
          1,
          1,
          -1,
          -1,
          1,
          1,
          -1,
          1,
          1,
          1,
          -1,
          -1,
          1,
          -1,
          -1,
          -1,
          -1,
          1,
          -1,
          -1,
        ],
        3
      )
    )
    qa.call(this, d, new ma({ color: a, toneMapped: !1 }))
    this.box = c
    this.type = 'b7Helper'
    this.geometry.computeBoundingSphere()
  }
  function Ee(c, a, b) {
    b = void 0 !== b ? b : 16776960
    var d = new I()
    d.setAttribute(
      'position',
      new E(
        [
          1,
          -1,
          1,
          -1,
          1,
          1,
          -1,
          -1,
          1,
          1,
          1,
          1,
          -1,
          1,
          1,
          -1,
          -1,
          1,
          1,
          -1,
          1,
          1,
          1,
          1,
          0,
          0,
          1,
          0,
          0,
          0,
        ],
        3
      )
    )
    d.computeBoundingSphere()
    ab.call(this, d, new ma({ color: b, toneMapped: !1 }))
    this.type = 'q8'
    this.plane = c
    this.size = void 0 === a ? 1 : a
    c = new I()
    c.setAttribute(
      'position',
      new E([1, 1, 1, -1, 1, 1, -1, -1, 1, 1, 1, 1, -1, -1, 1, 1, -1, 1], 3)
    )
    c.computeBoundingSphere()
    this.add(
      new ca(
        c,
        new L({
          color: b,
          opacity: 0.2,
          transparent: !0,
          depthWrite: !1,
          toneMapped: !1,
        })
      )
    )
  }
  function nc(c, a, b, d, e, h) {
    n.call(this)
    this.type = 'ArrowHelper'
    void 0 === c && (c = new p(0, 0, 1))
    void 0 === a && (a = new p(0, 0, 0))
    void 0 === b && (b = 1)
    void 0 === d && (d = 16776960)
    void 0 === e && (e = 0.2 * b)
    void 0 === h && (h = 0.2 * e)
    void 0 === Gf &&
      ((Gf = new I()),
      Gf.setAttribute('position', new E([0, 0, 0, 0, 1, 0], 3)),
      (Tg = new Ob(0, 0.5, 1, 5, 1)),
      Tg.translate(0, -0.5, 0))
    this.position.copy(a)
    this.line = new ab(Gf, new ma({ color: d, toneMapped: !1 }))
    this.line.matrixAutoUpdate = !1
    this.add(this.line)
    this.cone = new ca(Tg, new L({ color: d, toneMapped: !1 }))
    this.cone.matrixAutoUpdate = !1
    this.add(this.cone)
    this.setDirection(c)
    this.setLength(b, e, h)
  }
  function Fe(c) {
    void 0 === c && (c = 1)
    var a = [0, 0, 0, c, 0, 0, 0, 0, 0, 0, c, 0, 0, 0, 0, 0, 0, c]
    c = new I()
    c.setAttribute('position', new E(a, 3))
    c.setAttribute(
      'color',
      new E([1, 0, 0, 1, 0.6, 0, 0, 1, 0, 0.6, 1, 0, 0, 0, 1, 0, 0.6, 1], 3)
    )
    a = new ma({ vertexColors: !0, toneMapped: !1 })
    qa.call(this, c, a)
    this.type = 'AxesHelper'
  }
  function ji(c) {
    c = new k(3 * Gb, 3 * Gb, c)
    c.texture.mapping = 306
    c.texture.name = 'PMREM.cubeUv'
    c.scissorTest = !0
    return c
  }
  function Hf(c, a, b, d, e) {
    c.viewport.set(a, b, d, e)
    c.scissor.set(a, b, d, e)
  }
  function ki() {
    var c = new B(1, 1)
    return new Pb({
      name: 'EquirectangularToCubeUV',
      uniforms: {
        envMap: { value: null },
        texelSize: { value: c },
        inputEncoding: { value: Hb[3e3] },
        outputEncoding: { value: Hb[3e3] },
      },
      vertexShader: Ug(),
      fragmentShader:
        '\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform vec2 texelSize;\n\n\t\t\t' +
        Vg() +
        '\n\n\t\t\t#include \x3ccommon\x3e\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor \x3d vec4( 0.0, 0.0, 0.0, 1.0 );\n\n\t\t\t\tvec3 outputDirection \x3d normalize( vOutputDirection );\n\t\t\t\tvec2 uv \x3d equirectUv( outputDirection );\n\n\t\t\t\tvec2 f \x3d fract( uv / texelSize - 0.5 );\n\t\t\t\tuv -\x3d f * texelSize;\n\t\t\t\tvec3 tl \x3d envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x +\x3d texelSize.x;\n\t\t\t\tvec3 tr \x3d envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.y +\x3d texelSize.y;\n\t\t\t\tvec3 br \x3d envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\t\t\t\tuv.x -\x3d texelSize.x;\n\t\t\t\tvec3 bl \x3d envMapTexelToLinear( texture2D ( envMap, uv ) ).rgb;\n\n\t\t\t\tvec3 tm \x3d mix( tl, tr, f.x );\n\t\t\t\tvec3 bm \x3d mix( bl, br, f.x );\n\t\t\t\tgl_FragColor.rgb \x3d mix( tm, bm, f.y );\n\n\t\t\t\tgl_FragColor \x3d linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t',
      blending: 0,
      depthTest: !1,
      depthWrite: !1,
    })
  }
  function li() {
    return new Pb({
      name: 'CubemapToCubeUV',
      uniforms: {
        envMap: { value: null },
        inputEncoding: { value: Hb[3e3] },
        outputEncoding: { value: Hb[3e3] },
      },
      vertexShader: Ug(),
      fragmentShader:
        '\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform samplerCube envMap;\n\n\t\t\t' +
        Vg() +
        '\n\n\t\t\tvoid main() {\n\n\t\t\t\tgl_FragColor \x3d vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb \x3d envMapTexelToLinear( textureCube( envMap, vec3( - vOutputDirection.x, vOutputDirection.yz ) ) ).rgb;\n\t\t\t\tgl_FragColor \x3d linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t',
      blending: 0,
      depthTest: !1,
      depthWrite: !1,
    })
  }
  function Ug() {
    return '\n\n\t\tprecision mediump float;\n\t\tprecision mediump int;\n\n\t\tattribute vec3 position;\n\t\tattribute vec2 uv;\n\t\tattribute float faceIndex;\n\n\t\tvarying vec3 vOutputDirection;\n\n\t\t// RH coordinate system; PMREM face-indexing convention\n\t\tvec3 getDirection( vec2 uv, float face ) {\n\n\t\t\tuv \x3d 2.0 * uv - 1.0;\n\n\t\t\tvec3 direction \x3d vec3( uv, 1.0 );\n\n\t\t\tif ( face \x3d\x3d 0.0 ) {\n\n\t\t\t\tdirection \x3d direction.zyx; // ( 1, v, u ) pos x\n\n\t\t\t} else if ( face \x3d\x3d 1.0 ) {\n\n\t\t\t\tdirection \x3d direction.xzy;\n\t\t\t\tdirection.xz *\x3d -1.0; // ( -u, 1, -v ) pos y\n\n\t\t\t} else if ( face \x3d\x3d 2.0 ) {\n\n\t\t\t\tdirection.x *\x3d -1.0; // ( -u, v, 1 ) pos z\n\n\t\t\t} else if ( face \x3d\x3d 3.0 ) {\n\n\t\t\t\tdirection \x3d direction.zyx;\n\t\t\t\tdirection.xz *\x3d -1.0; // ( -1, v, -u ) neg x\n\n\t\t\t} else if ( face \x3d\x3d 4.0 ) {\n\n\t\t\t\tdirection \x3d direction.xzy;\n\t\t\t\tdirection.xy *\x3d -1.0; // ( -u, -1, v ) neg y\n\n\t\t\t} else if ( face \x3d\x3d 5.0 ) {\n\n\t\t\t\tdirection.z *\x3d -1.0; // ( u, v, -1 ) neg z\n\n\t\t\t}\n\n\t\t\treturn direction;\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\tvOutputDirection \x3d getDirection( uv, faceIndex );\n\t\t\tgl_Position \x3d vec4( position, 1.0 );\n\n\t\t}\n\t'
  }
  function Vg() {
    return '\n\n\t\tuniform int inputEncoding;\n\t\tuniform int outputEncoding;\n\n\t\t#include \x3cencodings_pars_fragment\x3e\n\n\t\tvec4 inputTexelToLinear( vec4 value ) {\n\n\t\t\tif ( inputEncoding \x3d\x3d 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( inputEncoding \x3d\x3d 1 ) {\n\n\t\t\t\treturn sRGBToLinear( value );\n\n\t\t\t} else if ( inputEncoding \x3d\x3d 2 ) {\n\n\t\t\t\treturn RGBEToLinear( value );\n\n\t\t\t} else if ( inputEncoding \x3d\x3d 3 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 7.0 );\n\n\t\t\t} else if ( inputEncoding \x3d\x3d 4 ) {\n\n\t\t\t\treturn RGBMToLinear( value, 16.0 );\n\n\t\t\t} else if ( inputEncoding \x3d\x3d 5 ) {\n\n\t\t\t\treturn RGBDToLinear( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn GammaToLinear( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 linearToOutputTexel( vec4 value ) {\n\n\t\t\tif ( outputEncoding \x3d\x3d 0 ) {\n\n\t\t\t\treturn value;\n\n\t\t\t} else if ( outputEncoding \x3d\x3d 1 ) {\n\n\t\t\t\treturn LinearTosRGB( value );\n\n\t\t\t} else if ( outputEncoding \x3d\x3d 2 ) {\n\n\t\t\t\treturn LinearToRGBE( value );\n\n\t\t\t} else if ( outputEncoding \x3d\x3d 3 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 7.0 );\n\n\t\t\t} else if ( outputEncoding \x3d\x3d 4 ) {\n\n\t\t\t\treturn LinearToRGBM( value, 16.0 );\n\n\t\t\t} else if ( outputEncoding \x3d\x3d 5 ) {\n\n\t\t\t\treturn LinearToRGBD( value, 256.0 );\n\n\t\t\t} else {\n\n\t\t\t\treturn LinearToGamma( value, 2.2 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tvec4 envMapTexelToLinear( vec4 color ) {\n\n\t\t\treturn inputTexelToLinear( color );\n\n\t\t}\n\t'
  }
  function mi(c) {
    console.warn(
      'THREE.ClosedSplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'
    )
    Sa.call(this, c)
    this.type = 'catmullrom'
    this.closed = !0
  }
  function ni(c) {
    console.warn(
      'THREE.SplineCurve3 has been deprecated. Use THREE.CatmullRomCurve3 instead.'
    )
    Sa.call(this, c)
    this.type = 'catmullrom'
  }
  function Wg(c) {
    console.warn(
      'THREE.Spline has been removed. Use THREE.CatmullRomCurve3 instead.'
    )
    Sa.call(this, c)
    this.type = 'catmullrom'
  }
  void 0 === Number.EPSILON && (Number.EPSILON = Math.pow(2, -52))
  void 0 === Number.isInteger &&
    (Number.isInteger = function (c) {
      return 'number' === typeof c && isFinite(c) && Math.floor(c) === c
    })
  void 0 === Math.sign &&
    (Math.sign = function (c) {
      return 0 > c ? -1 : 0 < c ? 1 : +c
    })
  !1 === 'name' in Function.prototype &&
    Object.defineProperty(Function.prototype, 'name', {
      get: function () {
        return this.toString().match(/^\s*function\s*([^\(\s]*)/)[1]
      },
    })
  void 0 === Object.assign &&
    (Object.assign = function (c) {
      if (void 0 === c || null === c)
        throw new TypeError('Cannot convert undefined or null to object')
      for (var a = Object(c), b = 1; b < arguments.length; b++) {
        var d = arguments[b]
        if (void 0 !== d && null !== d)
          for (var e in d)
            Object.prototype.hasOwnProperty.call(d, e) && (a[e] = d[e])
      }
      return a
    })
  Object.assign(m.prototype, {
    addEventListener: function (c, a) {
      void 0 === this._listeners && (this._listeners = {})
      var b = this._listeners
      void 0 === b[c] && (b[c] = [])
      ;-1 === b[c].indexOf(a) && b[c].push(a)
    },
    hasEventListener: function (c, a) {
      if (void 0 === this._listeners) return !1
      var b = this._listeners
      return void 0 !== b[c] && -1 !== b[c].indexOf(a)
    },
    removeEventListener: function (c, a) {
      if (void 0 !== this._listeners) {
        var b = this._listeners[c]
        if (void 0 !== b) {
          var d = b.indexOf(a)
          ;-1 !== d && b.splice(d, 1)
        }
      }
    },
    dispatchEvent: function (c) {
      if (void 0 !== this._listeners) {
        var a = this._listeners[c.type]
        if (void 0 !== a) {
          c.target = this
          for (var a = a.slice(0), b = 0, d = a.length; b < d; b++)
            a[b].call(this, c)
        }
      }
    },
  })
  for (var Na = [], Ge = 0; 256 > Ge; Ge++)
    Na[Ge] = (16 > Ge ? '0' : '') + Ge.toString(16)
  var If = 1234567,
    ea = {
      DEG2RAD: Math.PI / 180,
      RAD2DEG: 180 / Math.PI,
      generateUUID: function () {
        var c = (4294967295 * Math.random()) | 0,
          a = (4294967295 * Math.random()) | 0,
          b = (4294967295 * Math.random()) | 0,
          d = (4294967295 * Math.random()) | 0
        return (
          Na[c & 255] +
          Na[(c >> 8) & 255] +
          Na[(c >> 16) & 255] +
          Na[(c >> 24) & 255] +
          '-' +
          Na[a & 255] +
          Na[(a >> 8) & 255] +
          '-' +
          Na[((a >> 16) & 15) | 64] +
          Na[(a >> 24) & 255] +
          '-' +
          Na[(b & 63) | 128] +
          Na[(b >> 8) & 255] +
          '-' +
          Na[(b >> 16) & 255] +
          Na[(b >> 24) & 255] +
          Na[d & 255] +
          Na[(d >> 8) & 255] +
          Na[(d >> 16) & 255] +
          Na[(d >> 24) & 255]
        ).toUpperCase()
      },
      clamp: function (c, a, b) {
        return Math.max(a, Math.min(b, c))
      },
      euclideanModulo: function (c, a) {
        return ((c % a) + a) % a
      },
      mapLinear: function (c, a, b, d, e) {
        return d + ((c - a) * (e - d)) / (b - a)
      },
      lerp: function (c, a, b) {
        return (1 - b) * c + b * a
      },
      smoothstep: function (c, a, b) {
        if (c <= a) return 0
        if (c >= b) return 1
        c = (c - a) / (b - a)
        return c * c * (3 - 2 * c)
      },
      smootherstep: function (c, a, b) {
        if (c <= a) return 0
        if (c >= b) return 1
        c = (c - a) / (b - a)
        return c * c * c * (c * (6 * c - 15) + 10)
      },
      randInt: function (c, a) {
        return c + Math.floor(Math.random() * (a - c + 1))
      },
      randFloat: function (c, a) {
        return c + Math.random() * (a - c)
      },
      randFloatSpread: function (c) {
        return c * (0.5 - Math.random())
      },
      seededRandom: function (c) {
        void 0 !== c && (If = c % 2147483647)
        If = (16807 * If) % 2147483647
        return (If - 1) / 2147483646
      },
      degToRad: function (c) {
        return c * ea.DEG2RAD
      },
      radToDeg: function (c) {
        return c * ea.RAD2DEG
      },
      isPowerOfTwo: function (c) {
        return 0 === (c & (c - 1)) && 0 !== c
      },
      ceilPowerOfTwo: function (c) {
        return Math.pow(2, Math.ceil(Math.log(c) / Math.LN2))
      },
      floorPowerOfTwo: function (c) {
        return Math.pow(2, Math.floor(Math.log(c) / Math.LN2))
      },
      setQuaternionFromProperEuler: function (c, a, b, d, e) {
        var h = Math.cos,
          l = Math.sin,
          q = h(b / 2)
        b = l(b / 2)
        var f = h((a + d) / 2),
          g = l((a + d) / 2),
          k = h((a - d) / 2),
          m = l((a - d) / 2),
          h = h((d - a) / 2)
        a = l((d - a) / 2)
        switch (e) {
          case 'XYX':
            c.set(q * g, b * k, b * m, q * f)
            break
          case 'YZY':
            c.set(b * m, q * g, b * k, q * f)
            break
          case 'ZXZ':
            c.set(b * k, b * m, q * g, q * f)
            break
          case 'XZX':
            c.set(q * g, b * a, b * h, q * f)
            break
          case 'YXY':
            c.set(b * h, q * g, b * a, q * f)
            break
          case 'ZYZ':
            c.set(b * a, b * h, q * g, q * f)
            break
          default:
            console.warn(
              'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' +
                e
            )
        }
      },
    },
    B = function (c, a) {
      void 0 === c && (c = 0)
      void 0 === a && (a = 0)
      Object.defineProperty(this, 'isvt2', { value: !0 })
      this.x = c
      this.y = a
    },
    He = { width: { configurable: !0 }, height: { configurable: !0 } }
  He.width.get = function () {
    return this.x
  }
  He.width.set = function (c) {
    this.x = c
  }
  He.height.get = function () {
    return this.y
  }
  He.height.set = function (c) {
    this.y = c
  }
  B.prototype.set = function (c, a) {
    this.x = c
    this.y = a
    return this
  }
  B.prototype.setScalar = function (c) {
    this.y = this.x = c
    return this
  }
  B.prototype.setX = function (c) {
    this.x = c
    return this
  }
  B.prototype.setY = function (c) {
    this.y = c
    return this
  }
  B.prototype.setComponent = function (c, a) {
    switch (c) {
      case 0:
        this.x = a
        break
      case 1:
        this.y = a
        break
      default:
        throw Error('index is out of range: ' + c)
    }
    return this
  }
  B.prototype.getComponent = function (c) {
    switch (c) {
      case 0:
        return this.x
      case 1:
        return this.y
      default:
        throw Error('index is out of range: ' + c)
    }
  }
  B.prototype.clone = function () {
    return new this.constructor(this.x, this.y)
  }
  B.prototype.copy = function (c) {
    this.x = c.x
    this.y = c.y
    return this
  }
  B.prototype.add = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE.vt2: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
        ),
        this.addVectors(c, a)
      )
    this.x += c.x
    this.y += c.y
    return this
  }
  B.prototype.addScalar = function (c) {
    this.x += c
    this.y += c
    return this
  }
  B.prototype.addVectors = function (c, a) {
    this.x = c.x + a.x
    this.y = c.y + a.y
    return this
  }
  B.prototype.addScaledVector = function (c, a) {
    this.x += c.x * a
    this.y += c.y * a
    return this
  }
  B.prototype.sub = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE.vt2: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
        ),
        this.subVectors(c, a)
      )
    this.x -= c.x
    this.y -= c.y
    return this
  }
  B.prototype.subScalar = function (c) {
    this.x -= c
    this.y -= c
    return this
  }
  B.prototype.subVectors = function (c, a) {
    this.x = c.x - a.x
    this.y = c.y - a.y
    return this
  }
  B.prototype.multiply = function (c) {
    this.x *= c.x
    this.y *= c.y
    return this
  }
  B.prototype.multiplyScalar = function (c) {
    this.x *= c
    this.y *= c
    return this
  }
  B.prototype.divide = function (c) {
    this.x /= c.x
    this.y /= c.y
    return this
  }
  B.prototype.divideScalar = function (c) {
    return this.multiplyScalar(1 / c)
  }
  B.prototype.applyMatrix3 = function (c) {
    var a = this.x,
      b = this.y
    c = c.elements
    this.x = c[0] * a + c[3] * b + c[6]
    this.y = c[1] * a + c[4] * b + c[7]
    return this
  }
  B.prototype.min = function (c) {
    this.x = Math.min(this.x, c.x)
    this.y = Math.min(this.y, c.y)
    return this
  }
  B.prototype.max = function (c) {
    this.x = Math.max(this.x, c.x)
    this.y = Math.max(this.y, c.y)
    return this
  }
  B.prototype.clamp = function (c, a) {
    this.x = Math.max(c.x, Math.min(a.x, this.x))
    this.y = Math.max(c.y, Math.min(a.y, this.y))
    return this
  }
  B.prototype.clampScalar = function (c, a) {
    this.x = Math.max(c, Math.min(a, this.x))
    this.y = Math.max(c, Math.min(a, this.y))
    return this
  }
  B.prototype.clampLength = function (c, a) {
    var b = this.length()
    return this.divideScalar(b || 1).multiplyScalar(Math.max(c, Math.min(a, b)))
  }
  B.prototype.floor = function () {
    this.x = Math.floor(this.x)
    this.y = Math.floor(this.y)
    return this
  }
  B.prototype.ceil = function () {
    this.x = Math.ceil(this.x)
    this.y = Math.ceil(this.y)
    return this
  }
  B.prototype.round = function () {
    this.x = Math.round(this.x)
    this.y = Math.round(this.y)
    return this
  }
  B.prototype.roundToZero = function () {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x)
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y)
    return this
  }
  B.prototype.negate = function () {
    this.x = -this.x
    this.y = -this.y
    return this
  }
  B.prototype.dot = function (c) {
    return this.x * c.x + this.y * c.y
  }
  B.prototype.cross = function (c) {
    return this.x * c.y - this.y * c.x
  }
  B.prototype.lengthSq = function () {
    return this.x * this.x + this.y * this.y
  }
  B.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y)
  }
  B.prototype.manhattanLength = function () {
    return Math.abs(this.x) + Math.abs(this.y)
  }
  B.prototype.normalize = function () {
    return this.divideScalar(this.length() || 1)
  }
  B.prototype.angle = function () {
    return Math.atan2(-this.y, -this.x) + Math.PI
  }
  B.prototype.distanceTo = function (c) {
    return Math.sqrt(this.distanceToSquared(c))
  }
  B.prototype.distanceToSquared = function (c) {
    var a = this.x - c.x
    c = this.y - c.y
    return a * a + c * c
  }
  B.prototype.manhattanDistanceTo = function (c) {
    return Math.abs(this.x - c.x) + Math.abs(this.y - c.y)
  }
  B.prototype.setLength = function (c) {
    return this.normalize().multiplyScalar(c)
  }
  B.prototype.lerp = function (c, a) {
    this.x += (c.x - this.x) * a
    this.y += (c.y - this.y) * a
    return this
  }
  B.prototype.lerpVectors = function (c, a, b) {
    this.x = c.x + (a.x - c.x) * b
    this.y = c.y + (a.y - c.y) * b
    return this
  }
  B.prototype.equals = function (c) {
    return c.x === this.x && c.y === this.y
  }
  B.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    this.x = c[a]
    this.y = c[a + 1]
    return this
  }
  B.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    c[a] = this.x
    c[a + 1] = this.y
    return c
  }
  B.prototype.from_0x3 = function (c, a, b) {
    void 0 !== b &&
      console.warn('THREE.vt2: offset has been removed from .from_0x3().')
    this.x = c.getX(a)
    this.y = c.getY(a)
    return this
  }
  B.prototype.rotateAround = function (c, a) {
    var b = Math.cos(a),
      d = Math.sin(a),
      e = this.x - c.x,
      h = this.y - c.y
    this.x = e * b - h * d + c.x
    this.y = e * d + h * b + c.y
    return this
  }
  B.prototype.random = function () {
    this.x = Math.random()
    this.y = Math.random()
    return this
  }
  Object.defineProperties(B.prototype, He)
  var ha = function () {
    Object.defineProperty(this, 'isMatrix3', { value: !0 })
    this.elements = [1, 0, 0, 0, 1, 0, 0, 0, 1]
    0 < arguments.length &&
      console.error(
        'THREE.Matrix3: the constructor no longer reads arguments. use .set() instead.'
      )
  }
  ha.prototype.set = function (c, a, b, d, e, h, l, q, f) {
    var t = this.elements
    t[0] = c
    t[1] = d
    t[2] = l
    t[3] = a
    t[4] = e
    t[5] = q
    t[6] = b
    t[7] = h
    t[8] = f
    return this
  }
  ha.prototype.identity = function () {
    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1)
    return this
  }
  ha.prototype.clone = function () {
    return new this.constructor().fromArray(this.elements)
  }
  ha.prototype.copy = function (c) {
    var a = this.elements
    c = c.elements
    a[0] = c[0]
    a[1] = c[1]
    a[2] = c[2]
    a[3] = c[3]
    a[4] = c[4]
    a[5] = c[5]
    a[6] = c[6]
    a[7] = c[7]
    a[8] = c[8]
    return this
  }
  ha.prototype.extractBasis = function (c, a, b) {
    c.setFromMatrix3Column(this, 0)
    a.setFromMatrix3Column(this, 1)
    b.setFromMatrix3Column(this, 2)
    return this
  }
  ha.prototype.setFromMatrix4 = function (c) {
    c = c.elements
    this.set(c[0], c[4], c[8], c[1], c[5], c[9], c[2], c[6], c[10])
    return this
  }
  ha.prototype.multiply = function (c) {
    return this.multiplyMatrices(this, c)
  }
  ha.prototype.premultiply = function (c) {
    return this.multiplyMatrices(c, this)
  }
  ha.prototype.multiplyMatrices = function (c, a) {
    var b = c.elements,
      d = a.elements,
      e = this.elements,
      h = b[0],
      l = b[3],
      q = b[6],
      f = b[1],
      g = b[4],
      k = b[7],
      m = b[2],
      D = b[5],
      b = b[8],
      n = d[0],
      p = d[3],
      r = d[6],
      u = d[1],
      w = d[4],
      v = d[7],
      z = d[2],
      x = d[5],
      d = d[8]
    e[0] = h * n + l * u + q * z
    e[3] = h * p + l * w + q * x
    e[6] = h * r + l * v + q * d
    e[1] = f * n + g * u + k * z
    e[4] = f * p + g * w + k * x
    e[7] = f * r + g * v + k * d
    e[2] = m * n + D * u + b * z
    e[5] = m * p + D * w + b * x
    e[8] = m * r + D * v + b * d
    return this
  }
  ha.prototype.multiplyScalar = function (c) {
    var a = this.elements
    a[0] *= c
    a[3] *= c
    a[6] *= c
    a[1] *= c
    a[4] *= c
    a[7] *= c
    a[2] *= c
    a[5] *= c
    a[8] *= c
    return this
  }
  ha.prototype.determinant = function () {
    var c = this.elements,
      a = c[0],
      b = c[1],
      d = c[2],
      e = c[3],
      h = c[4],
      l = c[5],
      q = c[6],
      f = c[7],
      c = c[8]
    return a * h * c - a * l * f - b * e * c + b * l * q + d * e * f - d * h * q
  }
  ha.prototype.getInverse = function (c, a) {
    void 0 !== a &&
      console.warn(
        'THREE.Matrix3: .getInverse() can no longer be configured to throw on degenerate.'
      )
    var b = c.elements,
      d = this.elements,
      e = b[0],
      h = b[1],
      l = b[2],
      q = b[3],
      f = b[4],
      g = b[5],
      k = b[6],
      m = b[7],
      b = b[8],
      D = b * f - g * m,
      n = g * k - b * q,
      p = m * q - f * k,
      r = e * D + h * n + l * p
    if (0 === r) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0)
    r = 1 / r
    d[0] = D * r
    d[1] = (l * m - b * h) * r
    d[2] = (g * h - l * f) * r
    d[3] = n * r
    d[4] = (b * e - l * k) * r
    d[5] = (l * q - g * e) * r
    d[6] = p * r
    d[7] = (h * k - m * e) * r
    d[8] = (f * e - h * q) * r
    return this
  }
  ha.prototype.transpose = function () {
    var c,
      a = this.elements
    c = a[1]
    a[1] = a[3]
    a[3] = c
    c = a[2]
    a[2] = a[6]
    a[6] = c
    c = a[5]
    a[5] = a[7]
    a[7] = c
    return this
  }
  ha.prototype.getNormalMatrix = function (c) {
    return this.setFromMatrix4(c).getInverse(this).transpose()
  }
  ha.prototype.transposeIntoArray = function (c) {
    var a = this.elements
    c[0] = a[0]
    c[1] = a[3]
    c[2] = a[6]
    c[3] = a[1]
    c[4] = a[4]
    c[5] = a[7]
    c[6] = a[2]
    c[7] = a[5]
    c[8] = a[8]
    return this
  }
  ha.prototype.setUvTransform = function (c, a, b, d, e, h, l) {
    var q = Math.cos(e)
    e = Math.sin(e)
    this.set(
      b * q,
      b * e,
      -b * (q * h + e * l) + h + c,
      -d * e,
      d * q,
      -d * (-e * h + q * l) + l + a,
      0,
      0,
      1
    )
  }
  ha.prototype.scale = function (c, a) {
    var b = this.elements
    b[0] *= c
    b[3] *= c
    b[6] *= c
    b[1] *= a
    b[4] *= a
    b[7] *= a
    return this
  }
  ha.prototype.rotate = function (c) {
    var a = Math.cos(c)
    c = Math.sin(c)
    var b = this.elements,
      d = b[0],
      e = b[3],
      h = b[6],
      l = b[1],
      q = b[4],
      f = b[7]
    b[0] = a * d + c * l
    b[3] = a * e + c * q
    b[6] = a * h + c * f
    b[1] = -c * d + a * l
    b[4] = -c * e + a * q
    b[7] = -c * h + a * f
    return this
  }
  ha.prototype.translate = function (c, a) {
    var b = this.elements
    b[0] += c * b[2]
    b[3] += c * b[5]
    b[6] += c * b[8]
    b[1] += a * b[2]
    b[4] += a * b[5]
    b[7] += a * b[8]
    return this
  }
  ha.prototype.equals = function (c) {
    var a = this.elements
    c = c.elements
    for (var b = 0; 9 > b; b++) if (a[b] !== c[b]) return !1
    return !0
  }
  ha.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    for (var b = 0; 9 > b; b++) this.elements[b] = c[b + a]
    return this
  }
  ha.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    var b = this.elements
    c[a] = b[0]
    c[a + 1] = b[1]
    c[a + 2] = b[2]
    c[a + 3] = b[3]
    c[a + 4] = b[4]
    c[a + 5] = b[5]
    c[a + 6] = b[6]
    c[a + 7] = b[7]
    c[a + 8] = b[8]
    return c
  }
  var Dd,
    oc = {
      getDataURL: function (c) {
        if (/^data:/i.test(c.src) || 'undefined' == typeof HTMLCanvasElement)
          return c.src
        if (!(c instanceof HTMLCanvasElement)) {
          void 0 === Dd &&
            (Dd = document.createElementNS(
              'http://www.w3.org/1999/xhtml',
              'canvas'
            ))
          Dd.width = c.width
          Dd.height = c.height
          var a = Dd.getContext('2d')
          c instanceof ImageData
            ? a.putImageData(c, 0, 0)
            : a.drawImage(c, 0, 0, c.width, c.height)
          c = Dd
        }
        return 2048 < c.width || 2048 < c.height
          ? c.toDataURL('image/jpeg', 0.6)
          : c.toDataURL('image/png')
      },
    },
    $i = 0
  g.DEFAULT_IMAGE = void 0
  g.DEFAULT_MAPPING = 300
  g.prototype = Object.assign(Object.create(m.prototype), {
    constructor: g,
    isTexture: !0,
    updateMatrix: function () {
      this.matrix.setUvTransform(
        this.offset.x,
        this.offset.y,
        this.repeat.x,
        this.repeat.y,
        this.rotation,
        this.center.x,
        this.center.y
      )
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    copy: function (c) {
      this.name = c.name
      this.image = c.image
      this.mipmaps = c.mipmaps.slice(0)
      this.mapping = c.mapping
      this.wrapS = c.wrapS
      this.wrapT = c.wrapT
      this.magFilter = c.magFilter
      this.minFilter = c.minFilter
      this.anisotropy = c.anisotropy
      this.format = c.format
      this.internalFormat = c.internalFormat
      this.type = c.type
      this.offset.copy(c.offset)
      this.repeat.copy(c.repeat)
      this.center.copy(c.center)
      this.rotation = c.rotation
      this.matrixAutoUpdate = c.matrixAutoUpdate
      this.matrix.copy(c.matrix)
      this.generateMipmaps = c.generateMipmaps
      this.premultiplyAlpha = c.premultiplyAlpha
      this.flipY = c.flipY
      this.unpackAlignment = c.unpackAlignment
      this.encoding = c.encoding
      return this
    },
    toJSON: function (c) {
      var a = void 0 === c || 'string' === typeof c
      if (!a && void 0 !== c.textures[this.uuid]) return c.textures[this.uuid]
      var b = {
        metadata: {
          version: 4.5,
          type: 'Texture',
          generator: 'Texture.toJSON',
        },
        uuid: this.uuid,
        name: this.name,
        mapping: this.mapping,
        repeat: [this.repeat.x, this.repeat.y],
        offset: [this.offset.x, this.offset.y],
        center: [this.center.x, this.center.y],
        rotation: this.rotation,
        wrap: [this.wrapS, this.wrapT],
        format: this.format,
        type: this.type,
        encoding: this.encoding,
        minFilter: this.minFilter,
        magFilter: this.magFilter,
        anisotropy: this.anisotropy,
        flipY: this.flipY,
        premultiplyAlpha: this.premultiplyAlpha,
        unpackAlignment: this.unpackAlignment,
      }
      if (void 0 !== this.image) {
        var d = this.image
        void 0 === d.uuid && (d.uuid = ea.generateUUID())
        if (!a && void 0 === c.images[d.uuid]) {
          var e
          if (Array.isArray(d)) {
            e = []
            for (var h = 0, l = d.length; h < l; h++)
              e.push(oc.getDataURL(d[h]))
          } else e = oc.getDataURL(d)
          c.images[d.uuid] = { uuid: d.uuid, url: e }
        }
        b.image = d.uuid
      }
      a || (c.textures[this.uuid] = b)
      return b
    },
    dispose: function () {
      this.dispatchEvent({ type: 'dispose' })
    },
    transformUv: function (c) {
      if (300 !== this.mapping) return c
      c.applyMatrix3(this.matrix)
      if (0 > c.x || 1 < c.x)
        switch (this.wrapS) {
          case 1e3:
            c.x -= Math.floor(c.x)
            break
          case 1001:
            c.x = 0 > c.x ? 0 : 1
            break
          case 1002:
            c.x =
              1 === Math.abs(Math.floor(c.x) % 2)
                ? Math.ceil(c.x) - c.x
                : c.x - Math.floor(c.x)
        }
      if (0 > c.y || 1 < c.y)
        switch (this.wrapT) {
          case 1e3:
            c.y -= Math.floor(c.y)
            break
          case 1001:
            c.y = 0 > c.y ? 0 : 1
            break
          case 1002:
            c.y =
              1 === Math.abs(Math.floor(c.y) % 2)
                ? Math.ceil(c.y) - c.y
                : c.y - Math.floor(c.y)
        }
      this.flipY && (c.y = 1 - c.y)
      return c
    },
  })
  Object.defineProperty(g.prototype, 'needsUpdate', {
    set: function (c) {
      !0 === c && this.version++
    },
  })
  var P = function (c, a, b, d) {
      void 0 === c && (c = 0)
      void 0 === a && (a = 0)
      void 0 === b && (b = 0)
      void 0 === d && (d = 1)
      Object.defineProperty(this, 'isVector4', { value: !0 })
      this.x = c
      this.y = a
      this.z = b
      this.w = d
    },
    Ie = { width: { configurable: !0 }, height: { configurable: !0 } }
  Ie.width.get = function () {
    return this.z
  }
  Ie.width.set = function (c) {
    this.z = c
  }
  Ie.height.get = function () {
    return this.w
  }
  Ie.height.set = function (c) {
    this.w = c
  }
  P.prototype.set = function (c, a, b, d) {
    this.x = c
    this.y = a
    this.z = b
    this.w = d
    return this
  }
  P.prototype.setScalar = function (c) {
    this.w = this.z = this.y = this.x = c
    return this
  }
  P.prototype.setX = function (c) {
    this.x = c
    return this
  }
  P.prototype.setY = function (c) {
    this.y = c
    return this
  }
  P.prototype.setZ = function (c) {
    this.z = c
    return this
  }
  P.prototype.setW = function (c) {
    this.w = c
    return this
  }
  P.prototype.setComponent = function (c, a) {
    switch (c) {
      case 0:
        this.x = a
        break
      case 1:
        this.y = a
        break
      case 2:
        this.z = a
        break
      case 3:
        this.w = a
        break
      default:
        throw Error('index is out of range: ' + c)
    }
    return this
  }
  P.prototype.getComponent = function (c) {
    switch (c) {
      case 0:
        return this.x
      case 1:
        return this.y
      case 2:
        return this.z
      case 3:
        return this.w
      default:
        throw Error('index is out of range: ' + c)
    }
  }
  P.prototype.clone = function () {
    return new this.constructor(this.x, this.y, this.z, this.w)
  }
  P.prototype.copy = function (c) {
    this.x = c.x
    this.y = c.y
    this.z = c.z
    this.w = void 0 !== c.w ? c.w : 1
    return this
  }
  P.prototype.add = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE.Vector4: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
        ),
        this.addVectors(c, a)
      )
    this.x += c.x
    this.y += c.y
    this.z += c.z
    this.w += c.w
    return this
  }
  P.prototype.addScalar = function (c) {
    this.x += c
    this.y += c
    this.z += c
    this.w += c
    return this
  }
  P.prototype.addVectors = function (c, a) {
    this.x = c.x + a.x
    this.y = c.y + a.y
    this.z = c.z + a.z
    this.w = c.w + a.w
    return this
  }
  P.prototype.addScaledVector = function (c, a) {
    this.x += c.x * a
    this.y += c.y * a
    this.z += c.z * a
    this.w += c.w * a
    return this
  }
  P.prototype.sub = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE.Vector4: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
        ),
        this.subVectors(c, a)
      )
    this.x -= c.x
    this.y -= c.y
    this.z -= c.z
    this.w -= c.w
    return this
  }
  P.prototype.subScalar = function (c) {
    this.x -= c
    this.y -= c
    this.z -= c
    this.w -= c
    return this
  }
  P.prototype.subVectors = function (c, a) {
    this.x = c.x - a.x
    this.y = c.y - a.y
    this.z = c.z - a.z
    this.w = c.w - a.w
    return this
  }
  P.prototype.multiplyScalar = function (c) {
    this.x *= c
    this.y *= c
    this.z *= c
    this.w *= c
    return this
  }
  P.prototype.applyMatrix4 = function (c) {
    var a = this.x,
      b = this.y,
      d = this.z,
      e = this.w
    c = c.elements
    this.x = c[0] * a + c[4] * b + c[8] * d + c[12] * e
    this.y = c[1] * a + c[5] * b + c[9] * d + c[13] * e
    this.z = c[2] * a + c[6] * b + c[10] * d + c[14] * e
    this.w = c[3] * a + c[7] * b + c[11] * d + c[15] * e
    return this
  }
  P.prototype.divideScalar = function (c) {
    return this.multiplyScalar(1 / c)
  }
  P.prototype.setAxisAngleFromQuaternion = function (c) {
    this.w = 2 * Math.acos(c.w)
    var a = Math.sqrt(1 - c.w * c.w)
    1e-4 > a
      ? ((this.x = 1), (this.z = this.y = 0))
      : ((this.x = c.x / a), (this.y = c.y / a), (this.z = c.z / a))
    return this
  }
  P.prototype.setAxisAngleFromRotationMatrix = function (c) {
    var a, b, d
    c = c.elements
    var e = c[0]
    d = c[4]
    var h = c[8],
      l = c[1],
      q = c[5],
      f = c[9]
    b = c[2]
    a = c[6]
    var g = c[10]
    if (
      0.01 > Math.abs(d - l) &&
      0.01 > Math.abs(h - b) &&
      0.01 > Math.abs(f - a)
    ) {
      if (
        0.1 > Math.abs(d + l) &&
        0.1 > Math.abs(h + b) &&
        0.1 > Math.abs(f + a) &&
        0.1 > Math.abs(e + q + g - 3)
      )
        return this.set(1, 0, 0, 0), this
      c = Math.PI
      e = (e + 1) / 2
      q = (q + 1) / 2
      g = (g + 1) / 2
      d = (d + l) / 4
      h = (h + b) / 4
      f = (f + a) / 4
      e > q && e > g
        ? 0.01 > e
          ? ((a = 0), (d = b = 0.707106781))
          : ((a = Math.sqrt(e)), (b = d / a), (d = h / a))
        : q > g
        ? 0.01 > q
          ? ((a = 0.707106781), (b = 0), (d = 0.707106781))
          : ((b = Math.sqrt(q)), (a = d / b), (d = f / b))
        : 0.01 > g
        ? ((b = a = 0.707106781), (d = 0))
        : ((d = Math.sqrt(g)), (a = h / d), (b = f / d))
      this.set(a, b, d, c)
      return this
    }
    c = Math.sqrt((a - f) * (a - f) + (h - b) * (h - b) + (l - d) * (l - d))
    0.001 > Math.abs(c) && (c = 1)
    this.x = (a - f) / c
    this.y = (h - b) / c
    this.z = (l - d) / c
    this.w = Math.acos((e + q + g - 1) / 2)
    return this
  }
  P.prototype.min = function (c) {
    this.x = Math.min(this.x, c.x)
    this.y = Math.min(this.y, c.y)
    this.z = Math.min(this.z, c.z)
    this.w = Math.min(this.w, c.w)
    return this
  }
  P.prototype.max = function (c) {
    this.x = Math.max(this.x, c.x)
    this.y = Math.max(this.y, c.y)
    this.z = Math.max(this.z, c.z)
    this.w = Math.max(this.w, c.w)
    return this
  }
  P.prototype.clamp = function (c, a) {
    this.x = Math.max(c.x, Math.min(a.x, this.x))
    this.y = Math.max(c.y, Math.min(a.y, this.y))
    this.z = Math.max(c.z, Math.min(a.z, this.z))
    this.w = Math.max(c.w, Math.min(a.w, this.w))
    return this
  }
  P.prototype.clampScalar = function (c, a) {
    this.x = Math.max(c, Math.min(a, this.x))
    this.y = Math.max(c, Math.min(a, this.y))
    this.z = Math.max(c, Math.min(a, this.z))
    this.w = Math.max(c, Math.min(a, this.w))
    return this
  }
  P.prototype.clampLength = function (c, a) {
    var b = this.length()
    return this.divideScalar(b || 1).multiplyScalar(Math.max(c, Math.min(a, b)))
  }
  P.prototype.floor = function () {
    this.x = Math.floor(this.x)
    this.y = Math.floor(this.y)
    this.z = Math.floor(this.z)
    this.w = Math.floor(this.w)
    return this
  }
  P.prototype.ceil = function () {
    this.x = Math.ceil(this.x)
    this.y = Math.ceil(this.y)
    this.z = Math.ceil(this.z)
    this.w = Math.ceil(this.w)
    return this
  }
  P.prototype.round = function () {
    this.x = Math.round(this.x)
    this.y = Math.round(this.y)
    this.z = Math.round(this.z)
    this.w = Math.round(this.w)
    return this
  }
  P.prototype.roundToZero = function () {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x)
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y)
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z)
    this.w = 0 > this.w ? Math.ceil(this.w) : Math.floor(this.w)
    return this
  }
  P.prototype.negate = function () {
    this.x = -this.x
    this.y = -this.y
    this.z = -this.z
    this.w = -this.w
    return this
  }
  P.prototype.dot = function (c) {
    return this.x * c.x + this.y * c.y + this.z * c.z + this.w * c.w
  }
  P.prototype.lengthSq = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
  }
  P.prototype.length = function () {
    return Math.sqrt(
      this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w
    )
  }
  P.prototype.manhattanLength = function () {
    return (
      Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z) + Math.abs(this.w)
    )
  }
  P.prototype.normalize = function () {
    return this.divideScalar(this.length() || 1)
  }
  P.prototype.setLength = function (c) {
    return this.normalize().multiplyScalar(c)
  }
  P.prototype.lerp = function (c, a) {
    this.x += (c.x - this.x) * a
    this.y += (c.y - this.y) * a
    this.z += (c.z - this.z) * a
    this.w += (c.w - this.w) * a
    return this
  }
  P.prototype.lerpVectors = function (c, a, b) {
    this.x = c.x + (a.x - c.x) * b
    this.y = c.y + (a.y - c.y) * b
    this.z = c.z + (a.z - c.z) * b
    this.w = c.w + (a.w - c.w) * b
    return this
  }
  P.prototype.equals = function (c) {
    return c.x === this.x && c.y === this.y && c.z === this.z && c.w === this.w
  }
  P.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    this.x = c[a]
    this.y = c[a + 1]
    this.z = c[a + 2]
    this.w = c[a + 3]
    return this
  }
  P.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    c[a] = this.x
    c[a + 1] = this.y
    c[a + 2] = this.z
    c[a + 3] = this.w
    return c
  }
  P.prototype.from_0x3 = function (c, a, b) {
    void 0 !== b &&
      console.warn('THREE.Vector4: offset has been removed from .from_0x3().')
    this.x = c.getX(a)
    this.y = c.getY(a)
    this.z = c.getZ(a)
    this.w = c.getW(a)
    return this
  }
  P.prototype.random = function () {
    this.x = Math.random()
    this.y = Math.random()
    this.z = Math.random()
    this.w = Math.random()
    return this
  }
  Object.defineProperties(P.prototype, Ie)
  k.prototype = Object.assign(Object.create(m.prototype), {
    constructor: k,
    isWebGLRenderTarget: !0,
    setSize: function (c, a) {
      if (this.width !== c || this.height !== a)
        (this.width = c),
          (this.height = a),
          (this.texture.image.width = c),
          (this.texture.image.height = a),
          this.dispose()
      this.viewport.set(0, 0, c, a)
      this.scissor.set(0, 0, c, a)
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    copy: function (c) {
      this.width = c.width
      this.height = c.height
      this.viewport.copy(c.viewport)
      this.texture = c.texture.clone()
      this.depthBuffer = c.depthBuffer
      this.stencilBuffer = c.stencilBuffer
      this.depthTexture = c.depthTexture
      return this
    },
    dispose: function () {
      this.dispatchEvent({ type: 'dispose' })
    },
  })
  r.prototype = Object.assign(Object.create(k.prototype), {
    constructor: r,
    isWebGLMultisampleRenderTarget: !0,
    copy: function (c) {
      k.prototype.copy.call(this, c)
      this.samples = c.samples
      return this
    },
  })
  var Z = function (c, a, b, d) {
      void 0 === c && (c = 0)
      void 0 === a && (a = 0)
      void 0 === b && (b = 0)
      void 0 === d && (d = 1)
      Object.defineProperty(this, 'isQuaternion', { value: !0 })
      this._x = c
      this._y = a
      this._z = b
      this._w = d
    },
    Rb = {
      x: { configurable: !0 },
      y: { configurable: !0 },
      z: { configurable: !0 },
      w: { configurable: !0 },
    }
  Z.slerp = function (c, a, b, d) {
    return b.copy(c).slerp(a, d)
  }
  Z.slerpFlat = function (c, a, b, d, e, h, l) {
    var q = b[d + 0],
      f = b[d + 1],
      g = b[d + 2]
    b = b[d + 3]
    d = e[h + 0]
    var k = e[h + 1],
      m = e[h + 2]
    e = e[h + 3]
    if (b !== e || q !== d || f !== k || g !== m) {
      h = 1 - l
      var D = q * d + f * k + g * m + b * e,
        n = 0 <= D ? 1 : -1,
        p = 1 - D * D
      p > Number.EPSILON &&
        ((p = Math.sqrt(p)),
        (D = Math.atan2(p, D * n)),
        (h = Math.sin(h * D) / p),
        (l = Math.sin(l * D) / p))
      n *= l
      q = q * h + d * n
      f = f * h + k * n
      g = g * h + m * n
      b = b * h + e * n
      h === 1 - l &&
        ((l = 1 / Math.sqrt(q * q + f * f + g * g + b * b)),
        (q *= l),
        (f *= l),
        (g *= l),
        (b *= l))
    }
    c[a] = q
    c[a + 1] = f
    c[a + 2] = g
    c[a + 3] = b
  }
  Z.multiplyQuaternionsFlat = function (c, a, b, d, e, h) {
    var l = b[d],
      q = b[d + 1],
      f = b[d + 2]
    b = b[d + 3]
    d = e[h]
    var g = e[h + 1],
      k = e[h + 2]
    e = e[h + 3]
    c[a] = l * e + b * d + q * k - f * g
    c[a + 1] = q * e + b * g + f * d - l * k
    c[a + 2] = f * e + b * k + l * g - q * d
    c[a + 3] = b * e - l * d - q * g - f * k
    return c
  }
  Rb.x.get = function () {
    return this._x
  }
  Rb.x.set = function (c) {
    this._x = c
    this._onChangeCallback()
  }
  Rb.y.get = function () {
    return this._y
  }
  Rb.y.set = function (c) {
    this._y = c
    this._onChangeCallback()
  }
  Rb.z.get = function () {
    return this._z
  }
  Rb.z.set = function (c) {
    this._z = c
    this._onChangeCallback()
  }
  Rb.w.get = function () {
    return this._w
  }
  Rb.w.set = function (c) {
    this._w = c
    this._onChangeCallback()
  }
  Z.prototype.set = function (c, a, b, d) {
    this._x = c
    this._y = a
    this._z = b
    this._w = d
    this._onChangeCallback()
    return this
  }
  Z.prototype.clone = function () {
    return new this.constructor(this._x, this._y, this._z, this._w)
  }
  Z.prototype.copy = function (c) {
    this._x = c.x
    this._y = c.y
    this._z = c.z
    this._w = c.w
    this._onChangeCallback()
    return this
  }
  Z.prototype.setFromEuler = function (c, a) {
    if (!c || !c.isEuler)
      throw Error(
        'THREE.Quaternion: .setFromEuler() now expects an Euler rotation rather than a _0x1 and order.'
      )
    var b = c._x,
      d = c._y,
      e = c._z,
      h = c._order,
      l = Math.cos,
      q = Math.sin,
      f = l(b / 2),
      g = l(d / 2),
      l = l(e / 2),
      b = q(b / 2),
      d = q(d / 2),
      e = q(e / 2)
    switch (h) {
      case 'XYZ':
        this._x = b * g * l + f * d * e
        this._y = f * d * l - b * g * e
        this._z = f * g * e + b * d * l
        this._w = f * g * l - b * d * e
        break
      case 'YXZ':
        this._x = b * g * l + f * d * e
        this._y = f * d * l - b * g * e
        this._z = f * g * e - b * d * l
        this._w = f * g * l + b * d * e
        break
      case 'ZXY':
        this._x = b * g * l - f * d * e
        this._y = f * d * l + b * g * e
        this._z = f * g * e + b * d * l
        this._w = f * g * l - b * d * e
        break
      case 'ZYX':
        this._x = b * g * l - f * d * e
        this._y = f * d * l + b * g * e
        this._z = f * g * e - b * d * l
        this._w = f * g * l + b * d * e
        break
      case 'YZX':
        this._x = b * g * l + f * d * e
        this._y = f * d * l + b * g * e
        this._z = f * g * e - b * d * l
        this._w = f * g * l - b * d * e
        break
      case 'XZY':
        this._x = b * g * l - f * d * e
        this._y = f * d * l - b * g * e
        this._z = f * g * e + b * d * l
        this._w = f * g * l + b * d * e
        break
      default:
        console.warn(
          'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + h
        )
    }
    !1 !== a && this._onChangeCallback()
    return this
  }
  Z.prototype.setFromAxisAngle = function (c, a) {
    var b = a / 2,
      d = Math.sin(b)
    this._x = c.x * d
    this._y = c.y * d
    this._z = c.z * d
    this._w = Math.cos(b)
    this._onChangeCallback()
    return this
  }
  Z.prototype.setFromRotationMatrix = function (c) {
    var a = c.elements,
      b = a[0]
    c = a[4]
    var d = a[8],
      e = a[1],
      h = a[5],
      l = a[9],
      q = a[2],
      f = a[6],
      a = a[10],
      g = b + h + a
    0 < g
      ? ((b = 0.5 / Math.sqrt(g + 1)),
        (this._w = 0.25 / b),
        (this._x = (f - l) * b),
        (this._y = (d - q) * b),
        (this._z = (e - c) * b))
      : b > h && b > a
      ? ((b = 2 * Math.sqrt(1 + b - h - a)),
        (this._w = (f - l) / b),
        (this._x = 0.25 * b),
        (this._y = (c + e) / b),
        (this._z = (d + q) / b))
      : h > a
      ? ((b = 2 * Math.sqrt(1 + h - b - a)),
        (this._w = (d - q) / b),
        (this._x = (c + e) / b),
        (this._y = 0.25 * b),
        (this._z = (l + f) / b))
      : ((b = 2 * Math.sqrt(1 + a - b - h)),
        (this._w = (e - c) / b),
        (this._x = (d + q) / b),
        (this._y = (l + f) / b),
        (this._z = 0.25 * b))
    this._onChangeCallback()
    return this
  }
  Z.prototype.setFromUnitVectors = function (c, a) {
    var b = c.dot(a) + 1
    1e-6 > b
      ? ((b = 0),
        Math.abs(c.x) > Math.abs(c.z)
          ? ((this._x = -c.y), (this._y = c.x), (this._z = 0))
          : ((this._x = 0), (this._y = -c.z), (this._z = c.y)))
      : ((this._x = c.y * a.z - c.z * a.y),
        (this._y = c.z * a.x - c.x * a.z),
        (this._z = c.x * a.y - c.y * a.x))
    this._w = b
    return this.normalize()
  }
  Z.prototype.angleTo = function (c) {
    return 2 * Math.acos(Math.abs(ea.clamp(this.dot(c), -1, 1)))
  }
  Z.prototype.rotateTowards = function (c, a) {
    var b = this.angleTo(c)
    if (0 === b) return this
    this.slerp(c, Math.min(1, a / b))
    return this
  }
  Z.prototype.identity = function () {
    return this.set(0, 0, 0, 1)
  }
  Z.prototype.inverse = function () {
    return this.conjugate()
  }
  Z.prototype.conjugate = function () {
    this._x *= -1
    this._y *= -1
    this._z *= -1
    this._onChangeCallback()
    return this
  }
  Z.prototype.dot = function (c) {
    return this._x * c._x + this._y * c._y + this._z * c._z + this._w * c._w
  }
  Z.prototype.lengthSq = function () {
    return (
      this._x * this._x +
      this._y * this._y +
      this._z * this._z +
      this._w * this._w
    )
  }
  Z.prototype.length = function () {
    return Math.sqrt(
      this._x * this._x +
        this._y * this._y +
        this._z * this._z +
        this._w * this._w
    )
  }
  Z.prototype.normalize = function () {
    var c = this.length()
    0 === c
      ? ((this._z = this._y = this._x = 0), (this._w = 1))
      : ((c = 1 / c),
        (this._x *= c),
        (this._y *= c),
        (this._z *= c),
        (this._w *= c))
    this._onChangeCallback()
    return this
  }
  Z.prototype.multiply = function (c, a) {
    return void 0 !== a
      ? (console.warn(
          'THREE.Quaternion: .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.'
        ),
        this.multiplyQuaternions(c, a))
      : this.multiplyQuaternions(this, c)
  }
  Z.prototype.premultiply = function (c) {
    return this.multiplyQuaternions(c, this)
  }
  Z.prototype.multiplyQuaternions = function (c, a) {
    var b = c._x,
      d = c._y,
      e = c._z,
      h = c._w,
      l = a._x,
      q = a._y,
      f = a._z,
      g = a._w
    this._x = b * g + h * l + d * f - e * q
    this._y = d * g + h * q + e * l - b * f
    this._z = e * g + h * f + b * q - d * l
    this._w = h * g - b * l - d * q - e * f
    this._onChangeCallback()
    return this
  }
  Z.prototype.slerp = function (c, a) {
    if (0 === a) return this
    if (1 === a) return this.copy(c)
    var b = this._x,
      d = this._y,
      e = this._z,
      h = this._w,
      l = h * c._w + b * c._x + d * c._y + e * c._z
    0 > l
      ? ((this._w = -c._w),
        (this._x = -c._x),
        (this._y = -c._y),
        (this._z = -c._z),
        (l = -l))
      : this.copy(c)
    if (1 <= l)
      return (this._w = h), (this._x = b), (this._y = d), (this._z = e), this
    var q = 1 - l * l
    if (q <= Number.EPSILON)
      return (
        (q = 1 - a),
        (this._w = q * h + a * this._w),
        (this._x = q * b + a * this._x),
        (this._y = q * d + a * this._y),
        (this._z = q * e + a * this._z),
        this.normalize(),
        this._onChangeCallback(),
        this
      )
    var q = Math.sqrt(q),
      f = Math.atan2(q, l),
      l = Math.sin((1 - a) * f) / q,
      q = Math.sin(a * f) / q
    this._w = h * l + this._w * q
    this._x = b * l + this._x * q
    this._y = d * l + this._y * q
    this._z = e * l + this._z * q
    this._onChangeCallback()
    return this
  }
  Z.prototype.equals = function (c) {
    return (
      c._x === this._x &&
      c._y === this._y &&
      c._z === this._z &&
      c._w === this._w
    )
  }
  Z.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    this._x = c[a]
    this._y = c[a + 1]
    this._z = c[a + 2]
    this._w = c[a + 3]
    this._onChangeCallback()
    return this
  }
  Z.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    c[a] = this._x
    c[a + 1] = this._y
    c[a + 2] = this._z
    c[a + 3] = this._w
    return c
  }
  Z.prototype.from_0x3 = function (c, a) {
    this._x = c.getX(a)
    this._y = c.getY(a)
    this._z = c.getZ(a)
    this._w = c.getW(a)
    return this
  }
  Z.prototype._onChange = function (c) {
    this._onChangeCallback = c
    return this
  }
  Z.prototype._onChangeCallback = function () {}
  Object.defineProperties(Z.prototype, Rb)
  var p = function (c, a, b) {
    void 0 === c && (c = 0)
    void 0 === a && (a = 0)
    void 0 === b && (b = 0)
    Object.defineProperty(this, 'is_0x1', { value: !0 })
    this.x = c
    this.y = a
    this.z = b
  }
  p.prototype.set = function (c, a, b) {
    void 0 === b && (b = this.z)
    this.x = c
    this.y = a
    this.z = b
    return this
  }
  p.prototype.setScalar = function (c) {
    this.z = this.y = this.x = c
    return this
  }
  p.prototype.setX = function (c) {
    this.x = c
    return this
  }
  p.prototype.setY = function (c) {
    this.y = c
    return this
  }
  p.prototype.setZ = function (c) {
    this.z = c
    return this
  }
  p.prototype.setComponent = function (c, a) {
    switch (c) {
      case 0:
        this.x = a
        break
      case 1:
        this.y = a
        break
      case 2:
        this.z = a
        break
      default:
        throw Error('index is out of range: ' + c)
    }
    return this
  }
  p.prototype.getComponent = function (c) {
    switch (c) {
      case 0:
        return this.x
      case 1:
        return this.y
      case 2:
        return this.z
      default:
        throw Error('index is out of range: ' + c)
    }
  }
  p.prototype.clone = function () {
    return new this.constructor(this.x, this.y, this.z)
  }
  p.prototype.copy = function (c) {
    this.x = c.x
    this.y = c.y
    this.z = c.z
    return this
  }
  p.prototype.add = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE._0x1: .add() now only accepts one argument. Use .addVectors( a, b ) instead.'
        ),
        this.addVectors(c, a)
      )
    this.x += c.x
    this.y += c.y
    this.z += c.z
    return this
  }
  p.prototype.addScalar = function (c) {
    this.x += c
    this.y += c
    this.z += c
    return this
  }
  p.prototype.addVectors = function (c, a) {
    this.x = c.x + a.x
    this.y = c.y + a.y
    this.z = c.z + a.z
    return this
  }
  p.prototype.addScaledVector = function (c, a) {
    this.x += c.x * a
    this.y += c.y * a
    this.z += c.z * a
    return this
  }
  p.prototype.sub = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE._0x1: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.'
        ),
        this.subVectors(c, a)
      )
    this.x -= c.x
    this.y -= c.y
    this.z -= c.z
    return this
  }
  p.prototype.subScalar = function (c) {
    this.x -= c
    this.y -= c
    this.z -= c
    return this
  }
  p.prototype.subVectors = function (c, a) {
    this.x = c.x - a.x
    this.y = c.y - a.y
    this.z = c.z - a.z
    return this
  }
  p.prototype.multiply = function (c, a) {
    if (void 0 !== a)
      return (
        console.warn(
          'THREE._0x1: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.'
        ),
        this.multiplyVectors(c, a)
      )
    this.x *= c.x
    this.y *= c.y
    this.z *= c.z
    return this
  }
  p.prototype.multiplyScalar = function (c) {
    this.x *= c
    this.y *= c
    this.z *= c
    return this
  }
  p.prototype.multiplyVectors = function (c, a) {
    this.x = c.x * a.x
    this.y = c.y * a.y
    this.z = c.z * a.z
    return this
  }
  p.prototype.applyEuler = function (c) {
    ;(c && c.isEuler) ||
      console.error(
        'THREE._0x1: .applyEuler() now expects an Euler rotation rather than a _0x1 and order.'
      )
    return this.applyQuaternion(oi.setFromEuler(c))
  }
  p.prototype.applyAxisAngle = function (c, a) {
    return this.applyQuaternion(oi.setFromAxisAngle(c, a))
  }
  p.prototype.applyMatrix3 = function (c) {
    var a = this.x,
      b = this.y,
      d = this.z
    c = c.elements
    this.x = c[0] * a + c[3] * b + c[6] * d
    this.y = c[1] * a + c[4] * b + c[7] * d
    this.z = c[2] * a + c[5] * b + c[8] * d
    return this
  }
  p.prototype.applyNormalMatrix = function (c) {
    return this.applyMatrix3(c).normalize()
  }
  p.prototype.applyMatrix4 = function (c) {
    var a = this.x,
      b = this.y,
      d = this.z
    c = c.elements
    var e = 1 / (c[3] * a + c[7] * b + c[11] * d + c[15])
    this.x = (c[0] * a + c[4] * b + c[8] * d + c[12]) * e
    this.y = (c[1] * a + c[5] * b + c[9] * d + c[13]) * e
    this.z = (c[2] * a + c[6] * b + c[10] * d + c[14]) * e
    return this
  }
  p.prototype.applyQuaternion = function (c) {
    var a = this.x,
      b = this.y,
      d = this.z,
      e = c.x,
      h = c.y,
      l = c.z
    c = c.w
    var q = c * a + h * d - l * b,
      f = c * b + l * a - e * d,
      g = c * d + e * b - h * a,
      a = -e * a - h * b - l * d
    this.x = q * c + a * -e + f * -l - g * -h
    this.y = f * c + a * -h + g * -e - q * -l
    this.z = g * c + a * -l + q * -h - f * -e
    return this
  }
  p.prototype.project = function (c) {
    return this.applyMatrix4(c.matrixWorldInverse).applyMatrix4(
      c.projectionMatrix
    )
  }
  p.prototype.unproject = function (c) {
    return this.applyMatrix4(c.projectionMatrixInverse).applyMatrix4(
      c.matrixWorld
    )
  }
  p.prototype.transformDirection = function (c) {
    var a = this.x,
      b = this.y,
      d = this.z
    c = c.elements
    this.x = c[0] * a + c[4] * b + c[8] * d
    this.y = c[1] * a + c[5] * b + c[9] * d
    this.z = c[2] * a + c[6] * b + c[10] * d
    return this.normalize()
  }
  p.prototype.divide = function (c) {
    this.x /= c.x
    this.y /= c.y
    this.z /= c.z
    return this
  }
  p.prototype.divideScalar = function (c) {
    return this.multiplyScalar(1 / c)
  }
  p.prototype.min = function (c) {
    this.x = Math.min(this.x, c.x)
    this.y = Math.min(this.y, c.y)
    this.z = Math.min(this.z, c.z)
    return this
  }
  p.prototype.max = function (c) {
    this.x = Math.max(this.x, c.x)
    this.y = Math.max(this.y, c.y)
    this.z = Math.max(this.z, c.z)
    return this
  }
  p.prototype.clamp = function (c, a) {
    this.x = Math.max(c.x, Math.min(a.x, this.x))
    this.y = Math.max(c.y, Math.min(a.y, this.y))
    this.z = Math.max(c.z, Math.min(a.z, this.z))
    return this
  }
  p.prototype.clampScalar = function (c, a) {
    this.x = Math.max(c, Math.min(a, this.x))
    this.y = Math.max(c, Math.min(a, this.y))
    this.z = Math.max(c, Math.min(a, this.z))
    return this
  }
  p.prototype.clampLength = function (c, a) {
    var b = this.length()
    return this.divideScalar(b || 1).multiplyScalar(Math.max(c, Math.min(a, b)))
  }
  p.prototype.floor = function () {
    this.x = Math.floor(this.x)
    this.y = Math.floor(this.y)
    this.z = Math.floor(this.z)
    return this
  }
  p.prototype.ceil = function () {
    this.x = Math.ceil(this.x)
    this.y = Math.ceil(this.y)
    this.z = Math.ceil(this.z)
    return this
  }
  p.prototype.round = function () {
    this.x = Math.round(this.x)
    this.y = Math.round(this.y)
    this.z = Math.round(this.z)
    return this
  }
  p.prototype.roundToZero = function () {
    this.x = 0 > this.x ? Math.ceil(this.x) : Math.floor(this.x)
    this.y = 0 > this.y ? Math.ceil(this.y) : Math.floor(this.y)
    this.z = 0 > this.z ? Math.ceil(this.z) : Math.floor(this.z)
    return this
  }
  p.prototype.negate = function () {
    this.x = -this.x
    this.y = -this.y
    this.z = -this.z
    return this
  }
  p.prototype.dot = function (c) {
    return this.x * c.x + this.y * c.y + this.z * c.z
  }
  p.prototype.lengthSq = function () {
    return this.x * this.x + this.y * this.y + this.z * this.z
  }
  p.prototype.length = function () {
    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z)
  }
  p.prototype.manhattanLength = function () {
    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z)
  }
  p.prototype.normalize = function () {
    return this.divideScalar(this.length() || 1)
  }
  p.prototype.setLength = function (c) {
    return this.normalize().multiplyScalar(c)
  }
  p.prototype.lerp = function (c, a) {
    this.x += (c.x - this.x) * a
    this.y += (c.y - this.y) * a
    this.z += (c.z - this.z) * a
    return this
  }
  p.prototype.lerpVectors = function (c, a, b) {
    this.x = c.x + (a.x - c.x) * b
    this.y = c.y + (a.y - c.y) * b
    this.z = c.z + (a.z - c.z) * b
    return this
  }
  p.prototype.cross = function (c, a) {
    return void 0 !== a
      ? (console.warn(
          'THREE._0x1: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.'
        ),
        this.crossVectors(c, a))
      : this.crossVectors(this, c)
  }
  p.prototype.crossVectors = function (c, a) {
    var b = c.x,
      d = c.y,
      e = c.z,
      h = a.x,
      l = a.y,
      q = a.z
    this.x = d * q - e * l
    this.y = e * h - b * q
    this.z = b * l - d * h
    return this
  }
  p.prototype.projectOnVector = function (c) {
    var a = c.lengthSq()
    if (0 === a) return this.set(0, 0, 0)
    a = c.dot(this) / a
    return this.copy(c).multiplyScalar(a)
  }
  p.prototype.projectOnpl = function (c) {
    Xg.copy(this).projectOnVector(c)
    return this.sub(Xg)
  }
  p.prototype.reflect = function (c) {
    return this.sub(Xg.copy(c).multiplyScalar(2 * this.dot(c)))
  }
  p.prototype.angleTo = function (c) {
    var a = Math.sqrt(this.lengthSq() * c.lengthSq())
    if (0 === a) return Math.PI / 2
    c = this.dot(c) / a
    return Math.acos(ea.clamp(c, -1, 1))
  }
  p.prototype.distanceTo = function (c) {
    return Math.sqrt(this.distanceToSquared(c))
  }
  p.prototype.distanceToSquared = function (c) {
    var a = this.x - c.x,
      b = this.y - c.y
    c = this.z - c.z
    return a * a + b * b + c * c
  }
  p.prototype.manhattanDistanceTo = function (c) {
    return (
      Math.abs(this.x - c.x) + Math.abs(this.y - c.y) + Math.abs(this.z - c.z)
    )
  }
  p.prototype.setFromb6 = function (c) {
    return this.setFromb6Coords(c.radius, c.phi, c.theta)
  }
  p.prototype.setFromb6Coords = function (c, a, b) {
    var d = Math.sin(a) * c
    this.x = d * Math.sin(b)
    this.y = Math.cos(a) * c
    this.z = d * Math.cos(b)
    return this
  }
  p.prototype.setFromb6Coords_qmodel = function (c, a, b) {
    var d = Math.sin(a) * c
    this.x = d * Math.sin(b)
    this.y = d * Math.cos(b)
    this.z = Math.cos(a) * c
    return this
  }
  p.prototype.setFromCylindrical = function (c) {
    return this.setFromCylindricalCoords(c.radius, c.theta, c.y)
  }
  p.prototype.setFromCylindricalCoords = function (c, a, b) {
    this.x = c * Math.sin(a)
    this.y = b
    this.z = c * Math.cos(a)
    return this
  }
  p.prototype.setFromMatrixPosition = function (c) {
    c = c.elements
    this.x = c[12]
    this.y = c[13]
    this.z = c[14]
    return this
  }
  p.prototype.setFromMatrixScale = function (c) {
    var a = this.setFromMatrixColumn(c, 0).length(),
      b = this.setFromMatrixColumn(c, 1).length()
    c = this.setFromMatrixColumn(c, 2).length()
    this.x = a
    this.y = b
    this.z = c
    return this
  }
  p.prototype.setFromMatrixColumn = function (c, a) {
    return this.fromArray(c.elements, 4 * a)
  }
  p.prototype.setFromMatrix3Column = function (c, a) {
    return this.fromArray(c.elements, 3 * a)
  }
  p.prototype.equals = function (c) {
    return c.x === this.x && c.y === this.y && c.z === this.z
  }
  p.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    this.x = c[a]
    this.y = c[a + 1]
    this.z = c[a + 2]
    return this
  }
  p.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    c[a] = this.x
    c[a + 1] = this.y
    c[a + 2] = this.z
    return c
  }
  p.prototype.from_0x3 = function (c, a, b) {
    void 0 !== b &&
      console.warn('THREE._0x1: offset has been removed from .from_0x3().')
    this.x = c.getX(a)
    this.y = c.getY(a)
    this.z = c.getZ(a)
    return this
  }
  p.prototype.random = function () {
    this.x = Math.random()
    this.y = Math.random()
    this.z = Math.random()
    return this
  }
  var Xg = new p(),
    oi = new Z(),
    ba = function (c, a) {
      Object.defineProperty(this, 'isb7', { value: !0 })
      this.min = void 0 !== c ? c : new p(Infinity, Infinity, Infinity)
      this.max = void 0 !== a ? a : new p(-Infinity, -Infinity, -Infinity)
    }
  ba.prototype.set = function (c, a) {
    this.min.copy(c)
    this.max.copy(a)
    return this
  }
  ba.prototype.setFromArray = function (c) {
    for (
      var a = Infinity,
        b = Infinity,
        d = Infinity,
        e = -Infinity,
        h = -Infinity,
        l = -Infinity,
        q = 0,
        f = c.length;
      q < f;
      q += 3
    ) {
      var g = c[q],
        k = c[q + 1],
        m = c[q + 2]
      g < a && (a = g)
      k < b && (b = k)
      m < d && (d = m)
      g > e && (e = g)
      k > h && (h = k)
      m > l && (l = m)
    }
    this.min.set(a, b, d)
    this.max.set(e, h, l)
    return this
  }
  ba.prototype.setFrom_0x3 = function (c) {
    for (
      var a = Infinity,
        b = Infinity,
        d = Infinity,
        e = -Infinity,
        h = -Infinity,
        l = -Infinity,
        f = 0,
        t = c.count;
      f < t;
      f++
    ) {
      var g = c.getX(f),
        k = c.getY(f),
        m = c.getZ(f)
      g < a && (a = g)
      k < b && (b = k)
      m < d && (d = m)
      g > e && (e = g)
      k > h && (h = k)
      m > l && (l = m)
    }
    this.min.set(a, b, d)
    this.max.set(e, h, l)
    return this
  }
  ba.prototype.setFromPoints = function (c) {
    this.makeEmpty()
    for (var a = 0, b = c.length; a < b; a++) this.expandByPoint(c[a])
    return this
  }
  ba.prototype.setFromCenterAndSize = function (c, a) {
    var b = Je.copy(a).multiplyScalar(0.5)
    this.min.copy(c).sub(b)
    this.max.copy(c).add(b)
    return this
  }
  ba.prototype.setFromObject = function (c) {
    this.makeEmpty()
    return this.expandByObject(c)
  }
  ba.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  ba.prototype.copy = function (c) {
    this.min.copy(c.min)
    this.max.copy(c.max)
    return this
  }
  ba.prototype.makeEmpty = function () {
    this.min.x = this.min.y = this.min.z = Infinity
    this.max.x = this.max.y = this.max.z = -Infinity
    return this
  }
  ba.prototype.isEmpty = function () {
    return (
      this.max.x < this.min.x ||
      this.max.y < this.min.y ||
      this.max.z < this.min.z
    )
  }
  ba.prototype.getCenter = function (c) {
    void 0 === c &&
      (console.warn('THREE.b7: .getCenter() target is now required'),
      (c = new p()))
    return this.isEmpty()
      ? c.set(0, 0, 0)
      : c.addVectors(this.min, this.max).multiplyScalar(0.5)
  }
  ba.prototype.getSize = function (c) {
    void 0 === c &&
      (console.warn('THREE.b7: .getSize() target is now required'),
      (c = new p()))
    return this.isEmpty() ? c.set(0, 0, 0) : c.subVectors(this.max, this.min)
  }
  ba.prototype.expandByPoint = function (c) {
    this.min.min(c)
    this.max.max(c)
    return this
  }
  ba.prototype.expandByVector = function (c) {
    this.min.sub(c)
    this.max.add(c)
    return this
  }
  ba.prototype.expandByScalar = function (c) {
    this.min.addScalar(-c)
    this.max.addScalar(c)
    return this
  }
  ba.prototype.expandByObject = function (c) {
    c.updateWorldMatrix(!1, !1)
    var a = c.geometry
    void 0 !== a &&
      (null === a.boundingBox && a.computeBoundingBox(),
      Yg.copy(a.boundingBox),
      Yg.applyMatrix4(c.matrixWorld),
      this.union(Yg))
    c = c.children
    for (var a = 0, b = c.length; a < b; a++) this.expandByObject(c[a])
    return this
  }
  ba.prototype.containsPoint = function (c) {
    return c.x < this.min.x ||
      c.x > this.max.x ||
      c.y < this.min.y ||
      c.y > this.max.y ||
      c.z < this.min.z ||
      c.z > this.max.z
      ? !1
      : !0
  }
  ba.prototype.containsBox = function (c) {
    return (
      this.min.x <= c.min.x &&
      c.max.x <= this.max.x &&
      this.min.y <= c.min.y &&
      c.max.y <= this.max.y &&
      this.min.z <= c.min.z &&
      c.max.z <= this.max.z
    )
  }
  ba.prototype.getParameter = function (c, a) {
    void 0 === a &&
      (console.warn('THREE.b7: .getParameter() target is now required'),
      (a = new p()))
    return a.set(
      (c.x - this.min.x) / (this.max.x - this.min.x),
      (c.y - this.min.y) / (this.max.y - this.min.y),
      (c.z - this.min.z) / (this.max.z - this.min.z)
    )
  }
  ba.prototype.intersectsBox = function (c) {
    return c.max.x < this.min.x ||
      c.min.x > this.max.x ||
      c.max.y < this.min.y ||
      c.min.y > this.max.y ||
      c.max.z < this.min.z ||
      c.min.z > this.max.z
      ? !1
      : !0
  }
  ba.prototype.intersectsSphere = function (c) {
    this.clampPoint(c.center, Je)
    return Je.distanceToSquared(c.center) <= c.radius * c.radius
  }
  ba.prototype.intersectspl = function (c) {
    var a, b
    0 < c.normal.x
      ? ((a = c.normal.x * this.min.x), (b = c.normal.x * this.max.x))
      : ((a = c.normal.x * this.max.x), (b = c.normal.x * this.min.x))
    0 < c.normal.y
      ? ((a += c.normal.y * this.min.y), (b += c.normal.y * this.max.y))
      : ((a += c.normal.y * this.max.y), (b += c.normal.y * this.min.y))
    0 < c.normal.z
      ? ((a += c.normal.z * this.min.z), (b += c.normal.z * this.max.z))
      : ((a += c.normal.z * this.max.z), (b += c.normal.z * this.min.z))
    return a <= -c.constant && b >= -c.constant
  }
  ba.prototype.intersectsTriangle = function (c) {
    if (this.isEmpty()) return !1
    this.getCenter(Ke)
    Jf.subVectors(this.max, Ke)
    Ed.subVectors(c.a, Ke)
    Fd.subVectors(c.b, Ke)
    Gd.subVectors(c.c, Ke)
    pc.subVectors(Fd, Ed)
    qc.subVectors(Gd, Fd)
    Lc.subVectors(Ed, Gd)
    c = [
      0,
      -pc.z,
      pc.y,
      0,
      -qc.z,
      qc.y,
      0,
      -Lc.z,
      Lc.y,
      pc.z,
      0,
      -pc.x,
      qc.z,
      0,
      -qc.x,
      Lc.z,
      0,
      -Lc.x,
      -pc.y,
      pc.x,
      0,
      -qc.y,
      qc.x,
      0,
      -Lc.y,
      Lc.x,
      0,
    ]
    if (!x(c, Ed, Fd, Gd, Jf)) return !1
    c = [1, 0, 0, 0, 1, 0, 0, 0, 1]
    if (!x(c, Ed, Fd, Gd, Jf)) return !1
    Kf.crossVectors(pc, qc)
    c = [Kf.x, Kf.y, Kf.z]
    return x(c, Ed, Fd, Gd, Jf)
  }
  ba.prototype.clampPoint = function (c, a) {
    void 0 === a &&
      (console.warn('THREE.b7: .clampPoint() target is now required'),
      (a = new p()))
    return a.copy(c).clamp(this.min, this.max)
  }
  ba.prototype.distanceToPoint = function (c) {
    return Je.copy(c).clamp(this.min, this.max).sub(c).length()
  }
  ba.prototype.getBoundingSphere = function (c) {
    void 0 === c &&
      console.error('THREE.b7: .getBoundingSphere() target is now required')
    this.getCenter(c.center)
    c.radius = 0.5 * this.getSize(Je).length()
    return c
  }
  ba.prototype.intersect = function (c) {
    this.min.max(c.min)
    this.max.min(c.max)
    this.isEmpty() && this.makeEmpty()
    return this
  }
  ba.prototype.union = function (c) {
    this.min.min(c.min)
    this.max.max(c.max)
    return this
  }
  ba.prototype.applyMatrix4 = function (c) {
    if (this.isEmpty()) return this
    Sb[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(c)
    Sb[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(c)
    Sb[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(c)
    Sb[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(c)
    Sb[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(c)
    Sb[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(c)
    Sb[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(c)
    Sb[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(c)
    this.setFromPoints(Sb)
    return this
  }
  ba.prototype.translate = function (c) {
    this.min.add(c)
    this.max.add(c)
    return this
  }
  ba.prototype.equals = function (c) {
    return c.min.equals(this.min) && c.max.equals(this.max)
  }
  var Sb = [
      new p(),
      new p(),
      new p(),
      new p(),
      new p(),
      new p(),
      new p(),
      new p(),
    ],
    Je = new p(),
    Yg = new ba(),
    Ed = new p(),
    Fd = new p(),
    Gd = new p(),
    pc = new p(),
    qc = new p(),
    Lc = new p(),
    Ke = new p(),
    Jf = new p(),
    Kf = new p(),
    uc = new p(),
    Gk = new ba(),
    ta = function (c, a) {
      this.center = void 0 !== c ? c : new p()
      this.radius = void 0 !== a ? a : -1
    }
  ta.prototype.set = function (c, a) {
    this.center.copy(c)
    this.radius = a
    return this
  }
  ta.prototype.setFromPoints = function (c, a) {
    var b = this.center
    void 0 !== a ? b.copy(a) : Gk.setFromPoints(c).getCenter(b)
    for (var d = 0, e = 0, h = c.length; e < h; e++)
      d = Math.max(d, b.distanceToSquared(c[e]))
    this.radius = Math.sqrt(d)
    return this
  }
  ta.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  ta.prototype.copy = function (c) {
    this.center.copy(c.center)
    this.radius = c.radius
    return this
  }
  ta.prototype.isEmpty = function () {
    return 0 > this.radius
  }
  ta.prototype.makeEmpty = function () {
    this.center.set(0, 0, 0)
    this.radius = -1
    return this
  }
  ta.prototype.containsPoint = function (c) {
    return c.distanceToSquared(this.center) <= this.radius * this.radius
  }
  ta.prototype.distanceToPoint = function (c) {
    return c.distanceTo(this.center) - this.radius
  }
  ta.prototype.intersectsSphere = function (c) {
    var a = this.radius + c.radius
    return c.center.distanceToSquared(this.center) <= a * a
  }
  ta.prototype.intersectsBox = function (c) {
    return c.intersectsSphere(this)
  }
  ta.prototype.intersectspl = function (c) {
    return Math.abs(c.distanceToPoint(this.center)) <= this.radius
  }
  ta.prototype.clampPoint = function (c, a) {
    var b = this.center.distanceToSquared(c)
    void 0 === a &&
      (console.warn('THREE.Sphere: .clampPoint() target is now required'),
      (a = new p()))
    a.copy(c)
    b > this.radius * this.radius &&
      (a.sub(this.center).normalize(),
      a.multiplyScalar(this.radius).add(this.center))
    return a
  }
  ta.prototype.getBoundingBox = function (c) {
    void 0 === c &&
      (console.warn('THREE.Sphere: .getBoundingBox() target is now required'),
      (c = new ba()))
    if (this.isEmpty()) return c.makeEmpty(), c
    c.set(this.center, this.center)
    c.expandByScalar(this.radius)
    return c
  }
  ta.prototype.applyMatrix4 = function (c) {
    this.center.applyMatrix4(c)
    this.radius *= c.getMaxScaleOnAxis()
    return this
  }
  ta.prototype.translate = function (c) {
    this.center.add(c)
    return this
  }
  ta.prototype.equals = function (c) {
    return c.center.equals(this.center) && c.radius === this.radius
  }
  var Tb = new p(),
    Zg = new p(),
    Lf = new p(),
    rc = new p(),
    $g = new p(),
    Mf = new p(),
    ah = new p(),
    pa = function (c, a) {
      this.origin = void 0 !== c ? c : new p()
      this.direction = void 0 !== a ? a : new p(0, 0, -1)
    }
  pa.prototype.set = function (c, a) {
    this.origin.copy(c)
    this.direction.copy(a)
    return this
  }
  pa.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  pa.prototype.copy = function (c) {
    this.origin.copy(c.origin)
    this.direction.copy(c.direction)
    return this
  }
  pa.prototype.at = function (c, a) {
    void 0 === a &&
      (console.warn('THREE.Ray: .at() target is now required'), (a = new p()))
    return a.copy(this.direction).multiplyScalar(c).add(this.origin)
  }
  pa.prototype.lookAt = function (c) {
    this.direction.copy(c).sub(this.origin).normalize()
    return this
  }
  pa.prototype.recast = function (c) {
    this.origin.copy(this.at(c, Tb))
    return this
  }
  pa.prototype.closestPointToPoint = function (c, a) {
    void 0 === a &&
      (console.warn('THREE.Ray: .closestPointToPoint() target is now required'),
      (a = new p()))
    a.subVectors(c, this.origin)
    var b = a.dot(this.direction)
    return 0 > b
      ? a.copy(this.origin)
      : a.copy(this.direction).multiplyScalar(b).add(this.origin)
  }
  pa.prototype.distanceToPoint = function (c) {
    return Math.sqrt(this.distanceSqToPoint(c))
  }
  pa.prototype.distanceSqToPoint = function (c) {
    var a = Tb.subVectors(c, this.origin).dot(this.direction)
    if (0 > a) return this.origin.distanceToSquared(c)
    Tb.copy(this.direction).multiplyScalar(a).add(this.origin)
    return Tb.distanceToSquared(c)
  }
  pa.prototype.distanceSqToSegment = function (c, a, b, d) {
    Zg.copy(c).add(a).multiplyScalar(0.5)
    Lf.copy(a).sub(c).normalize()
    rc.copy(this.origin).sub(Zg)
    var e = 0.5 * c.distanceTo(a),
      h = -this.direction.dot(Lf),
      l = rc.dot(this.direction),
      f = -rc.dot(Lf),
      t = rc.lengthSq(),
      g = Math.abs(1 - h * h),
      k
    0 < g
      ? ((c = h * f - l),
        (a = h * l - f),
        (k = e * g),
        0 <= c
          ? a >= -k
            ? a <= k
              ? ((e = 1 / g),
                (c *= e),
                (a *= e),
                (h = c * (c + h * a + 2 * l) + a * (h * c + a + 2 * f) + t))
              : ((a = e),
                (c = Math.max(0, -(h * a + l))),
                (h = -c * c + a * (a + 2 * f) + t))
            : ((a = -e),
              (c = Math.max(0, -(h * a + l))),
              (h = -c * c + a * (a + 2 * f) + t))
          : a <= -k
          ? ((c = Math.max(0, -(-h * e + l))),
            (a = 0 < c ? -e : Math.min(Math.max(-e, -f), e)),
            (h = -c * c + a * (a + 2 * f) + t))
          : a <= k
          ? ((c = 0),
            (a = Math.min(Math.max(-e, -f), e)),
            (h = a * (a + 2 * f) + t))
          : ((c = Math.max(0, -(h * e + l))),
            (a = 0 < c ? e : Math.min(Math.max(-e, -f), e)),
            (h = -c * c + a * (a + 2 * f) + t)))
      : ((a = 0 < h ? -e : e),
        (c = Math.max(0, -(h * a + l))),
        (h = -c * c + a * (a + 2 * f) + t))
    b && b.copy(this.direction).multiplyScalar(c).add(this.origin)
    d && d.copy(Lf).multiplyScalar(a).add(Zg)
    return h
  }
  pa.prototype.intersectSphere = function (c, a) {
    Tb.subVectors(c.center, this.origin)
    var b = Tb.dot(this.direction),
      d = Tb.dot(Tb) - b * b,
      e = c.radius * c.radius
    if (d > e) return null
    e = Math.sqrt(e - d)
    d = b - e
    b += e
    return 0 > d && 0 > b ? null : 0 > d ? this.at(b, a) : this.at(d, a)
  }
  pa.prototype.intersectsSphere = function (c) {
    return this.distanceSqToPoint(c.center) <= c.radius * c.radius
  }
  pa.prototype.distanceTopl = function (c) {
    var a = c.normal.dot(this.direction)
    if (0 === a) return 0 === c.distanceToPoint(this.origin) ? 0 : null
    c = -(this.origin.dot(c.normal) + c.constant) / a
    return 0 <= c ? c : null
  }
  pa.prototype.intersectpl = function (c, a) {
    var b = this.distanceTopl(c)
    return null === b ? null : this.at(b, a)
  }
  pa.prototype.intersectspl = function (c) {
    var a = c.distanceToPoint(this.origin)
    return 0 === a || 0 > c.normal.dot(this.direction) * a ? !0 : !1
  }
  pa.prototype.intersectBox = function (c, a) {
    var b, d, e, h, l
    d = 1 / this.direction.x
    h = 1 / this.direction.y
    l = 1 / this.direction.z
    var f = this.origin
    0 <= d
      ? ((b = (c.min.x - f.x) * d), (d *= c.max.x - f.x))
      : ((b = (c.max.x - f.x) * d), (d *= c.min.x - f.x))
    0 <= h
      ? ((e = (c.min.y - f.y) * h), (h *= c.max.y - f.y))
      : ((e = (c.max.y - f.y) * h), (h *= c.min.y - f.y))
    if (b > h || e > d) return null
    if (e > b || b !== b) b = e
    if (h < d || d !== d) d = h
    0 <= l
      ? ((e = (c.min.z - f.z) * l), (l *= c.max.z - f.z))
      : ((e = (c.max.z - f.z) * l), (l *= c.min.z - f.z))
    if (b > l || e > d) return null
    if (e > b || b !== b) b = e
    if (l < d || d !== d) d = l
    return 0 > d ? null : this.at(0 <= b ? b : d, a)
  }
  pa.prototype.intersectsBox = function (c) {
    return null !== this.intersectBox(c, Tb)
  }
  pa.prototype.intersectTriangle = function (c, a, b, d, e) {
    $g.subVectors(a, c)
    Mf.subVectors(b, c)
    ah.crossVectors($g, Mf)
    a = this.direction.dot(ah)
    if (0 < a) {
      if (d) return null
      d = 1
    } else if (0 > a) (d = -1), (a = -a)
    else return null
    rc.subVectors(this.origin, c)
    c = d * this.direction.dot(Mf.crossVectors(rc, Mf))
    if (0 > c) return null
    b = d * this.direction.dot($g.cross(rc))
    if (0 > b || c + b > a) return null
    c = -d * rc.dot(ah)
    return 0 > c ? null : this.at(c / a, e)
  }
  pa.prototype.applyMatrix4 = function (c) {
    this.origin.applyMatrix4(c)
    this.direction.transformDirection(c)
    return this
  }
  pa.prototype.equals = function (c) {
    return c.origin.equals(this.origin) && c.direction.equals(this.direction)
  }
  var O = function () {
    Object.defineProperty(this, 'isMatrix4', { value: !0 })
    this.elements = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
    0 < arguments.length &&
      console.error(
        'THREE.Matrix4: the constructor no longer reads arguments. use .set() instead.'
      )
  }
  O.prototype.set = function (c, a, b, d, e, h, l, f, t, g, k, m, n, p, r, u) {
    var q = this.elements
    q[0] = c
    q[4] = a
    q[8] = b
    q[12] = d
    q[1] = e
    q[5] = h
    q[9] = l
    q[13] = f
    q[2] = t
    q[6] = g
    q[10] = k
    q[14] = m
    q[3] = n
    q[7] = p
    q[11] = r
    q[15] = u
    return this
  }
  O.prototype.identity = function () {
    this.set(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.clone = function () {
    return new O().fromArray(this.elements)
  }
  O.prototype.copy = function (c) {
    var a = this.elements
    c = c.elements
    a[0] = c[0]
    a[1] = c[1]
    a[2] = c[2]
    a[3] = c[3]
    a[4] = c[4]
    a[5] = c[5]
    a[6] = c[6]
    a[7] = c[7]
    a[8] = c[8]
    a[9] = c[9]
    a[10] = c[10]
    a[11] = c[11]
    a[12] = c[12]
    a[13] = c[13]
    a[14] = c[14]
    a[15] = c[15]
    return this
  }
  O.prototype.copyPosition = function (c) {
    var a = this.elements
    c = c.elements
    a[12] = c[12]
    a[13] = c[13]
    a[14] = c[14]
    return this
  }
  O.prototype.extractBasis = function (c, a, b) {
    c.setFromMatrixColumn(this, 0)
    a.setFromMatrixColumn(this, 1)
    b.setFromMatrixColumn(this, 2)
    return this
  }
  O.prototype.makeBasis = function (c, a, b) {
    this.set(c.x, a.x, b.x, 0, c.y, a.y, b.y, 0, c.z, a.z, b.z, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.extractRotation = function (c) {
    var a = this.elements,
      b = c.elements,
      d = 1 / Hd.setFromMatrixColumn(c, 0).length(),
      e = 1 / Hd.setFromMatrixColumn(c, 1).length()
    c = 1 / Hd.setFromMatrixColumn(c, 2).length()
    a[0] = b[0] * d
    a[1] = b[1] * d
    a[2] = b[2] * d
    a[3] = 0
    a[4] = b[4] * e
    a[5] = b[5] * e
    a[6] = b[6] * e
    a[7] = 0
    a[8] = b[8] * c
    a[9] = b[9] * c
    a[10] = b[10] * c
    a[11] = 0
    a[12] = 0
    a[13] = 0
    a[14] = 0
    a[15] = 1
    return this
  }
  O.prototype.makeRotationFromEuler = function (c) {
    ;(c && c.isEuler) ||
      console.error(
        'THREE.Matrix4: .makeRotationFromEuler() now expects a Euler rotation rather than a _0x1 and order.'
      )
    var a = this.elements,
      b = c.x,
      d = c.y,
      e = c.z,
      h = Math.cos(b),
      b = Math.sin(b),
      l = Math.cos(d),
      d = Math.sin(d),
      f = Math.cos(e),
      e = Math.sin(e)
    if ('XYZ' === c.order) {
      c = h * f
      var t = h * e,
        g = b * f,
        k = b * e
      a[0] = l * f
      a[4] = -l * e
      a[8] = d
      a[1] = t + g * d
      a[5] = c - k * d
      a[9] = -b * l
      a[2] = k - c * d
      a[6] = g + t * d
      a[10] = h * l
    } else
      'YXZ' === c.order
        ? ((c = l * f),
          (t = l * e),
          (g = d * f),
          (k = d * e),
          (a[0] = c + k * b),
          (a[4] = g * b - t),
          (a[8] = h * d),
          (a[1] = h * e),
          (a[5] = h * f),
          (a[9] = -b),
          (a[2] = t * b - g),
          (a[6] = k + c * b),
          (a[10] = h * l))
        : 'ZXY' === c.order
        ? ((c = l * f),
          (t = l * e),
          (g = d * f),
          (k = d * e),
          (a[0] = c - k * b),
          (a[4] = -h * e),
          (a[8] = g + t * b),
          (a[1] = t + g * b),
          (a[5] = h * f),
          (a[9] = k - c * b),
          (a[2] = -h * d),
          (a[6] = b),
          (a[10] = h * l))
        : 'ZYX' === c.order
        ? ((c = h * f),
          (t = h * e),
          (g = b * f),
          (k = b * e),
          (a[0] = l * f),
          (a[4] = g * d - t),
          (a[8] = c * d + k),
          (a[1] = l * e),
          (a[5] = k * d + c),
          (a[9] = t * d - g),
          (a[2] = -d),
          (a[6] = b * l),
          (a[10] = h * l))
        : 'YZX' === c.order
        ? ((c = h * l),
          (t = h * d),
          (g = b * l),
          (k = b * d),
          (a[0] = l * f),
          (a[4] = k - c * e),
          (a[8] = g * e + t),
          (a[1] = e),
          (a[5] = h * f),
          (a[9] = -b * f),
          (a[2] = -d * f),
          (a[6] = t * e + g),
          (a[10] = c - k * e))
        : 'XZY' === c.order &&
          ((c = h * l),
          (t = h * d),
          (g = b * l),
          (k = b * d),
          (a[0] = l * f),
          (a[4] = -e),
          (a[8] = d * f),
          (a[1] = c * e + k),
          (a[5] = h * f),
          (a[9] = t * e - g),
          (a[2] = g * e - t),
          (a[6] = b * f),
          (a[10] = k * e + c))
    a[3] = 0
    a[7] = 0
    a[11] = 0
    a[12] = 0
    a[13] = 0
    a[14] = 0
    a[15] = 1
    return this
  }
  O.prototype.makeRotationFromQuaternion = function (c) {
    return this.compose(Hk, c, Ik)
  }
  O.prototype.lookAt = function (c, a, b) {
    var d = this.elements
    Xa.subVectors(c, a)
    0 === Xa.lengthSq() && (Xa.z = 1)
    Xa.normalize()
    sc.crossVectors(b, Xa)
    0 === sc.lengthSq() &&
      (1 === Math.abs(b.z) ? (Xa.x += 1e-4) : (Xa.z += 1e-4),
      Xa.normalize(),
      sc.crossVectors(b, Xa))
    sc.normalize()
    Nf.crossVectors(Xa, sc)
    d[0] = sc.x
    d[4] = Nf.x
    d[8] = Xa.x
    d[1] = sc.y
    d[5] = Nf.y
    d[9] = Xa.y
    d[2] = sc.z
    d[6] = Nf.z
    d[10] = Xa.z
    return this
  }
  O.prototype.multiply = function (c, a) {
    return void 0 !== a
      ? (console.warn(
          'THREE.Matrix4: .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.'
        ),
        this.multiplyMatrices(c, a))
      : this.multiplyMatrices(this, c)
  }
  O.prototype.premultiply = function (c) {
    return this.multiplyMatrices(c, this)
  }
  O.prototype.multiplyMatrices = function (c, a) {
    var b = c.elements,
      d = a.elements,
      e = this.elements,
      h = b[0],
      l = b[4],
      f = b[8],
      t = b[12],
      g = b[1],
      k = b[5],
      m = b[9],
      n = b[13],
      p = b[2],
      r = b[6],
      u = b[10],
      w = b[14],
      v = b[3],
      z = b[7],
      x = b[11],
      b = b[15],
      y = d[0],
      C = d[4],
      B = d[8],
      E = d[12],
      L = d[1],
      G = d[5],
      H = d[9],
      Q = d[13],
      za = d[2],
      I = d[6],
      N = d[10],
      O = d[14],
      S = d[3],
      P = d[7],
      Y = d[11],
      d = d[15]
    e[0] = h * y + l * L + f * za + t * S
    e[4] = h * C + l * G + f * I + t * P
    e[8] = h * B + l * H + f * N + t * Y
    e[12] = h * E + l * Q + f * O + t * d
    e[1] = g * y + k * L + m * za + n * S
    e[5] = g * C + k * G + m * I + n * P
    e[9] = g * B + k * H + m * N + n * Y
    e[13] = g * E + k * Q + m * O + n * d
    e[2] = p * y + r * L + u * za + w * S
    e[6] = p * C + r * G + u * I + w * P
    e[10] = p * B + r * H + u * N + w * Y
    e[14] = p * E + r * Q + u * O + w * d
    e[3] = v * y + z * L + x * za + b * S
    e[7] = v * C + z * G + x * I + b * P
    e[11] = v * B + z * H + x * N + b * Y
    e[15] = v * E + z * Q + x * O + b * d
    return this
  }
  O.prototype.multiplyScalar = function (c) {
    var a = this.elements
    a[0] *= c
    a[4] *= c
    a[8] *= c
    a[12] *= c
    a[1] *= c
    a[5] *= c
    a[9] *= c
    a[13] *= c
    a[2] *= c
    a[6] *= c
    a[10] *= c
    a[14] *= c
    a[3] *= c
    a[7] *= c
    a[11] *= c
    a[15] *= c
    return this
  }
  O.prototype.determinant = function () {
    var c = this.elements,
      a = c[0],
      b = c[4],
      d = c[8],
      e = c[12],
      h = c[1],
      l = c[5],
      f = c[9],
      t = c[13],
      g = c[2],
      k = c[6],
      m = c[10],
      n = c[14]
    return (
      c[3] *
        (+e * f * k -
          d * t * k -
          e * l * m +
          b * t * m +
          d * l * n -
          b * f * n) +
      c[7] *
        (+a * f * n -
          a * t * m +
          e * h * m -
          d * h * n +
          d * t * g -
          e * f * g) +
      c[11] *
        (+a * t * k -
          a * l * n -
          e * h * k +
          b * h * n +
          e * l * g -
          b * t * g) +
      c[15] *
        (-d * l * g - a * f * k + a * l * m + d * h * k - b * h * m + b * f * g)
    )
  }
  O.prototype.transpose = function () {
    var c = this.elements,
      a
    a = c[1]
    c[1] = c[4]
    c[4] = a
    a = c[2]
    c[2] = c[8]
    c[8] = a
    a = c[6]
    c[6] = c[9]
    c[9] = a
    a = c[3]
    c[3] = c[12]
    c[12] = a
    a = c[7]
    c[7] = c[13]
    c[13] = a
    a = c[11]
    c[11] = c[14]
    c[14] = a
    return this
  }
  O.prototype.setPosition = function (c, a, b) {
    var d = this.elements
    c.is_0x1
      ? ((d[12] = c.x), (d[13] = c.y), (d[14] = c.z))
      : ((d[12] = c), (d[13] = a), (d[14] = b))
    return this
  }
  O.prototype.getInverse = function (c, a) {
    void 0 !== a &&
      console.warn(
        'THREE.Matrix4: .getInverse() can no longer be configured to throw on degenerate.'
      )
    var b = this.elements,
      d = c.elements,
      e = d[0],
      h = d[1],
      l = d[2],
      f = d[3],
      t = d[4],
      g = d[5],
      k = d[6],
      m = d[7],
      n = d[8],
      p = d[9],
      r = d[10],
      u = d[11],
      w = d[12],
      v = d[13],
      z = d[14],
      d = d[15],
      x = p * z * m - v * r * m + v * k * u - g * z * u - p * k * d + g * r * d,
      y = w * r * m - n * z * m - w * k * u + t * z * u + n * k * d - t * r * d,
      C = n * v * m - w * p * m + w * g * u - t * v * u - n * g * d + t * p * d,
      B = w * p * k - n * v * k - w * g * r + t * v * r + n * g * z - t * p * z,
      E = e * x + h * y + l * C + f * B
    if (0 === E) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
    E = 1 / E
    b[0] = x * E
    b[1] =
      (v * r * f - p * z * f - v * l * u + h * z * u + p * l * d - h * r * d) *
      E
    b[2] =
      (g * z * f - v * k * f + v * l * m - h * z * m - g * l * d + h * k * d) *
      E
    b[3] =
      (p * k * f - g * r * f - p * l * m + h * r * m + g * l * u - h * k * u) *
      E
    b[4] = y * E
    b[5] =
      (n * z * f - w * r * f + w * l * u - e * z * u - n * l * d + e * r * d) *
      E
    b[6] =
      (w * k * f - t * z * f - w * l * m + e * z * m + t * l * d - e * k * d) *
      E
    b[7] =
      (t * r * f - n * k * f + n * l * m - e * r * m - t * l * u + e * k * u) *
      E
    b[8] = C * E
    b[9] =
      (w * p * f - n * v * f - w * h * u + e * v * u + n * h * d - e * p * d) *
      E
    b[10] =
      (t * v * f - w * g * f + w * h * m - e * v * m - t * h * d + e * g * d) *
      E
    b[11] =
      (n * g * f - t * p * f - n * h * m + e * p * m + t * h * u - e * g * u) *
      E
    b[12] = B * E
    b[13] =
      (n * v * l - w * p * l + w * h * r - e * v * r - n * h * z + e * p * z) *
      E
    b[14] =
      (w * g * l - t * v * l - w * h * k + e * v * k + t * h * z - e * g * z) *
      E
    b[15] =
      (t * p * l - n * g * l + n * h * k - e * p * k - t * h * r + e * g * r) *
      E
    return this
  }
  O.prototype.scale = function (c) {
    var a = this.elements,
      b = c.x,
      d = c.y
    c = c.z
    a[0] *= b
    a[4] *= d
    a[8] *= c
    a[1] *= b
    a[5] *= d
    a[9] *= c
    a[2] *= b
    a[6] *= d
    a[10] *= c
    a[3] *= b
    a[7] *= d
    a[11] *= c
    return this
  }
  O.prototype.getMaxScaleOnAxis = function () {
    var c = this.elements
    return Math.sqrt(
      Math.max(
        c[0] * c[0] + c[1] * c[1] + c[2] * c[2],
        c[4] * c[4] + c[5] * c[5] + c[6] * c[6],
        c[8] * c[8] + c[9] * c[9] + c[10] * c[10]
      )
    )
  }
  O.prototype.makeTranslation = function (c, a, b) {
    this.set(1, 0, 0, c, 0, 1, 0, a, 0, 0, 1, b, 0, 0, 0, 1)
    return this
  }
  O.prototype.makeRotationX = function (c) {
    var a = Math.cos(c)
    c = Math.sin(c)
    this.set(1, 0, 0, 0, 0, a, -c, 0, 0, c, a, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.makeRotationY = function (c) {
    var a = Math.cos(c)
    c = Math.sin(c)
    this.set(a, 0, c, 0, 0, 1, 0, 0, -c, 0, a, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.makeRotationZ = function (c) {
    var a = Math.cos(c)
    c = Math.sin(c)
    this.set(a, -c, 0, 0, c, a, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.makeRotationAxis = function (c, a) {
    var b = Math.cos(a),
      d = Math.sin(a),
      e = 1 - b,
      h = c.x,
      l = c.y,
      f = c.z,
      g = e * h,
      k = e * l
    this.set(
      g * h + b,
      g * l - d * f,
      g * f + d * l,
      0,
      g * l + d * f,
      k * l + b,
      k * f - d * h,
      0,
      g * f - d * l,
      k * f + d * h,
      e * f * f + b,
      0,
      0,
      0,
      0,
      1
    )
    return this
  }
  O.prototype.makeScale = function (c, a, b) {
    this.set(c, 0, 0, 0, 0, a, 0, 0, 0, 0, b, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.makeShear = function (c, a, b) {
    this.set(1, a, b, 0, c, 1, b, 0, c, a, 1, 0, 0, 0, 0, 1)
    return this
  }
  O.prototype.compose = function (c, a, b) {
    var d = this.elements,
      e = a._x,
      h = a._y,
      l = a._z,
      f = a._w,
      g = e + e,
      k = h + h,
      m = l + l
    a = e * g
    var n = e * k,
      e = e * m,
      p = h * k,
      h = h * m,
      l = l * m,
      g = f * g,
      k = f * k,
      f = f * m,
      m = b.x,
      r = b.y
    b = b.z
    d[0] = (1 - (p + l)) * m
    d[1] = (n + f) * m
    d[2] = (e - k) * m
    d[3] = 0
    d[4] = (n - f) * r
    d[5] = (1 - (a + l)) * r
    d[6] = (h + g) * r
    d[7] = 0
    d[8] = (e + k) * b
    d[9] = (h - g) * b
    d[10] = (1 - (a + p)) * b
    d[11] = 0
    d[12] = c.x
    d[13] = c.y
    d[14] = c.z
    d[15] = 1
    return this
  }
  O.prototype.decompose = function (c, a, b) {
    var d = this.elements,
      e = Hd.set(d[0], d[1], d[2]).length(),
      h = Hd.set(d[4], d[5], d[6]).length(),
      l = Hd.set(d[8], d[9], d[10]).length()
    0 > this.determinant() && (e = -e)
    c.x = d[12]
    c.y = d[13]
    c.z = d[14]
    Ia.copy(this)
    c = 1 / e
    var d = 1 / h,
      f = 1 / l
    Ia.elements[0] *= c
    Ia.elements[1] *= c
    Ia.elements[2] *= c
    Ia.elements[4] *= d
    Ia.elements[5] *= d
    Ia.elements[6] *= d
    Ia.elements[8] *= f
    Ia.elements[9] *= f
    Ia.elements[10] *= f
    a.setFromRotationMatrix(Ia)
    b.x = e
    b.y = h
    b.z = l
    return this
  }
  O.prototype.makePerspective = function (c, a, b, d, e, h) {
    void 0 === h &&
      console.warn(
        'THREE.Matrix4: .makePerspective() has been redefined and has a new signature. Please check the docs.'
      )
    var l = this.elements
    l[0] = (2 * e) / (a - c)
    l[4] = 0
    l[8] = (a + c) / (a - c)
    l[12] = 0
    l[1] = 0
    l[5] = (2 * e) / (b - d)
    l[9] = (b + d) / (b - d)
    l[13] = 0
    l[2] = 0
    l[6] = 0
    l[10] = -(h + e) / (h - e)
    l[14] = (-2 * h * e) / (h - e)
    l[3] = 0
    l[7] = 0
    l[11] = -1
    l[15] = 0
    return this
  }
  O.prototype.makeOrthographic = function (c, a, b, d, e, h) {
    var l = this.elements,
      f = 1 / (a - c),
      g = 1 / (b - d),
      k = 1 / (h - e)
    l[0] = 2 * f
    l[4] = 0
    l[8] = 0
    l[12] = -((a + c) * f)
    l[1] = 0
    l[5] = 2 * g
    l[9] = 0
    l[13] = -((b + d) * g)
    l[2] = 0
    l[6] = 0
    l[10] = -2 * k
    l[14] = -((h + e) * k)
    l[3] = 0
    l[7] = 0
    l[11] = 0
    l[15] = 1
    return this
  }
  O.prototype.equals = function (c) {
    var a = this.elements
    c = c.elements
    for (var b = 0; 16 > b; b++) if (a[b] !== c[b]) return !1
    return !0
  }
  O.prototype.fromArray = function (c, a) {
    void 0 === a && (a = 0)
    for (var b = 0; 16 > b; b++) this.elements[b] = c[b + a]
    return this
  }
  O.prototype.toArray = function (c, a) {
    void 0 === c && (c = [])
    void 0 === a && (a = 0)
    var b = this.elements
    c[a] = b[0]
    c[a + 1] = b[1]
    c[a + 2] = b[2]
    c[a + 3] = b[3]
    c[a + 4] = b[4]
    c[a + 5] = b[5]
    c[a + 6] = b[6]
    c[a + 7] = b[7]
    c[a + 8] = b[8]
    c[a + 9] = b[9]
    c[a + 10] = b[10]
    c[a + 11] = b[11]
    c[a + 12] = b[12]
    c[a + 13] = b[13]
    c[a + 14] = b[14]
    c[a + 15] = b[15]
    return c
  }
  var Hd = new p(),
    Ia = new O(),
    Hk = new p(0, 0, 0),
    Ik = new p(1, 1, 1),
    sc = new p(),
    Nf = new p(),
    Xa = new p(),
    Fa = function a(b, d, e, h) {
      void 0 === b && (b = 0)
      void 0 === d && (d = 0)
      void 0 === e && (e = 0)
      void 0 === h && (h = a.DefaultOrder)
      Object.defineProperty(this, 'isEuler', { value: !0 })
      this._x = b
      this._y = d
      this._z = e
      this._order = h
    },
    Ub = {
      x: { configurable: !0 },
      y: { configurable: !0 },
      z: { configurable: !0 },
      order: { configurable: !0 },
    }
  Ub.x.get = function () {
    return this._x
  }
  Ub.x.set = function (a) {
    this._x = a
    this._onChangeCallback()
  }
  Ub.y.get = function () {
    return this._y
  }
  Ub.y.set = function (a) {
    this._y = a
    this._onChangeCallback()
  }
  Ub.z.get = function () {
    return this._z
  }
  Ub.z.set = function (a) {
    this._z = a
    this._onChangeCallback()
  }
  Ub.order.get = function () {
    return this._order
  }
  Ub.order.set = function (a) {
    this._order = a
    this._onChangeCallback()
  }
  Fa.prototype.set = function (a, b, d, e) {
    this._x = a
    this._y = b
    this._z = d
    this._order = e || this._order
    this._onChangeCallback()
    return this
  }
  Fa.prototype.clone = function () {
    return new this.constructor(this._x, this._y, this._z, this._order)
  }
  Fa.prototype.copy = function (a) {
    this._x = a._x
    this._y = a._y
    this._z = a._z
    this._order = a._order
    this._onChangeCallback()
    return this
  }
  Fa.prototype.setFromRotationMatrix = function (a, b, d) {
    var e = ea.clamp,
      h = a.elements
    a = h[0]
    var l = h[4],
      f = h[8],
      g = h[1],
      k = h[5],
      m = h[9],
      n = h[2],
      p = h[6],
      h = h[10]
    b = b || this._order
    switch (b) {
      case 'XYZ':
        this._y = Math.asin(e(f, -1, 1))
        0.9999999 > Math.abs(f)
          ? ((this._x = Math.atan2(-m, h)), (this._z = Math.atan2(-l, a)))
          : ((this._x = Math.atan2(p, k)), (this._z = 0))
        break
      case 'YXZ':
        this._x = Math.asin(-e(m, -1, 1))
        0.9999999 > Math.abs(m)
          ? ((this._y = Math.atan2(f, h)), (this._z = Math.atan2(g, k)))
          : ((this._y = Math.atan2(-n, a)), (this._z = 0))
        break
      case 'ZXY':
        this._x = Math.asin(e(p, -1, 1))
        0.9999999 > Math.abs(p)
          ? ((this._y = Math.atan2(-n, h)), (this._z = Math.atan2(-l, k)))
          : ((this._y = 0), (this._z = Math.atan2(g, a)))
        break
      case 'ZYX':
        this._y = Math.asin(-e(n, -1, 1))
        0.9999999 > Math.abs(n)
          ? ((this._x = Math.atan2(p, h)), (this._z = Math.atan2(g, a)))
          : ((this._x = 0), (this._z = Math.atan2(-l, k)))
        break
      case 'YZX':
        this._z = Math.asin(e(g, -1, 1))
        0.9999999 > Math.abs(g)
          ? ((this._x = Math.atan2(-m, k)), (this._y = Math.atan2(-n, a)))
          : ((this._x = 0), (this._y = Math.atan2(f, h)))
        break
      case 'XZY':
        this._z = Math.asin(-e(l, -1, 1))
        0.9999999 > Math.abs(l)
          ? ((this._x = Math.atan2(p, k)), (this._y = Math.atan2(f, a)))
          : ((this._x = Math.atan2(-m, h)), (this._y = 0))
        break
      default:
        console.warn(
          'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' +
            b
        )
    }
    this._order = b
    !1 !== d && this._onChangeCallback()
    return this
  }
  Fa.prototype.setFromQuaternion = function (a, b, d) {
    pi.makeRotationFromQuaternion(a)
    return this.setFromRotationMatrix(pi, b, d)
  }
  Fa.prototype.setFrom_0x1 = function (a, b) {
    return this.set(a.x, a.y, a.z, b || this._order)
  }
  Fa.prototype.reorder = function (a) {
    qi.setFromEuler(this)
    return this.setFromQuaternion(qi, a)
  }
  Fa.prototype.equals = function (a) {
    return (
      a._x === this._x &&
      a._y === this._y &&
      a._z === this._z &&
      a._order === this._order
    )
  }
  Fa.prototype.fromArray = function (a) {
    this._x = a[0]
    this._y = a[1]
    this._z = a[2]
    void 0 !== a[3] && (this._order = a[3])
    this._onChangeCallback()
    return this
  }
  Fa.prototype.toArray = function (a, b) {
    void 0 === a && (a = [])
    void 0 === b && (b = 0)
    a[b] = this._x
    a[b + 1] = this._y
    a[b + 2] = this._z
    a[b + 3] = this._order
    return a
  }
  Fa.prototype.to_0x1 = function (a) {
    return a
      ? a.set(this._x, this._y, this._z)
      : new p(this._x, this._y, this._z)
  }
  Fa.prototype._onChange = function (a) {
    this._onChangeCallback = a
    return this
  }
  Fa.prototype._onChangeCallback = function () {}
  Object.defineProperties(Fa.prototype, Ub)
  Fa.DefaultOrder = 'XYZ'
  Fa.RotationOrders = 'XYZ YZX ZXY XZY YXZ ZYX'.split(' ')
  var pi = new O(),
    qi = new Z(),
    Ab = function () {
      this.mask = 1
    }
  Ab.prototype.set = function (a) {
    this.mask = (1 << a) | 0
  }
  Ab.prototype.enable = function (a) {
    this.mask = this.mask | (1 << a) | 0
  }
  Ab.prototype.enableAll = function () {
    this.mask = -1
  }
  Ab.prototype.toggle = function (a) {
    this.mask ^= (1 << a) | 0
  }
  Ab.prototype.disable = function (a) {
    this.mask &= ~((1 << a) | 0)
  }
  Ab.prototype.disableAll = function () {
    this.mask = 0
  }
  Ab.prototype.test = function (a) {
    return 0 !== (this.mask & a.mask)
  }
  var aj = 0,
    ri = new p(),
    Id = new Z(),
    Vb = new O(),
    Of = new p(),
    Le = new p(),
    Jk = new p(),
    Kk = new Z(),
    si = new p(1, 0, 0),
    ti = new p(0, 1, 0),
    ui = new p(0, 0, 1),
    Lk = { type: 'added' },
    Mk = { type: 'removed' }
  n.DefaultUp = new p(0, 1, 0)
  n.DefaultMatrixAutoUpdate = !0
  n.prototype = Object.assign(Object.create(m.prototype), {
    constructor: n,
    isObject3D: !0,
    onBeforeRender: function () {},
    onAfterRender: function () {},
    applyMatrix4: function (a) {
      this.matrixAutoUpdate && this.updateMatrix()
      this.matrix.premultiply(a)
      this.matrix.decompose(this.position, this.quaternion, this.scale)
    },
    applyQuaternion: function (a) {
      this.quaternion.premultiply(a)
      return this
    },
    setRotationFromAxisAngle: function (a, b) {
      this.quaternion.setFromAxisAngle(a, b)
    },
    setRotationFromEuler: function (a) {
      this.quaternion.setFromEuler(a, !0)
    },
    setRotationFromMatrix: function (a) {
      this.quaternion.setFromRotationMatrix(a)
    },
    setRotationFromQuaternion: function (a) {
      this.quaternion.copy(a)
    },
    rotateOnAxis: function (a, b) {
      Id.setFromAxisAngle(a, b)
      this.quaternion.multiply(Id)
      return this
    },
    rotateOnWorldAxis: function (a, b) {
      Id.setFromAxisAngle(a, b)
      this.quaternion.premultiply(Id)
      return this
    },
    rotateX: function (a) {
      return this.rotateOnAxis(si, a)
    },
    rotateY: function (a) {
      return this.rotateOnAxis(ti, a)
    },
    rotateZ: function (a) {
      return this.rotateOnAxis(ui, a)
    },
    translateOnAxis: function (a, b) {
      ri.copy(a).applyQuaternion(this.quaternion)
      this.position.add(ri.multiplyScalar(b))
      return this
    },
    translateX: function (a) {
      return this.translateOnAxis(si, a)
    },
    translateY: function (a) {
      return this.translateOnAxis(ti, a)
    },
    translateZ: function (a) {
      return this.translateOnAxis(ui, a)
    },
    localToWorld: function (a) {
      return a.applyMatrix4(this.matrixWorld)
    },
    worldToLocal: function (a) {
      return a.applyMatrix4(Vb.getInverse(this.matrixWorld))
    },
    lookAt: function (a, b, d) {
      a.is_0x1 ? Of.copy(a) : Of.set(a, b, d)
      a = this.parent
      this.updateWorldMatrix(!0, !1)
      Le.setFromMatrixPosition(this.matrixWorld)
      this.isCamera || this.isLight
        ? Vb.lookAt(Le, Of, this.up)
        : Vb.lookAt(Of, Le, this.up)
      this.quaternion.setFromRotationMatrix(Vb)
      a &&
        (Vb.extractRotation(a.matrixWorld),
        Id.setFromRotationMatrix(Vb),
        this.quaternion.premultiply(Id.inverse()))
    },
    add: function (a) {
      if (1 < arguments.length) {
        for (var b = 0; b < arguments.length; b++) this.add(arguments[b])
        return this
      }
      if (a === this)
        return (
          console.error(
            "THREE.Object3D.add: object can't be added as a child of itself.",
            a
          ),
          this
        )
      a && a.isObject3D
        ? (null !== a.parent && a.parent.remove(a),
          (a.parent = this),
          this.children.push(a),
          a.dispatchEvent(Lk))
        : console.error(
            'THREE.Object3D.add: object not an instance of THREE.Object3D.',
            a
          )
      return this
    },
    remove: function (a) {
      if (1 < arguments.length) {
        for (var b = 0; b < arguments.length; b++) this.remove(arguments[b])
        return this
      }
      b = this.children.indexOf(a)
      ;-1 !== b &&
        ((a.parent = null), this.children.splice(b, 1), a.dispatchEvent(Mk))
      return this
    },
    attach: function (a) {
      this.updateWorldMatrix(!0, !1)
      Vb.getInverse(this.matrixWorld)
      null !== a.parent &&
        (a.parent.updateWorldMatrix(!0, !1), Vb.multiply(a.parent.matrixWorld))
      a.applyMatrix4(Vb)
      a.updateWorldMatrix(!1, !1)
      this.add(a)
      return this
    },
    getObjectById: function (a) {
      return this.getObjectByProperty('id', a)
    },
    getObjectByName: function (a) {
      return this.getObjectByProperty('name', a)
    },
    getObjectByProperty: function (a, b) {
      if (this[a] === b) return this
      for (var d = 0, e = this.children.length; d < e; d++) {
        var h = this.children[d].getObjectByProperty(a, b)
        if (void 0 !== h) return h
      }
    },
    getWorldPosition: function (a) {
      void 0 === a &&
        (console.warn(
          'THREE.Object3D: .getWorldPosition() target is now required'
        ),
        (a = new p()))
      this.updateMatrixWorld(!0)
      return a.setFromMatrixPosition(this.matrixWorld)
    },
    getWorldQuaternion: function (a) {
      void 0 === a &&
        (console.warn(
          'THREE.Object3D: .getWorldQuaternion() target is now required'
        ),
        (a = new Z()))
      this.updateMatrixWorld(!0)
      this.matrixWorld.decompose(Le, a, Jk)
      return a
    },
    getWorldScale: function (a) {
      void 0 === a &&
        (console.warn('THREE.Object3D: .getWorldScale() target is now required'),
        (a = new p()))
      this.updateMatrixWorld(!0)
      this.matrixWorld.decompose(Le, Kk, a)
      return a
    },
    getWorldDirection: function (a) {
      void 0 === a &&
        (console.warn(
          'THREE.Object3D: .getWorldDirection() target is now required'
        ),
        (a = new p()))
      this.updateMatrixWorld(!0)
      var b = this.matrixWorld.elements
      return a.set(b[8], b[9], b[10]).normalize()
    },
    raycast: function () {},
    traverse: function (a) {
      a(this)
      for (var b = this.children, d = 0, e = b.length; d < e; d++)
        b[d].traverse(a)
    },
    traverseVisible: function (a) {
      if (!1 !== this.visible) {
        a(this)
        for (var b = this.children, d = 0, e = b.length; d < e; d++)
          b[d].traverseVisible(a)
      }
    },
    traverseAncestors: function (a) {
      var b = this.parent
      null !== b && (a(b), b.traverseAncestors(a))
    },
    updateMatrix: function () {
      this.matrix.compose(this.position, this.quaternion, this.scale)
      this.matrixWorldNeedsUpdate = !0
    },
    updateMatrixWorld: function (a) {
      this.matrixAutoUpdate && this.updateMatrix()
      if (this.matrixWorldNeedsUpdate || a)
        null === this.parent
          ? this.matrixWorld.copy(this.matrix)
          : this.matrixWorld.multiplyMatrices(
              this.parent.matrixWorld,
              this.matrix
            ),
          (this.matrixWorldNeedsUpdate = !1),
          (a = !0)
      for (var b = this.children, d = 0, e = b.length; d < e; d++)
        b[d].updateMatrixWorld(a)
    },
    updateWorldMatrix: function (a, b) {
      var d = this.parent
      !0 === a && null !== d && d.updateWorldMatrix(!0, !1)
      this.matrixAutoUpdate && this.updateMatrix()
      null === this.parent
        ? this.matrixWorld.copy(this.matrix)
        : this.matrixWorld.multiplyMatrices(
            this.parent.matrixWorld,
            this.matrix
          )
      if (!0 === b)
        for (var d = this.children, e = 0, h = d.length; e < h; e++)
          d[e].updateWorldMatrix(!1, !0)
    },
    toJSON: function (a) {
      function b(b, d) {
        void 0 === b[d.uuid] && (b[d.uuid] = d.toJSON(a))
        return d.uuid
      }
      function d(a) {
        var b = [],
          d
        for (d in a) {
          var e = a[d]
          delete e.metadata
          b.push(e)
        }
        return b
      }
      var e = void 0 === a || 'string' === typeof a,
        h = {}
      e &&
        ((a = {
          geometries: {},
          materials: {},
          textures: {},
          images: {},
          shapes: {},
        }),
        (h.metadata = {
          version: 4.5,
          type: 'Object',
          generator: 'Object3D.toJSON',
        }))
      var l = {}
      l.uuid = this.uuid
      l.type = this.type
      '' !== this.name && (l.name = this.name)
      !0 === this.castShadow && (l.castShadow = !0)
      !0 === this.receiveShadow && (l.receiveShadow = !0)
      !1 === this.visible && (l.visible = !1)
      !1 === this.frustumCulled && (l.frustumCulled = !1)
      0 !== this.renderOrder && (l.renderOrder = this.renderOrder)
      '{}' !== JSON.stringify(this.userData) && (l.userData = this.userData)
      l.layers = this.layers.mask
      l.matrix = this.matrix.toArray()
      !1 === this.matrixAutoUpdate && (l.matrixAutoUpdate = !1)
      this.isInstancedna &&
        ((l.type = 'Instancedna'),
        (l.count = this.count),
        (l.instanceMatrix = this.instanceMatrix.toJSON()))
      if (this.isna || this.isLine || this.isPoints) {
        l.geometry = b(a.geometries, this.geometry)
        var f = this.geometry.parameters
        if (void 0 !== f && void 0 !== f.shapes)
          if (((f = f.shapes), Array.isArray(f)))
            for (var g = 0, k = f.length; g < k; g++) b(a.shapes, f[g])
          else b(a.shapes, f)
      }
      if (void 0 !== this.material)
        if (Array.isArray(this.material)) {
          f = []
          g = 0
          for (k = this.material.length; g < k; g++)
            f.push(b(a.materials, this.material[g]))
          l.material = f
        } else l.material = b(a.materials, this.material)
      if (0 < this.children.length)
        for (l.children = [], f = 0; f < this.children.length; f++)
          l.children.push(this.children[f].toJSON(a).object)
      if (e) {
        var e = d(a.geometries),
          f = d(a.materials),
          g = d(a.textures),
          k = d(a.images),
          m = d(a.shapes)
        0 < e.length && (h.geometries = e)
        0 < f.length && (h.materials = f)
        0 < g.length && (h.textures = g)
        0 < k.length && (h.images = k)
        0 < m.length && (h.shapes = m)
      }
      h.object = l
      return h
    },
    clone: function (a) {
      return new this.constructor().copy(this, a)
    },
    copy: function (a, b) {
      void 0 === b && (b = !0)
      this.name = a.name
      this.up.copy(a.up)
      this.position.copy(a.position)
      this.rotation.order = a.rotation.order
      this.quaternion.copy(a.quaternion)
      this.scale.copy(a.scale)
      this.matrix.copy(a.matrix)
      this.matrixWorld.copy(a.matrixWorld)
      this.matrixAutoUpdate = a.matrixAutoUpdate
      this.matrixWorldNeedsUpdate = a.matrixWorldNeedsUpdate
      this.layers.mask = a.layers.mask
      this.visible = a.visible
      this.castShadow = a.castShadow
      this.receiveShadow = a.receiveShadow
      this.frustumCulled = a.frustumCulled
      this.renderOrder = a.renderOrder
      this.userData = JSON.parse(JSON.stringify(a.userData))
      if (!0 === b)
        for (var d = 0; d < a.children.length; d++)
          this.add(a.children[d].clone())
      return this
    },
  })
  var bh = new p(),
    Nk = new p(),
    Ok = new ha(),
    da = function (a, b) {
      Object.defineProperty(this, 'ispl', { value: !0 })
      this.normal = void 0 !== a ? a : new p(1, 0, 0)
      this.constant = void 0 !== b ? b : 0
    }
  da.prototype.set = function (a, b) {
    this.normal.copy(a)
    this.constant = b
    return this
  }
  da.prototype.setComponents = function (a, b, d, e) {
    this.normal.set(a, b, d)
    this.constant = e
    return this
  }
  da.prototype.setFromNormalAndCoplanarPoint = function (a, b) {
    this.normal.copy(a)
    this.constant = -b.dot(this.normal)
    return this
  }
  da.prototype.setFromCoplanarPoints = function (a, b, d) {
    b = bh.subVectors(d, b).cross(Nk.subVectors(a, b)).normalize()
    this.setFromNormalAndCoplanarPoint(b, a)
    return this
  }
  da.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  da.prototype.copy = function (a) {
    this.normal.copy(a.normal)
    this.constant = a.constant
    return this
  }
  da.prototype.normalize = function () {
    var a = 1 / this.normal.length()
    this.normal.multiplyScalar(a)
    this.constant *= a
    return this
  }
  da.prototype.negate = function () {
    this.constant *= -1
    this.normal.negate()
    return this
  }
  da.prototype.distanceToPoint = function (a) {
    return this.normal.dot(a) + this.constant
  }
  da.prototype.distanceToSphere = function (a) {
    return this.distanceToPoint(a.center) - a.radius
  }
  da.prototype.projectPoint = function (a, b) {
    void 0 === b &&
      (console.warn('THREE.pl: .projectPoint() target is now required'),
      (b = new p()))
    return b.copy(this.normal).multiplyScalar(-this.distanceToPoint(a)).add(a)
  }
  da.prototype.intersectLine = function (a, b) {
    void 0 === b &&
      (console.warn('THREE.pl: .intersectLine() target is now required'),
      (b = new p()))
    var d = a.delta(bh),
      e = this.normal.dot(d)
    if (0 === e) {
      if (0 === this.distanceToPoint(a.start)) return b.copy(a.start)
    } else if (
      ((e = -(a.start.dot(this.normal) + this.constant) / e), !(0 > e || 1 < e))
    )
      return b.copy(d).multiplyScalar(e).add(a.start)
  }
  da.prototype.intersectsLine = function (a) {
    var b = this.distanceToPoint(a.start)
    a = this.distanceToPoint(a.end)
    return (0 > b && 0 < a) || (0 > a && 0 < b)
  }
  da.prototype.intersectsBox = function (a) {
    return a.intersectspl(this)
  }
  da.prototype.intersectsSphere = function (a) {
    return a.intersectspl(this)
  }
  da.prototype.coplanarPoint = function (a) {
    void 0 === a &&
      (console.warn('THREE.pl: .coplanarPoint() target is now required'),
      (a = new p()))
    return a.copy(this.normal).multiplyScalar(-this.constant)
  }
  da.prototype.applyMatrix4 = function (a, b) {
    var d = b || Ok.getNormalMatrix(a),
      e = this.coplanarPoint(bh).applyMatrix4(a),
      d = this.normal.applyMatrix3(d).normalize()
    this.constant = -e.dot(d)
    return this
  }
  da.prototype.translate = function (a) {
    this.constant -= a.dot(this.normal)
    return this
  }
  da.prototype.equals = function (a) {
    return a.normal.equals(this.normal) && a.constant === this.constant
  }
  var yb = new p(),
    Wb = new p(),
    ch = new p(),
    Xb = new p(),
    Jd = new p(),
    Kd = new p(),
    vi = new p(),
    dh = new p(),
    eh = new p(),
    fh = new p(),
    fa = function (a, b, d) {
      this.a = void 0 !== a ? a : new p()
      this.b = void 0 !== b ? b : new p()
      this.c = void 0 !== d ? d : new p()
    }
  fa.getNormal = function (a, b, d, e) {
    void 0 === e &&
      (console.warn('THREE.Triangle: .getNormal() target is now required'),
      (e = new p()))
    e.subVectors(d, b)
    yb.subVectors(a, b)
    e.cross(yb)
    a = e.lengthSq()
    return 0 < a ? e.multiplyScalar(1 / Math.sqrt(a)) : e.set(0, 0, 0)
  }
  fa.getBarycoord = function (a, b, d, e, h) {
    yb.subVectors(e, b)
    Wb.subVectors(d, b)
    ch.subVectors(a, b)
    a = yb.dot(yb)
    b = yb.dot(Wb)
    d = yb.dot(ch)
    var l = Wb.dot(Wb)
    e = Wb.dot(ch)
    var f = a * l - b * b
    void 0 === h &&
      (console.warn('THREE.Triangle: .getBarycoord() target is now required'),
      (h = new p()))
    if (0 === f) return h.set(-2, -1, -1)
    f = 1 / f
    l = (l * d - b * e) * f
    a = (a * e - b * d) * f
    return h.set(1 - l - a, a, l)
  }
  fa.containsPoint = function (a, b, d, e) {
    this.getBarycoord(a, b, d, e, Xb)
    return 0 <= Xb.x && 0 <= Xb.y && 1 >= Xb.x + Xb.y
  }
  fa.getUV = function (a, b, d, e, h, l, f, g) {
    this.getBarycoord(a, b, d, e, Xb)
    g.set(0, 0)
    g.addScaledVector(h, Xb.x)
    g.addScaledVector(l, Xb.y)
    g.addScaledVector(f, Xb.z)
    return g
  }
  fa.isFrontFacing = function (a, b, d, e) {
    yb.subVectors(d, b)
    Wb.subVectors(a, b)
    return 0 > yb.cross(Wb).dot(e) ? !0 : !1
  }
  fa.prototype.set = function (a, b, d) {
    this.a.copy(a)
    this.b.copy(b)
    this.c.copy(d)
    return this
  }
  fa.prototype.setFromPointsAndIndices = function (a, b, d, e) {
    this.a.copy(a[b])
    this.b.copy(a[d])
    this.c.copy(a[e])
    return this
  }
  fa.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  fa.prototype.copy = function (a) {
    this.a.copy(a.a)
    this.b.copy(a.b)
    this.c.copy(a.c)
    return this
  }
  fa.prototype.getArea = function () {
    yb.subVectors(this.c, this.b)
    Wb.subVectors(this.a, this.b)
    return 0.5 * yb.cross(Wb).length()
  }
  fa.prototype.getMidpoint = function (a) {
    void 0 === a &&
      (console.warn('THREE.Triangle: .getMidpoint() target is now required'),
      (a = new p()))
    return a
      .addVectors(this.a, this.b)
      .add(this.c)
      .multiplyScalar(1 / 3)
  }
  fa.prototype.getNormal = function (a) {
    return fa.getNormal(this.a, this.b, this.c, a)
  }
  fa.prototype.getpl = function (a) {
    void 0 === a &&
      (console.warn('THREE.Triangle: .getpl() target is now required'),
      (a = new da()))
    return a.setFromCoplanarPoints(this.a, this.b, this.c)
  }
  fa.prototype.getBarycoord = function (a, b) {
    return fa.getBarycoord(a, this.a, this.b, this.c, b)
  }
  fa.prototype.getUV = function (a, b, d, e, h) {
    return fa.getUV(a, this.a, this.b, this.c, b, d, e, h)
  }
  fa.prototype.containsPoint = function (a) {
    return fa.containsPoint(a, this.a, this.b, this.c)
  }
  fa.prototype.isFrontFacing = function (a) {
    return fa.isFrontFacing(this.a, this.b, this.c, a)
  }
  fa.prototype.intersectsBox = function (a) {
    return a.intersectsTriangle(this)
  }
  fa.prototype.closestPointToPoint = function (a, b) {
    void 0 === b &&
      (console.warn(
        'THREE.Triangle: .closestPointToPoint() target is now required'
      ),
      (b = new p()))
    var d = this.a,
      e = this.b,
      h = this.c,
      l
    Jd.subVectors(e, d)
    Kd.subVectors(h, d)
    dh.subVectors(a, d)
    var f = Jd.dot(dh),
      g = Kd.dot(dh)
    if (0 >= f && 0 >= g) return b.copy(d)
    eh.subVectors(a, e)
    var k = Jd.dot(eh),
      m = Kd.dot(eh)
    if (0 <= k && m <= k) return b.copy(e)
    l = f * m - k * g
    if (0 >= l && 0 <= f && 0 >= k)
      return (e = f / (f - k)), b.copy(d).addScaledVector(Jd, e)
    fh.subVectors(a, h)
    var n = Jd.dot(fh),
      D = Kd.dot(fh)
    if (0 <= D && n <= D) return b.copy(h)
    f = n * g - f * D
    if (0 >= f && 0 <= g && 0 >= D)
      return (l = g / (g - D)), b.copy(d).addScaledVector(Kd, l)
    g = k * D - n * m
    if (0 >= g && 0 <= m - k && 0 <= n - D)
      return (
        vi.subVectors(h, e),
        (l = (m - k) / (m - k + (n - D))),
        b.copy(e).addScaledVector(vi, l)
      )
    h = 1 / (g + f + l)
    e = f * h
    l *= h
    return b.copy(d).addScaledVector(Jd, e).addScaledVector(Kd, l)
  }
  fa.prototype.equals = function (a) {
    return a.a.equals(this.a) && a.b.equals(this.b) && a.c.equals(this.c)
  }
  var wi = {
      aliceblue: 15792383,
      antiquewhite: 16444375,
      aqua: 65535,
      aquamarine: 8388564,
      azure: 15794175,
      beige: 16119260,
      bisque: 16770244,
      black: 0,
      blanchedalmond: 16772045,
      blue: 255,
      blueviolet: 9055202,
      brown: 10824234,
      burlywood: 14596231,
      cadetblue: 6266528,
      chartreuse: 8388352,
      chocolate: 13789470,
      coral: 16744272,
      cornflowerblue: 6591981,
      cornsilk: 16775388,
      crimson: 14423100,
      cyan: 65535,
      darkblue: 139,
      darkcyan: 35723,
      darkgoldenrod: 12092939,
      darkgray: 11119017,
      darkgreen: 25600,
      darkgrey: 11119017,
      darkkhaki: 12433259,
      darkmagenta: 9109643,
      darkolivegreen: 5597999,
      darkorange: 16747520,
      darkorchid: 10040012,
      darkred: 9109504,
      darksalmon: 15308410,
      darkseagreen: 9419919,
      darkslateblue: 4734347,
      darkslategray: 3100495,
      darkslategrey: 3100495,
      darkturquoise: 52945,
      darkviolet: 9699539,
      deeppink: 16716947,
      deepskyblue: 49151,
      dimgray: 6908265,
      dimgrey: 6908265,
      dodgerblue: 2003199,
      firebrick: 11674146,
      floralwhite: 16775920,
      forestgreen: 2263842,
      fuchsia: 16711935,
      gainsboro: 14474460,
      ghostwhite: 16316671,
      gold: 16766720,
      goldenrod: 14329120,
      gray: 8421504,
      green: 32768,
      greenyellow: 11403055,
      grey: 8421504,
      honeydew: 15794160,
      hotpink: 16738740,
      indianred: 13458524,
      indigo: 4915330,
      ivory: 16777200,
      khaki: 15787660,
      lavender: 15132410,
      lavenderblush: 16773365,
      lawngreen: 8190976,
      lemonchiffon: 16775885,
      lightblue: 11393254,
      lightcoral: 15761536,
      lightcyan: 14745599,
      lightgoldenrodyellow: 16448210,
      lightgray: 13882323,
      lightgreen: 9498256,
      lightgrey: 13882323,
      lightpink: 16758465,
      lightsalmon: 16752762,
      lightseagreen: 2142890,
      lightskyblue: 8900346,
      lightslategray: 7833753,
      lightslategrey: 7833753,
      lightsteelblue: 11584734,
      lightyellow: 16777184,
      lime: 65280,
      limegreen: 3329330,
      linen: 16445670,
      magenta: 16711935,
      maroon: 8388608,
      mediumaquamarine: 6737322,
      mediumblue: 205,
      mediumorchid: 12211667,
      mediumpurple: 9662683,
      mediumseagreen: 3978097,
      mediumslateblue: 8087790,
      mediumspringgreen: 64154,
      mediumturquoise: 4772300,
      mediumvioletred: 13047173,
      midnightblue: 1644912,
      mintcream: 16121850,
      mistyrose: 16770273,
      moccasin: 16770229,
      navajowhite: 16768685,
      navy: 128,
      oldlace: 16643558,
      olive: 8421376,
      olivedrab: 7048739,
      orange: 16753920,
      orangered: 16729344,
      orchid: 14315734,
      palegoldenrod: 15657130,
      palegreen: 10025880,
      paleturquoise: 11529966,
      palevioletred: 14381203,
      papayawhip: 16773077,
      peachpuff: 16767673,
      peru: 13468991,
      pink: 16761035,
      plum: 14524637,
      powderblue: 11591910,
      purple: 8388736,
      rebeccapurple: 6697881,
      red: 16711680,
      rosybrown: 12357519,
      royalblue: 4286945,
      saddlebrown: 9127187,
      salmon: 16416882,
      sandybrown: 16032864,
      seagreen: 3050327,
      seashell: 16774638,
      sienna: 10506797,
      silver: 12632256,
      skyblue: 8900331,
      slateblue: 6970061,
      slategray: 7372944,
      slategrey: 7372944,
      snow: 16775930,
      springgreen: 65407,
      steelblue: 4620980,
      tan: 13808780,
      teal: 32896,
      thistle: 14204888,
      tomato: 16737095,
      turquoise: 4251856,
      violet: 15631086,
      wheat: 16113331,
      white: 16777215,
      whitesmoke: 16119285,
      yellow: 16776960,
      yellowgreen: 10145074,
    },
    db = { h: 0, s: 0, l: 0 },
    Pf = { h: 0, s: 0, l: 0 },
    H = function (a, b, d) {
      Object.defineProperty(this, 'isColor', { value: !0 })
      return void 0 === b && void 0 === d ? this.set(a) : this.setRGB(a, b, d)
    }
  H.prototype.set = function (a) {
    a && a.isColor
      ? this.copy(a)
      : 'number' === typeof a
      ? this.setHex(a)
      : 'string' === typeof a && this.setStyle(a)
    return this
  }
  H.prototype.setScalar = function (a) {
    this.b = this.g = this.r = a
    return this
  }
  H.prototype.setHex = function (a) {
    a = Math.floor(a)
    this.r = ((a >> 16) & 255) / 255
    this.g = ((a >> 8) & 255) / 255
    this.b = (a & 255) / 255
    return this
  }
  H.prototype.setRGB = function (a, b, d) {
    this.r = a
    this.g = b
    this.b = d
    return this
  }
  H.prototype.setHSL = function (a, b, d) {
    a = ea.euclideanModulo(a, 1)
    b = ea.clamp(b, 0, 1)
    d = ea.clamp(d, 0, 1)
    0 === b
      ? (this.r = this.g = this.b = d)
      : ((b = 0.5 >= d ? d * (1 + b) : d + b - d * b),
        (d = 2 * d - b),
        (this.r = z(d, b, a + 1 / 3)),
        (this.g = z(d, b, a)),
        (this.b = z(d, b, a - 1 / 3)))
    return this
  }
  H.prototype.setStyle = function (a) {
    function b(b) {
      void 0 !== b &&
        1 > parseFloat(b) &&
        console.warn(
          'THREE.Color: Alpha component of ' + a + ' will be ignored.'
        )
    }
    var d
    if ((d = /^((?:rgb|hsl)a?)\(\s*([^\)]*)\)/.exec(a))) {
      var e = d[2]
      switch (d[1]) {
        case 'rgb':
        case 'rgba':
          if (
            (d = /^(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
              e
            ))
          )
            return (
              (this.r = Math.min(255, parseInt(d[1], 10)) / 255),
              (this.g = Math.min(255, parseInt(d[2], 10)) / 255),
              (this.b = Math.min(255, parseInt(d[3], 10)) / 255),
              b(d[5]),
              this
            )
          if (
            (d = /^(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
              e
            ))
          )
            return (
              (this.r = Math.min(100, parseInt(d[1], 10)) / 100),
              (this.g = Math.min(100, parseInt(d[2], 10)) / 100),
              (this.b = Math.min(100, parseInt(d[3], 10)) / 100),
              b(d[5]),
              this
            )
          break
        case 'hsl':
        case 'hsla':
          if (
            (d = /^([0-9]*\.?[0-9]+)\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(,\s*([0-9]*\.?[0-9]+)\s*)?$/.exec(
              e
            ))
          ) {
            var e = parseFloat(d[1]) / 360,
              h = parseInt(d[2], 10) / 100,
              l = parseInt(d[3], 10) / 100
            b(d[5])
            return this.setHSL(e, h, l)
          }
      }
    } else if ((d = /^\#([A-Fa-f0-9]+)$/.exec(a))) {
      d = d[1]
      e = d.length
      if (3 === e)
        return (
          (this.r = parseInt(d.charAt(0) + d.charAt(0), 16) / 255),
          (this.g = parseInt(d.charAt(1) + d.charAt(1), 16) / 255),
          (this.b = parseInt(d.charAt(2) + d.charAt(2), 16) / 255),
          this
        )
      if (6 === e)
        return (
          (this.r = parseInt(d.charAt(0) + d.charAt(1), 16) / 255),
          (this.g = parseInt(d.charAt(2) + d.charAt(3), 16) / 255),
          (this.b = parseInt(d.charAt(4) + d.charAt(5), 16) / 255),
          this
        )
    }
    return a && 0 < a.length ? this.setColorName(a) : this
  }
  H.prototype.setColorName = function (a) {
    var b = wi[a]
    void 0 !== b
      ? this.setHex(b)
      : console.warn('THREE.Color: Unknown color ' + a)
    return this
  }
  H.prototype.clone = function () {
    return new this.constructor(this.r, this.g, this.b)
  }
  H.prototype.copy = function (a) {
    this.r = a.r
    this.g = a.g
    this.b = a.b
    return this
  }
  H.prototype.copyGammaToLinear = function (a, b) {
    void 0 === b && (b = 2)
    this.r = Math.pow(a.r, b)
    this.g = Math.pow(a.g, b)
    this.b = Math.pow(a.b, b)
    return this
  }
  H.prototype.copyLinearToGamma = function (a, b) {
    void 0 === b && (b = 2)
    var d = 0 < b ? 1 / b : 1
    this.r = Math.pow(a.r, d)
    this.g = Math.pow(a.g, d)
    this.b = Math.pow(a.b, d)
    return this
  }
  H.prototype.convertGammaToLinear = function (a) {
    this.copyGammaToLinear(this, a)
    return this
  }
  H.prototype.convertLinearToGamma = function (a) {
    this.copyLinearToGamma(this, a)
    return this
  }
  H.prototype.copySRGBToLinear = function (a) {
    this.r = u(a.r)
    this.g = u(a.g)
    this.b = u(a.b)
    return this
  }
  H.prototype.copyLinearToSRGB = function (a) {
    this.r = w(a.r)
    this.g = w(a.g)
    this.b = w(a.b)
    return this
  }
  H.prototype.convertSRGBToLinear = function () {
    this.copySRGBToLinear(this)
    return this
  }
  H.prototype.convertLinearToSRGB = function () {
    this.copyLinearToSRGB(this)
    return this
  }
  H.prototype.getHex = function () {
    return (
      ((255 * this.r) << 16) ^ ((255 * this.g) << 8) ^ ((255 * this.b) << 0)
    )
  }
  H.prototype.getHexString = function () {
    return ('000000' + this.getHex().toString(16)).slice(-6)
  }
  H.prototype.getHSL = function (a) {
    void 0 === a &&
      (console.warn('THREE.Color: .getHSL() target is now required'),
      (a = { h: 0, s: 0, l: 0 }))
    var b = this.r,
      d = this.g,
      e = this.b,
      h = Math.max(b, d, e),
      l = Math.min(b, d, e),
      f,
      g = (l + h) / 2
    if (l === h) l = f = 0
    else {
      var k = h - l,
        l = 0.5 >= g ? k / (h + l) : k / (2 - h - l)
      switch (h) {
        case b:
          f = (d - e) / k + (d < e ? 6 : 0)
          break
        case d:
          f = (e - b) / k + 2
          break
        case e:
          f = (b - d) / k + 4
      }
      f /= 6
    }
    a.h = f
    a.s = l
    a.l = g
    return a
  }
  H.prototype.getStyle = function () {
    return (
      'rgb(' +
      ((255 * this.r) | 0) +
      ',' +
      ((255 * this.g) | 0) +
      ',' +
      ((255 * this.b) | 0) +
      ')'
    )
  }
  H.prototype.offsetHSL = function (a, b, d) {
    this.getHSL(db)
    db.h += a
    db.s += b
    db.l += d
    this.setHSL(db.h, db.s, db.l)
    return this
  }
  H.prototype.add = function (a) {
    this.r += a.r
    this.g += a.g
    this.b += a.b
    return this
  }
  H.prototype.addColors = function (a, b) {
    this.r = a.r + b.r
    this.g = a.g + b.g
    this.b = a.b + b.b
    return this
  }
  H.prototype.addScalar = function (a) {
    this.r += a
    this.g += a
    this.b += a
    return this
  }
  H.prototype.sub = function (a) {
    this.r = Math.max(0, this.r - a.r)
    this.g = Math.max(0, this.g - a.g)
    this.b = Math.max(0, this.b - a.b)
    return this
  }
  H.prototype.multiply = function (a) {
    this.r *= a.r
    this.g *= a.g
    this.b *= a.b
    return this
  }
  H.prototype.multiplyScalar = function (a) {
    this.r *= a
    this.g *= a
    this.b *= a
    return this
  }
  H.prototype.lerp = function (a, b) {
    this.r += (a.r - this.r) * b
    this.g += (a.g - this.g) * b
    this.b += (a.b - this.b) * b
    return this
  }
  H.prototype.lerpHSL = function (a, b) {
    this.getHSL(db)
    a.getHSL(Pf)
    var d = ea.lerp(db.h, Pf.h, b),
      e = ea.lerp(db.s, Pf.s, b),
      h = ea.lerp(db.l, Pf.l, b)
    this.setHSL(d, e, h)
    return this
  }
  H.prototype.equals = function (a) {
    return a.r === this.r && a.g === this.g && a.b === this.b
  }
  H.prototype.fromArray = function (a, b) {
    void 0 === b && (b = 0)
    this.r = a[b]
    this.g = a[b + 1]
    this.b = a[b + 2]
    return this
  }
  H.prototype.toArray = function (a, b) {
    void 0 === a && (a = [])
    void 0 === b && (b = 0)
    a[b] = this.r
    a[b + 1] = this.g
    a[b + 2] = this.b
    return a
  }
  H.prototype.from_0x3 = function (a, b) {
    this.r = a.getX(b)
    this.g = a.getY(b)
    this.b = a.getZ(b)
    !0 === a.normalized && ((this.r /= 255), (this.g /= 255), (this.b /= 255))
    return this
  }
  H.prototype.toJSON = function () {
    return this.getHex()
  }
  H.NAMES = wi
  H.prototype.r = 1
  H.prototype.g = 1
  H.prototype.b = 1
  var vc = function (a, b, d, e, h, l) {
    this.a = a
    this.b = b
    this.c = d
    this.normal = e && e.is_0x1 ? e : new p()
    this.vertexNormals = Array.isArray(e) ? e : []
    this.color = h && h.isColor ? h : new H()
    this.vertexColors = Array.isArray(h) ? h : []
    this.materialIndex = void 0 !== l ? l : 0
  }
  vc.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  vc.prototype.copy = function (a) {
    this.a = a.a
    this.b = a.b
    this.c = a.c
    this.normal.copy(a.normal)
    this.color.copy(a.color)
    this.materialIndex = a.materialIndex
    for (var b = 0, d = a.vertexNormals.length; b < d; b++)
      this.vertexNormals[b] = a.vertexNormals[b].clone()
    b = 0
    for (d = a.vertexColors.length; b < d; b++)
      this.vertexColors[b] = a.vertexColors[b].clone()
    return this
  }
  var bj = 0
  y.prototype = Object.assign(Object.create(m.prototype), {
    constructor: y,
    isMaterial: !0,
    onBeforeCompile: function () {},
    customProgramCacheKey: function () {
      return this.onBeforeCompile.toString()
    },
    setValues: function (a) {
      if (void 0 !== a)
        for (var b in a) {
          var d = a[b]
          if (void 0 === d)
            console.warn("THREE.Material: '" + b + "' parameter is undefined.")
          else if ('shading' === b)
            console.warn(
              'THREE.' +
                this.type +
                ': .shading has been removed. Use the boolean .flatShading instead.'
            ),
              (this.flatShading = 1 === d ? !0 : !1)
          else {
            var e = this[b]
            void 0 === e
              ? console.warn(
                  'THREE.' +
                    this.type +
                    ": '" +
                    b +
                    "' is not a property of this material."
                )
              : e && e.isColor
              ? e.set(d)
              : e && e.is_0x1 && d && d.is_0x1
              ? e.copy(d)
              : (this[b] = d)
          }
        }
    },
    toJSON: function (a) {
      function b(a) {
        var b = [],
          d
        for (d in a) {
          var e = a[d]
          delete e.metadata
          b.push(e)
        }
        return b
      }
      var d = void 0 === a || 'string' === typeof a
      d && (a = { textures: {}, images: {} })
      var e = {
        metadata: {
          version: 4.5,
          type: 'Material',
          generator: 'Material.toJSON',
        },
      }
      e.uuid = this.uuid
      e.type = this.type
      '' !== this.name && (e.name = this.name)
      this.color && this.color.isColor && (e.color = this.color.getHex())
      void 0 !== this.roughness && (e.roughness = this.roughness)
      void 0 !== this.metalness && (e.metalness = this.metalness)
      this.sheen && this.sheen.isColor && (e.sheen = this.sheen.getHex())
      this.emissive &&
        this.emissive.isColor &&
        (e.emissive = this.emissive.getHex())
      this.emissiveIntensity &&
        1 !== this.emissiveIntensity &&
        (e.emissiveIntensity = this.emissiveIntensity)
      this.specular &&
        this.specular.isColor &&
        (e.specular = this.specular.getHex())
      void 0 !== this.shininess && (e.shininess = this.shininess)
      void 0 !== this.clearcoat && (e.clearcoat = this.clearcoat)
      void 0 !== this.clearcoatRoughness &&
        (e.clearcoatRoughness = this.clearcoatRoughness)
      this.clearcoatMap &&
        this.clearcoatMap.isTexture &&
        (e.clearcoatMap = this.clearcoatMap.toJSON(a).uuid)
      this.clearcoatRoughnessMap &&
        this.clearcoatRoughnessMap.isTexture &&
        (e.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON(a).uuid)
      this.clearcoatNormalMap &&
        this.clearcoatNormalMap.isTexture &&
        ((e.clearcoatNormalMap = this.clearcoatNormalMap.toJSON(a).uuid),
        (e.clearcoatNormalScale = this.clearcoatNormalScale.toArray()))
      this.map && this.map.isTexture && (e.map = this.map.toJSON(a).uuid)
      this.matcap &&
        this.matcap.isTexture &&
        (e.matcap = this.matcap.toJSON(a).uuid)
      this.alphaMap &&
        this.alphaMap.isTexture &&
        (e.alphaMap = this.alphaMap.toJSON(a).uuid)
      this.lightMap &&
        this.lightMap.isTexture &&
        (e.lightMap = this.lightMap.toJSON(a).uuid)
      this.aoMap &&
        this.aoMap.isTexture &&
        ((e.aoMap = this.aoMap.toJSON(a).uuid),
        (e.aoMapIntensity = this.aoMapIntensity))
      this.bumpMap &&
        this.bumpMap.isTexture &&
        ((e.bumpMap = this.bumpMap.toJSON(a).uuid),
        (e.bumpScale = this.bumpScale))
      this.normalMap &&
        this.normalMap.isTexture &&
        ((e.normalMap = this.normalMap.toJSON(a).uuid),
        (e.normalMapType = this.normalMapType),
        (e.normalScale = this.normalScale.toArray()))
      this.displacementMap &&
        this.displacementMap.isTexture &&
        ((e.displacementMap = this.displacementMap.toJSON(a).uuid),
        (e.displacementScale = this.displacementScale),
        (e.displacementBias = this.displacementBias))
      this.roughnessMap &&
        this.roughnessMap.isTexture &&
        (e.roughnessMap = this.roughnessMap.toJSON(a).uuid)
      this.metalnessMap &&
        this.metalnessMap.isTexture &&
        (e.metalnessMap = this.metalnessMap.toJSON(a).uuid)
      this.emissiveMap &&
        this.emissiveMap.isTexture &&
        (e.emissiveMap = this.emissiveMap.toJSON(a).uuid)
      this.specularMap &&
        this.specularMap.isTexture &&
        (e.specularMap = this.specularMap.toJSON(a).uuid)
      this.envMap &&
        this.envMap.isTexture &&
        ((e.envMap = this.envMap.toJSON(a).uuid),
        (e.reflectivity = this.reflectivity),
        (e.refractionRatio = this.refractionRatio),
        void 0 !== this.combine && (e.combine = this.combine),
        void 0 !== this.envMapIntensity &&
          (e.envMapIntensity = this.envMapIntensity))
      this.gradientMap &&
        this.gradientMap.isTexture &&
        (e.gradientMap = this.gradientMap.toJSON(a).uuid)
      void 0 !== this.size && (e.size = this.size)
      void 0 !== this.sizeAttenuation &&
        (e.sizeAttenuation = this.sizeAttenuation)
      1 !== this.blending && (e.blending = this.blending)
      !0 === this.flatShading && (e.flatShading = this.flatShading)
      0 !== this.side && (e.side = this.side)
      this.vertexColors && (e.vertexColors = !0)
      1 > this.opacity && (e.opacity = this.opacity)
      !0 === this.transparent && (e.transparent = this.transparent)
      e.depthFunc = this.depthFunc
      e.depthTest = this.depthTest
      e.depthWrite = this.depthWrite
      e.stencilWrite = this.stencilWrite
      e.stencilWriteMask = this.stencilWriteMask
      e.stencilFunc = this.stencilFunc
      e.stencilRef = this.stencilRef
      e.stencilFuncMask = this.stencilFuncMask
      e.stencilFail = this.stencilFail
      e.stencilZFail = this.stencilZFail
      e.stencilZPass = this.stencilZPass
      this.rotation && 0 !== this.rotation && (e.rotation = this.rotation)
      !0 === this.polygonOffset && (e.polygonOffset = !0)
      0 !== this.polygonOffsetFactor &&
        (e.polygonOffsetFactor = this.polygonOffsetFactor)
      0 !== this.polygonOffsetUnits &&
        (e.polygonOffsetUnits = this.polygonOffsetUnits)
      this.linewidth && 1 !== this.linewidth && (e.linewidth = this.linewidth)
      void 0 !== this.dashSize && (e.dashSize = this.dashSize)
      void 0 !== this.gapSize && (e.gapSize = this.gapSize)
      void 0 !== this.scale && (e.scale = this.scale)
      !0 === this.dithering && (e.dithering = !0)
      0 < this.alphaTest && (e.alphaTest = this.alphaTest)
      !0 === this.premultipliedAlpha &&
        (e.premultipliedAlpha = this.premultipliedAlpha)
      !0 === this.wireframe && (e.wireframe = this.wireframe)
      1 < this.wireframeLinewidth &&
        (e.wireframeLinewidth = this.wireframeLinewidth)
      'round' !== this.wireframeLinecap &&
        (e.wireframeLinecap = this.wireframeLinecap)
      'round' !== this.wireframeLinejoin &&
        (e.wireframeLinejoin = this.wireframeLinejoin)
      !0 === this.morphTargets && (e.morphTargets = !0)
      !0 === this.morphNormals && (e.morphNormals = !0)
      !0 === this.skinning && (e.skinning = !0)
      !1 === this.visible && (e.visible = !1)
      !1 === this.toneMapped && (e.toneMapped = !1)
      '{}' !== JSON.stringify(this.userData) && (e.userData = this.userData)
      d &&
        ((d = b(a.textures)),
        (a = b(a.images)),
        0 < d.length && (e.textures = d),
        0 < a.length && (e.images = a))
      return e
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    copy: function (a) {
      this.name = a.name
      this.fog = a.fog
      this.blending = a.blending
      this.side = a.side
      this.flatShading = a.flatShading
      this.vertexColors = a.vertexColors
      this.opacity = a.opacity
      this.transparent = a.transparent
      this.blendSrc = a.blendSrc
      this.blendDst = a.blendDst
      this.blendEquation = a.blendEquation
      this.blendSrcAlpha = a.blendSrcAlpha
      this.blendDstAlpha = a.blendDstAlpha
      this.blendEquationAlpha = a.blendEquationAlpha
      this.depthFunc = a.depthFunc
      this.depthTest = a.depthTest
      this.depthWrite = a.depthWrite
      this.stencilWriteMask = a.stencilWriteMask
      this.stencilFunc = a.stencilFunc
      this.stencilRef = a.stencilRef
      this.stencilFuncMask = a.stencilFuncMask
      this.stencilFail = a.stencilFail
      this.stencilZFail = a.stencilZFail
      this.stencilZPass = a.stencilZPass
      this.stencilWrite = a.stencilWrite
      var b = a.clippingpls,
        d = null
      if (null !== b)
        for (var e = b.length, d = Array(e), h = 0; h !== e; ++h)
          d[h] = b[h].clone()
      this.clippingpls = d
      this.clipIntersection = a.clipIntersection
      this.clipShadows = a.clipShadows
      this.shadowSide = a.shadowSide
      this.colorWrite = a.colorWrite
      this.precision = a.precision
      this.polygonOffset = a.polygonOffset
      this.polygonOffsetFactor = a.polygonOffsetFactor
      this.polygonOffsetUnits = a.polygonOffsetUnits
      this.dithering = a.dithering
      this.alphaTest = a.alphaTest
      this.premultipliedAlpha = a.premultipliedAlpha
      this.visible = a.visible
      this.toneMapped = a.toneMapped
      this.userData = JSON.parse(JSON.stringify(a.userData))
      return this
    },
    dispose: function () {
      this.dispatchEvent({ type: 'dispose' })
    },
  })
  Object.defineProperty(y.prototype, 'needsUpdate', {
    set: function (a) {
      !0 === a && this.version++
    },
  })
  L.prototype = Object.create(y.prototype)
  L.prototype.constructor = L
  L.prototype.isnaBasicMaterial = !0
  L.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.map = a.map
    this.lightMap = a.lightMap
    this.lightMapIntensity = a.lightMapIntensity
    this.aoMap = a.aoMap
    this.aoMapIntensity = a.aoMapIntensity
    this.specularMap = a.specularMap
    this.alphaMap = a.alphaMap
    this.envMap = a.envMap
    this.combine = a.combine
    this.reflectivity = a.reflectivity
    this.refractionRatio = a.refractionRatio
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.wireframeLinecap = a.wireframeLinecap
    this.wireframeLinejoin = a.wireframeLinejoin
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    return this
  }
  var ya = new p(),
    Qf = new B()
  Object.defineProperty(C.prototype, 'needsUpdate', {
    set: function (a) {
      !0 === a && this.version++
    },
  })
  Object.assign(C.prototype, {
    is_0x3: !0,
    onUploadCallback: function () {},
    setUsage: function (a) {
      this.usage = a
      return this
    },
    copy: function (a) {
      this.name = a.name
      this.array = new a.array.constructor(a.array)
      this.itemSize = a.itemSize
      this.count = a.count
      this.normalized = a.normalized
      this.usage = a.usage
      return this
    },
    copyAt: function (a, b, d) {
      a *= this.itemSize
      d *= b.itemSize
      for (var e = 0, h = this.itemSize; e < h; e++)
        this.array[a + e] = b.array[d + e]
      return this
    },
    copyArray: function (a) {
      this.array.set(a)
      return this
    },
    copyColorsArray: function (a) {
      for (var b = this.array, d = 0, e = 0, h = a.length; e < h; e++) {
        var l = a[e]
        void 0 === l &&
          (console.warn('THREE._0x3.copyColorsArray(): color is undefined', e),
          (l = new H()))
        b[d++] = l.r
        b[d++] = l.g
        b[d++] = l.b
      }
      return this
    },
    copyvt2sArray: function (a) {
      for (var b = this.array, d = 0, e = 0, h = a.length; e < h; e++) {
        var l = a[e]
        void 0 === l &&
          (console.warn('THREE._0x3.copyvt2sArray(): vector is undefined', e),
          (l = new B()))
        b[d++] = l.x
        b[d++] = l.y
      }
      return this
    },
    copy_0x1sArray: function (a) {
      for (var b = this.array, d = 0, e = 0, h = a.length; e < h; e++) {
        var l = a[e]
        void 0 === l &&
          (console.warn('THREE._0x3.copy_0x1sArray(): vector is undefined', e),
          (l = new p()))
        b[d++] = l.x
        b[d++] = l.y
        b[d++] = l.z
      }
      return this
    },
    copyVector4sArray: function (a) {
      for (var b = this.array, d = 0, e = 0, h = a.length; e < h; e++) {
        var l = a[e]
        void 0 === l &&
          (console.warn(
            'THREE._0x3.copyVector4sArray(): vector is undefined',
            e
          ),
          (l = new P()))
        b[d++] = l.x
        b[d++] = l.y
        b[d++] = l.z
        b[d++] = l.w
      }
      return this
    },
    applyMatrix3: function (a) {
      if (2 === this.itemSize)
        for (var b = 0, d = this.count; b < d; b++)
          Qf.from_0x3(this, b), Qf.applyMatrix3(a), this.setXY(b, Qf.x, Qf.y)
      else if (3 === this.itemSize)
        for (b = 0, d = this.count; b < d; b++)
          ya.from_0x3(this, b),
            ya.applyMatrix3(a),
            this.setXYZ(b, ya.x, ya.y, ya.z)
      return this
    },
    applyMatrix4: function (a) {
      for (var b = 0, d = this.count; b < d; b++)
        (ya.x = this.getX(b)),
          (ya.y = this.getY(b)),
          (ya.z = this.getZ(b)),
          ya.applyMatrix4(a),
          this.setXYZ(b, ya.x, ya.y, ya.z)
      return this
    },
    applyNormalMatrix: function (a) {
      for (var b = 0, d = this.count; b < d; b++)
        (ya.x = this.getX(b)),
          (ya.y = this.getY(b)),
          (ya.z = this.getZ(b)),
          ya.applyNormalMatrix(a),
          this.setXYZ(b, ya.x, ya.y, ya.z)
      return this
    },
    transformDirection: function (a) {
      for (var b = 0, d = this.count; b < d; b++)
        (ya.x = this.getX(b)),
          (ya.y = this.getY(b)),
          (ya.z = this.getZ(b)),
          ya.transformDirection(a),
          this.setXYZ(b, ya.x, ya.y, ya.z)
      return this
    },
    set: function (a, b) {
      void 0 === b && (b = 0)
      this.array.set(a, b)
      return this
    },
    getX: function (a) {
      return this.array[a * this.itemSize]
    },
    setX: function (a, b) {
      this.array[a * this.itemSize] = b
      return this
    },
    getY: function (a) {
      return this.array[a * this.itemSize + 1]
    },
    setY: function (a, b) {
      this.array[a * this.itemSize + 1] = b
      return this
    },
    getZ: function (a) {
      return this.array[a * this.itemSize + 2]
    },
    setZ: function (a, b) {
      this.array[a * this.itemSize + 2] = b
      return this
    },
    getW: function (a) {
      return this.array[a * this.itemSize + 3]
    },
    setW: function (a, b) {
      this.array[a * this.itemSize + 3] = b
      return this
    },
    setXY: function (a, b, d) {
      a *= this.itemSize
      this.array[a + 0] = b
      this.array[a + 1] = d
      return this
    },
    setXYZ: function (a, b, d, e) {
      a *= this.itemSize
      this.array[a + 0] = b
      this.array[a + 1] = d
      this.array[a + 2] = e
      return this
    },
    setXYZW: function (a, b, d, e, h) {
      a *= this.itemSize
      this.array[a + 0] = b
      this.array[a + 1] = d
      this.array[a + 2] = e
      this.array[a + 3] = h
      return this
    },
    onUpload: function (a) {
      this.onUploadCallback = a
      return this
    },
    clone: function () {
      return new this.constructor(this.array, this.itemSize).copy(this)
    },
    toJSON: function () {
      return {
        itemSize: this.itemSize,
        type: this.array.constructor.name,
        array: Array.prototype.slice.call(this.array),
        normalized: this.normalized,
      }
    },
  })
  G.prototype = Object.create(C.prototype)
  G.prototype.constructor = G
  v.prototype = Object.create(C.prototype)
  v.prototype.constructor = v
  Q.prototype = Object.create(C.prototype)
  Q.prototype.constructor = Q
  Y.prototype = Object.create(C.prototype)
  Y.prototype.constructor = Y
  S.prototype = Object.create(C.prototype)
  S.prototype.constructor = S
  R.prototype = Object.create(C.prototype)
  R.prototype.constructor = R
  X.prototype = Object.create(C.prototype)
  X.prototype.constructor = X
  E.prototype = Object.create(C.prototype)
  E.prototype.constructor = E
  U.prototype = Object.create(C.prototype)
  U.prototype.constructor = U
  var gh = function () {
    this.vertices = []
    this.normals = []
    this.colors = []
    this.uvs = []
    this.uvs2 = []
    this.groups = []
    this.morphTargets = {}
    this.skinWeights = []
    this.skinIndices = []
    this.boundingSphere = this.boundingBox = null
    this.groupsNeedUpdate = this.uvsNeedUpdate = this.colorsNeedUpdate = this.normalsNeedUpdate = this.verticesNeedUpdate = !1
  }
  gh.prototype.computeGroups = function (a) {
    var b = [],
      d,
      e = void 0,
      h = a.faces
    for (a = 0; a < h.length; a++) {
      var l = h[a]
      l.materialIndex !== e &&
        ((e = l.materialIndex),
        void 0 !== d && ((d.count = 3 * a - d.start), b.push(d)),
        (d = { start: 3 * a, materialIndex: e }))
    }
    void 0 !== d && ((d.count = 3 * a - d.start), b.push(d))
    this.groups = b
  }
  gh.prototype.from_0x6 = function (a) {
    var b = a.faces,
      d = a.vertices,
      e = a.faceVertexUvs,
      h = e[0] && 0 < e[0].length,
      l = e[1] && 0 < e[1].length,
      f = a.morphTargets,
      g = f.length,
      k
    if (0 < g) {
      k = []
      for (var m = 0; m < g; m++) k[m] = { name: f[m].name, data: [] }
      this.morphTargets.position = k
    }
    var m = a.morphNormals,
      n = m.length,
      p
    if (0 < n) {
      p = []
      for (var r = 0; r < n; r++) p[r] = { name: m[r].name, data: [] }
      this.morphTargets.normal = p
    }
    var r = a.skinIndices,
      u = a.skinWeights,
      w = r.length === d.length,
      v = u.length === d.length
    0 < d.length &&
      0 === b.length &&
      console.error('THREE.Direct_0x6: Faceless geometries are not supported.')
    for (var z = 0; z < b.length; z++) {
      var x = b[z]
      this.vertices.push(d[x.a], d[x.b], d[x.c])
      var y = x.vertexNormals
      3 === y.length
        ? this.normals.push(y[0], y[1], y[2])
        : ((y = x.normal), this.normals.push(y, y, y))
      y = x.vertexColors
      3 === y.length
        ? this.colors.push(y[0], y[1], y[2])
        : ((y = x.color), this.colors.push(y, y, y))
      !0 === h &&
        ((y = e[0][z]),
        void 0 !== y
          ? this.uvs.push(y[0], y[1], y[2])
          : (console.warn('THREE.Direct_0x6.from_0x6(): Undefined vertexUv ', z),
            this.uvs.push(new B(), new B(), new B())))
      !0 === l &&
        ((y = e[1][z]),
        void 0 !== y
          ? this.uvs2.push(y[0], y[1], y[2])
          : (console.warn(
              'THREE.Direct_0x6.from_0x6(): Undefined vertexUv2 ',
              z
            ),
            this.uvs2.push(new B(), new B(), new B())))
      for (y = 0; y < g; y++) {
        var C = f[y].vertices
        k[y].data.push(C[x.a], C[x.b], C[x.c])
      }
      for (y = 0; y < n; y++)
        (C = m[y].vertexNormals[z]), p[y].data.push(C.a, C.b, C.c)
      w && this.skinIndices.push(r[x.a], r[x.b], r[x.c])
      v && this.skinWeights.push(u[x.a], u[x.b], u[x.c])
    }
    this.computeGroups(a)
    this.verticesNeedUpdate = a.verticesNeedUpdate
    this.normalsNeedUpdate = a.normalsNeedUpdate
    this.colorsNeedUpdate = a.colorsNeedUpdate
    this.uvsNeedUpdate = a.uvsNeedUpdate
    this.groupsNeedUpdate = a.groupsNeedUpdate
    null !== a.boundingSphere &&
      (this.boundingSphere = a.boundingSphere.clone())
    null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone())
    return this
  }
  var cj = 1,
    Ib = new O(),
    hh = new n(),
    Ld = new p(),
    kb = new ba(),
    Me = new ba(),
    La = new p()
  I.prototype = Object.assign(Object.create(m.prototype), {
    constructor: I,
    is_0x2: !0,
    getIndex: function () {
      return this.index
    },
    setIndex: function (a) {
      Array.isArray(a)
        ? (this.index = new (65535 < sa(a) ? X : S)(a, 1))
        : (this.index = a)
    },
    getAttribute: function (a) {
      return this.attributes[a]
    },
    setAttribute: function (a, b) {
      this.attributes[a] = b
      return this
    },
    deleteAttribute: function (a) {
      delete this.attributes[a]
      return this
    },
    addGroup: function (a, b, d) {
      this.groups.push({
        start: a,
        count: b,
        materialIndex: void 0 !== d ? d : 0,
      })
    },
    clearGroups: function () {
      this.groups = []
    },
    setDrawRange: function (a, b) {
      this.drawRange.start = a
      this.drawRange.count = b
    },
    applyMatrix4: function (a) {
      var b = this.attributes.position
      void 0 !== b && (b.applyMatrix4(a), (b.needsUpdate = !0))
      b = this.attributes.normal
      if (void 0 !== b) {
        var d = new ha().getNormalMatrix(a)
        b.applyNormalMatrix(d)
        b.needsUpdate = !0
      }
      b = this.attributes.tangent
      void 0 !== b && (b.transformDirection(a), (b.needsUpdate = !0))
      null !== this.boundingBox && this.computeBoundingBox()
      null !== this.boundingSphere && this.computeBoundingSphere()
      return this
    },
    rotateX: function (a) {
      Ib.makeRotationX(a)
      this.applyMatrix4(Ib)
      return this
    },
    rotateY: function (a) {
      Ib.makeRotationY(a)
      this.applyMatrix4(Ib)
      return this
    },
    rotateZ: function (a) {
      Ib.makeRotationZ(a)
      this.applyMatrix4(Ib)
      return this
    },
    translate: function (a, b, d) {
      Ib.makeTranslation(a, b, d)
      this.applyMatrix4(Ib)
      return this
    },
    scale: function (a, b, d) {
      Ib.makeScale(a, b, d)
      this.applyMatrix4(Ib)
      return this
    },
    lookAt: function (a) {
      hh.lookAt(a)
      hh.updateMatrix()
      this.applyMatrix4(hh.matrix)
      return this
    },
    center: function () {
      this.computeBoundingBox()
      this.boundingBox.getCenter(Ld).negate()
      this.translate(Ld.x, Ld.y, Ld.z)
      return this
    },
    setFromObject: function (a) {
      var b = a.geometry
      if (a.isPoints || a.isLine) {
        a = new E(3 * b.vertices.length, 3)
        var d = new E(3 * b.colors.length, 3)
        this.setAttribute('position', a.copy_0x1sArray(b.vertices))
        this.setAttribute('color', d.copyColorsArray(b.colors))
        b.lineDistances &&
          b.lineDistances.length === b.vertices.length &&
          ((a = new E(b.lineDistances.length, 1)),
          this.setAttribute('lineDistance', a.copyArray(b.lineDistances)))
        null !== b.boundingSphere &&
          (this.boundingSphere = b.boundingSphere.clone())
        null !== b.boundingBox && (this.boundingBox = b.boundingBox.clone())
      } else a.isna && b && b.is_0x6 && this.from_0x6(b)
      return this
    },
    setFromPoints: function (a) {
      for (var b = [], d = 0, e = a.length; d < e; d++) {
        var h = a[d]
        b.push(h.x, h.y, h.z || 0)
      }
      this.setAttribute('position', new E(b, 3))
      return this
    },
    updateFromObject: function (a) {
      var b = a.geometry
      if (a.isna) {
        var d = b.__direct_0x6
        !0 === b.elementsNeedUpdate &&
          ((d = void 0), (b.elementsNeedUpdate = !1))
        if (void 0 === d) return this.from_0x6(b)
        d.verticesNeedUpdate = b.verticesNeedUpdate
        d.normalsNeedUpdate = b.normalsNeedUpdate
        d.colorsNeedUpdate = b.colorsNeedUpdate
        d.uvsNeedUpdate = b.uvsNeedUpdate
        d.groupsNeedUpdate = b.groupsNeedUpdate
        b.verticesNeedUpdate = !1
        b.normalsNeedUpdate = !1
        b.colorsNeedUpdate = !1
        b.uvsNeedUpdate = !1
        b.groupsNeedUpdate = !1
        b = d
      }
      !0 === b.verticesNeedUpdate &&
        ((d = this.attributes.position),
        void 0 !== d && (d.copy_0x1sArray(b.vertices), (d.needsUpdate = !0)),
        (b.verticesNeedUpdate = !1))
      !0 === b.normalsNeedUpdate &&
        ((d = this.attributes.normal),
        void 0 !== d && (d.copy_0x1sArray(b.normals), (d.needsUpdate = !0)),
        (b.normalsNeedUpdate = !1))
      !0 === b.colorsNeedUpdate &&
        ((d = this.attributes.color),
        void 0 !== d && (d.copyColorsArray(b.colors), (d.needsUpdate = !0)),
        (b.colorsNeedUpdate = !1))
      b.uvsNeedUpdate &&
        ((d = this.attributes.uv),
        void 0 !== d && (d.copyvt2sArray(b.uvs), (d.needsUpdate = !0)),
        (b.uvsNeedUpdate = !1))
      b.lineDistancesNeedUpdate &&
        ((d = this.attributes.lineDistance),
        void 0 !== d && (d.copyArray(b.lineDistances), (d.needsUpdate = !0)),
        (b.lineDistancesNeedUpdate = !1))
      b.groupsNeedUpdate &&
        (b.computeGroups(a.geometry),
        (this.groups = b.groups),
        (b.groupsNeedUpdate = !1))
      return this
    },
    from_0x6: function (a) {
      a.__direct_0x6 = new gh().from_0x6(a)
      return this.fromDirect_0x6(a.__direct_0x6)
    },
    fromDirect_0x6: function (a) {
      var b = new Float32Array(3 * a.vertices.length)
      this.setAttribute('position', new C(b, 3).copy_0x1sArray(a.vertices))
      0 < a.normals.length &&
        ((b = new Float32Array(3 * a.normals.length)),
        this.setAttribute('normal', new C(b, 3).copy_0x1sArray(a.normals)))
      0 < a.colors.length &&
        ((b = new Float32Array(3 * a.colors.length)),
        this.setAttribute('color', new C(b, 3).copyColorsArray(a.colors)))
      0 < a.uvs.length &&
        ((b = new Float32Array(2 * a.uvs.length)),
        this.setAttribute('uv', new C(b, 2).copyvt2sArray(a.uvs)))
      0 < a.uvs2.length &&
        ((b = new Float32Array(2 * a.uvs2.length)),
        this.setAttribute('uv2', new C(b, 2).copyvt2sArray(a.uvs2)))
      this.groups = a.groups
      for (var d in a.morphTargets) {
        for (
          var b = [], e = a.morphTargets[d], h = 0, l = e.length;
          h < l;
          h++
        ) {
          var f = e[h],
            g = new E(3 * f.data.length, 3)
          g.name = f.name
          b.push(g.copy_0x1sArray(f.data))
        }
        this.morphAttributes[d] = b
      }
      0 < a.skinIndices.length &&
        ((d = new E(4 * a.skinIndices.length, 4)),
        this.setAttribute('skinIndex', d.copyVector4sArray(a.skinIndices)))
      0 < a.skinWeights.length &&
        ((d = new E(4 * a.skinWeights.length, 4)),
        this.setAttribute('skinWeight', d.copyVector4sArray(a.skinWeights)))
      null !== a.boundingSphere &&
        (this.boundingSphere = a.boundingSphere.clone())
      null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone())
      return this
    },
    computeBoundingBox: function () {
      null === this.boundingBox && (this.boundingBox = new ba())
      var a = this.attributes.position,
        b = this.morphAttributes.position
      if (a && a.isGL_0x3)
        console.error(
          'THREE._0x2.computeBoundingBox(): GL_0x3 requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".',
          this
        ),
          this.boundingBox.set(
            new p(-Infinity, -Infinity, -Infinity),
            new p(Infinity, Infinity, Infinity)
          )
      else {
        if (void 0 !== a) {
          if ((this.boundingBox.setFrom_0x3(a), b))
            for (var a = 0, d = b.length; a < d; a++)
              kb.setFrom_0x3(b[a]),
                this.morphTargetsRelative
                  ? (La.addVectors(this.boundingBox.min, kb.min),
                    this.boundingBox.expandByPoint(La),
                    La.addVectors(this.boundingBox.max, kb.max),
                    this.boundingBox.expandByPoint(La))
                  : (this.boundingBox.expandByPoint(kb.min),
                    this.boundingBox.expandByPoint(kb.max))
        } else this.boundingBox.makeEmpty()
        ;(isNaN(this.boundingBox.min.x) ||
          isNaN(this.boundingBox.min.y) ||
          isNaN(this.boundingBox.min.z)) &&
          console.error(
            'THREE._0x2.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',
            this
          )
      }
    },
    computeBoundingSphere: function () {
      null === this.boundingSphere && (this.boundingSphere = new ta())
      var a = this.attributes.position,
        b = this.morphAttributes.position
      if (a && a.isGL_0x3)
        console.error(
          'THREE._0x2.computeBoundingSphere(): GL_0x3 requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".',
          this
        ),
          this.boundingSphere.set(new p(), Infinity)
      else if (a) {
        var d = this.boundingSphere.center
        kb.setFrom_0x3(a)
        if (b)
          for (var e = 0, h = b.length; e < h; e++)
            Me.setFrom_0x3(b[e]),
              this.morphTargetsRelative
                ? (La.addVectors(kb.min, Me.min),
                  kb.expandByPoint(La),
                  La.addVectors(kb.max, Me.max),
                  kb.expandByPoint(La))
                : (kb.expandByPoint(Me.min), kb.expandByPoint(Me.max))
        kb.getCenter(d)
        for (var h = (e = 0), l = a.count; h < l; h++)
          La.from_0x3(a, h), (e = Math.max(e, d.distanceToSquared(La)))
        if (b)
          for (h = 0, l = b.length; h < l; h++)
            for (
              var f = b[h], g = this.morphTargetsRelative, k = 0, m = f.count;
              k < m;
              k++
            )
              La.from_0x3(f, k),
                g && (Ld.from_0x3(a, k), La.add(Ld)),
                (e = Math.max(e, d.distanceToSquared(La)))
        this.boundingSphere.radius = Math.sqrt(e)
        isNaN(this.boundingSphere.radius) &&
          console.error(
            'THREE._0x2.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',
            this
          )
      }
    },
    computeFaceNormals: function () {},
    computeVertexNormals: function () {
      var a = this.index,
        b = this.getAttribute('position')
      if (void 0 !== b) {
        var d = this.getAttribute('normal')
        if (void 0 === d)
          (d = new C(new Float32Array(3 * b.count), 3)),
            this.setAttribute('normal', d)
        else for (var e = 0, h = d.count; e < h; e++) d.setXYZ(e, 0, 0, 0)
        var e = new p(),
          h = new p(),
          l = new p(),
          f = new p(),
          g = new p(),
          k = new p(),
          m = new p(),
          n = new p()
        if (a)
          for (var D = 0, r = a.count; D < r; D += 3) {
            var u = a.getX(D + 0),
              w = a.getX(D + 1),
              v = a.getX(D + 2)
            e.from_0x3(b, u)
            h.from_0x3(b, w)
            l.from_0x3(b, v)
            m.subVectors(l, h)
            n.subVectors(e, h)
            m.cross(n)
            f.from_0x3(d, u)
            g.from_0x3(d, w)
            k.from_0x3(d, v)
            f.add(m)
            g.add(m)
            k.add(m)
            d.setXYZ(u, f.x, f.y, f.z)
            d.setXYZ(w, g.x, g.y, g.z)
            d.setXYZ(v, k.x, k.y, k.z)
          }
        else
          for (a = 0, f = b.count; a < f; a += 3)
            e.from_0x3(b, a + 0),
              h.from_0x3(b, a + 1),
              l.from_0x3(b, a + 2),
              m.subVectors(l, h),
              n.subVectors(e, h),
              m.cross(n),
              d.setXYZ(a + 0, m.x, m.y, m.z),
              d.setXYZ(a + 1, m.x, m.y, m.z),
              d.setXYZ(a + 2, m.x, m.y, m.z)
        this.normalizeNormals()
        d.needsUpdate = !0
      }
    },
    merge: function (a, b) {
      if (a && a.is_0x2) {
        void 0 === b &&
          ((b = 0),
          console.warn(
            'THREE._0x2.merge(): Overwriting original geometry, starting at offset\x3d0. Use _0x2Utils.mergeBufferGeometries() for lossless merge.'
          ))
        var d = this.attributes,
          e
        for (e in d)
          if (void 0 !== a.attributes[e])
            for (
              var h = d[e].array,
                l = a.attributes[e],
                f = l.array,
                g = l.itemSize * b,
                l = Math.min(f.length, h.length - g),
                k = 0;
              k < l;
              k++, g++
            )
              h[g] = f[k]
        return this
      }
      console.error(
        'THREE._0x2.merge(): geometry not an instance of THREE._0x2.',
        a
      )
    },
    normalizeNormals: function () {
      for (var a = this.attributes.normal, b = 0, d = a.count; b < d; b++)
        La.from_0x3(a, b), La.normalize(), a.setXYZ(b, La.x, La.y, La.z)
    },
    toNonIndexed: function () {
      function a(a, b) {
        for (
          var d = a.array,
            e = a.itemSize,
            h = a.normalized,
            l = new d.constructor(b.length * e),
            f,
            q = 0,
            g = 0,
            t = b.length;
          g < t;
          g++
        ) {
          f = b[g] * e
          for (var k = 0; k < e; k++) l[q++] = d[f++]
        }
        return new C(l, e, h)
      }
      if (null === this.index)
        return (
          console.warn(
            'THREE._0x2.toNonIndexed(): _0x6 is already non-indexed.'
          ),
          this
        )
      var b = new I(),
        d = this.index.array,
        e = this.attributes,
        h
      for (h in e) {
        var l = a(e[h], d)
        b.setAttribute(h, l)
      }
      var e = this.morphAttributes,
        f
      for (f in e) {
        h = []
        for (var l = e[f], g = 0, k = l.length; g < k; g++) {
          var m = a(l[g], d)
          h.push(m)
        }
        b.morphAttributes[f] = h
      }
      b.morphTargetsRelative = this.morphTargetsRelative
      d = this.groups
      f = 0
      for (e = d.length; f < e; f++)
        (h = d[f]), b.addGroup(h.start, h.count, h.materialIndex)
      return b
    },
    toJSON: function () {
      var a = {
        metadata: { version: 4.5, type: '_0x2', generator: '_0x2.toJSON' },
      }
      a.uuid = this.uuid
      a.type = this.type
      '' !== this.name && (a.name = this.name)
      0 < Object.keys(this.userData).length && (a.userData = this.userData)
      if (void 0 !== this.parameters) {
        var b = this.parameters,
          d
        for (d in b) void 0 !== b[d] && (a[d] = b[d])
        return a
      }
      a.data = { attributes: {} }
      d = this.index
      null !== d &&
        (a.data.index = {
          type: d.array.constructor.name,
          array: Array.prototype.slice.call(d.array),
        })
      d = this.attributes
      for (var e in d) {
        var h = d[e],
          l = h.toJSON(a.data)
        '' !== h.name && (l.name = h.name)
        a.data.attributes[e] = l
      }
      e = {}
      d = !1
      for (b in this.morphAttributes) {
        for (
          var h = this.morphAttributes[b], l = [], f = 0, g = h.length;
          f < g;
          f++
        ) {
          var k = h[f],
            m = k.toJSON(a.data)
          '' !== k.name && (m.name = k.name)
          l.push(m)
        }
        0 < l.length && ((e[b] = l), (d = !0))
      }
      d &&
        ((a.data.morphAttributes = e),
        (a.data.morphTargetsRelative = this.morphTargetsRelative))
      b = this.groups
      0 < b.length && (a.data.groups = JSON.parse(JSON.stringify(b)))
      b = this.boundingSphere
      null !== b &&
        (a.data.boundingSphere = {
          center: b.center.toArray(),
          radius: b.radius,
        })
      return a
    },
    clone: function () {
      return new I().copy(this)
    },
    copy: function (a) {
      this.index = null
      this.attributes = {}
      this.morphAttributes = {}
      this.groups = []
      this.boundingSphere = this.boundingBox = null
      var b = {}
      this.name = a.name
      var d = a.index
      null !== d && this.setIndex(d.clone(b))
      var d = a.attributes,
        e
      for (e in d) this.setAttribute(e, d[e].clone(b))
      e = a.morphAttributes
      for (var h in e) {
        for (var d = [], l = e[h], f = 0, g = l.length; f < g; f++)
          d.push(l[f].clone(b))
        this.morphAttributes[h] = d
      }
      this.morphTargetsRelative = a.morphTargetsRelative
      b = a.groups
      h = 0
      for (e = b.length; h < e; h++)
        (d = b[h]), this.addGroup(d.start, d.count, d.materialIndex)
      b = a.boundingBox
      null !== b && (this.boundingBox = b.clone())
      b = a.boundingSphere
      null !== b && (this.boundingSphere = b.clone())
      this.drawRange.start = a.drawRange.start
      this.drawRange.count = a.drawRange.count
      this.userData = a.userData
      return this
    },
    dispose: function () {
      this.dispatchEvent({ type: 'dispose' })
    },
  })
  var xi = new O(),
    Mc = new pa(),
    ih = new ta(),
    Yb = new p(),
    Zb = new p(),
    $b = new p(),
    kg = new p(),
    lg = new p(),
    mg = new p(),
    We = new p(),
    Xe = new p(),
    Ye = new p(),
    Vc = new B(),
    Wc = new B(),
    Xc = new B(),
    Rd = new p(),
    Ve = new p()
  ca.prototype = Object.assign(Object.create(n.prototype), {
    constructor: ca,
    isna: !0,
    copy: function (a) {
      n.prototype.copy.call(this, a)
      void 0 !== a.morphTargetInfluences &&
        (this.morphTargetInfluences = a.morphTargetInfluences.slice())
      void 0 !== a.morphTargetDictionary &&
        (this.morphTargetDictionary = Object.assign(
          {},
          a.morphTargetDictionary
        ))
      this.material = a.material
      this.geometry = a.geometry
      return this
    },
    updateMorphTargets: function () {
      var a = this.geometry
      if (a.is_0x2) {
        var a = a.morphAttributes,
          b = Object.keys(a)
        if (0 < b.length && ((a = a[b[0]]), void 0 !== a)) {
          this.morphTargetInfluences = []
          this.morphTargetDictionary = {}
          for (var b = 0, d = a.length; b < d; b++) {
            var e = a[b].name || String(b)
            this.morphTargetInfluences.push(0)
            this.morphTargetDictionary[e] = b
          }
        }
      } else
        (a = a.morphTargets),
          void 0 !== a &&
            0 < a.length &&
            console.error(
              'THREE.na.updateMorphTargets() no longer supports THREE._0x6. Use THREE._0x2 instead.'
            )
    },
    raycast: function (a, b) {
      var d = this.geometry,
        e = this.material,
        h = this.matrixWorld
      if (
        void 0 !== e &&
        (null === d.boundingSphere && d.computeBoundingSphere(),
        ih.copy(d.boundingSphere),
        ih.applyMatrix4(h),
        !1 !== a.ray.intersectsSphere(ih) &&
          (xi.getInverse(h),
          Mc.copy(a.ray).applyMatrix4(xi),
          null === d.boundingBox || !1 !== Mc.intersectsBox(d.boundingBox)))
      )
        if (d.is_0x2) {
          var l = d.index,
            f = d.attributes.position,
            h = d.morphAttributes.position,
            g = d.morphTargetsRelative,
            k = d.attributes.uv,
            m = d.attributes.uv2,
            n = d.groups,
            p = d.drawRange
          if (null !== l)
            if (Array.isArray(e))
              for (var r = 0, u = n.length; r < u; r++)
                for (
                  var w = n[r],
                    v = e[w.materialIndex],
                    z = Math.max(w.start, p.start),
                    y = Math.min(w.start + w.count, p.start + p.count);
                  z < y;
                  z += 3
                ) {
                  var d = l.getX(z),
                    x = l.getX(z + 1),
                    C = l.getX(z + 2)
                  if ((d = Pa(this, v, a, Mc, f, h, g, k, m, d, x, C)))
                    (d.faceIndex = Math.floor(z / 3)),
                      (d.face.materialIndex = w.materialIndex),
                      b.push(d)
                }
            else
              for (
                n = Math.max(0, p.start),
                  p = Math.min(l.count, p.start + p.count);
                n < p;
                n += 3
              ) {
                if (
                  ((d = l.getX(n)),
                  (r = l.getX(n + 1)),
                  (u = l.getX(n + 2)),
                  (d = Pa(this, e, a, Mc, f, h, g, k, m, d, r, u)))
                )
                  (d.faceIndex = Math.floor(n / 3)), b.push(d)
              }
          else if (void 0 !== f)
            if (Array.isArray(e))
              for (l = 0, r = n.length; l < r; l++)
                for (
                  u = n[l],
                    w = e[u.materialIndex],
                    v = Math.max(u.start, p.start),
                    z = Math.min(u.start + u.count, p.start + p.count);
                  v < z;
                  v += 3
                ) {
                  if ((d = Pa(this, w, a, Mc, f, h, g, k, m, v, v + 1, v + 2)))
                    (d.faceIndex = Math.floor(v / 3)),
                      (d.face.materialIndex = u.materialIndex),
                      b.push(d)
                }
            else
              for (
                n = Math.max(0, p.start),
                  p = Math.min(f.count, p.start + p.count);
                n < p;
                n += 3
              )
                if ((d = Pa(this, e, a, Mc, f, h, g, k, m, n, n + 1, n + 2)))
                  (d.faceIndex = Math.floor(n / 3)), b.push(d)
        } else if (d.is_0x6)
          for (
            h = Array.isArray(e),
              g = d.vertices,
              k = d.faces,
              d = d.faceVertexUvs[0],
              0 < d.length && (f = d),
              m = 0,
              p = k.length;
            m < p;
            m++
          )
            if (
              ((n = k[m]),
              (d = h ? e[n.materialIndex] : e),
              void 0 !== d &&
                ((l = g[n.a]),
                (r = g[n.b]),
                (u = g[n.c]),
                (d = Oa(this, d, a, Mc, l, r, u, Rd))))
            )
              f &&
                f[m] &&
                ((w = f[m]),
                Vc.copy(w[0]),
                Wc.copy(w[1]),
                Xc.copy(w[2]),
                (d.uv = fa.getUV(Rd, l, r, u, Vc, Wc, Xc, new B()))),
                (d.face = n),
                (d.faceIndex = m),
                b.push(d)
    },
  })
  var dj = 0,
    Jb = new O(),
    jh = new n(),
    Rf = new p()
  V.prototype = Object.assign(Object.create(m.prototype), {
    constructor: V,
    is_0x6: !0,
    applyMatrix4: function (a) {
      for (
        var b = new ha().getNormalMatrix(a), d = 0, e = this.vertices.length;
        d < e;
        d++
      )
        this.vertices[d].applyMatrix4(a)
      a = 0
      for (d = this.faces.length; a < d; a++) {
        e = this.faces[a]
        e.normal.applyMatrix3(b).normalize()
        for (var h = 0, l = e.vertexNormals.length; h < l; h++)
          e.vertexNormals[h].applyMatrix3(b).normalize()
      }
      null !== this.boundingBox && this.computeBoundingBox()
      null !== this.boundingSphere && this.computeBoundingSphere()
      this.normalsNeedUpdate = this.verticesNeedUpdate = !0
      return this
    },
    rotateX: function (a) {
      Jb.makeRotationX(a)
      this.applyMatrix4(Jb)
      return this
    },
    rotateY: function (a) {
      Jb.makeRotationY(a)
      this.applyMatrix4(Jb)
      return this
    },
    rotateZ: function (a) {
      Jb.makeRotationZ(a)
      this.applyMatrix4(Jb)
      return this
    },
    translate: function (a, b, d) {
      Jb.makeTranslation(a, b, d)
      this.applyMatrix4(Jb)
      return this
    },
    scale: function (a, b, d) {
      Jb.makeScale(a, b, d)
      this.applyMatrix4(Jb)
      return this
    },
    lookAt: function (a) {
      jh.lookAt(a)
      jh.updateMatrix()
      this.applyMatrix4(jh.matrix)
      return this
    },
    from_0x2: function (a) {
      function b(a, b, e, h) {
        var l =
            void 0 === g
              ? []
              : [d.colors[a].clone(), d.colors[b].clone(), d.colors[e].clone()],
          q =
            void 0 === f
              ? []
              : [
                  new p().from_0x3(f, a),
                  new p().from_0x3(f, b),
                  new p().from_0x3(f, e),
                ]
        h = new vc(a, b, e, q, l, h)
        d.faces.push(h)
        void 0 !== k &&
          d.faceVertexUvs[0].push([
            new B().from_0x3(k, a),
            new B().from_0x3(k, b),
            new B().from_0x3(k, e),
          ])
        void 0 !== m &&
          d.faceVertexUvs[1].push([
            new B().from_0x3(m, a),
            new B().from_0x3(m, b),
            new B().from_0x3(m, e),
          ])
      }
      var d = this,
        e = null !== a.index ? a.index : void 0,
        h = a.attributes
      if (void 0 === h.position)
        return (
          console.error(
            'THREE._0x6.from_0x2(): Position attribute required for conversion.'
          ),
          this
        )
      var l = h.position,
        f = h.normal,
        g = h.color,
        k = h.uv,
        m = h.uv2
      void 0 !== m && (this.faceVertexUvs[1] = [])
      for (h = 0; h < l.count; h++)
        d.vertices.push(new p().from_0x3(l, h)),
          void 0 !== g && d.colors.push(new H().from_0x3(g, h))
      h = a.groups
      if (0 < h.length)
        for (l = 0; l < h.length; l++)
          for (var n = h[l], r = n.start, u = r, r = r + n.count; u < r; u += 3)
            void 0 !== e
              ? b(e.getX(u), e.getX(u + 1), e.getX(u + 2), n.materialIndex)
              : b(u, u + 1, u + 2, n.materialIndex)
      else if (void 0 !== e)
        for (h = 0; h < e.count; h += 3)
          b(e.getX(h), e.getX(h + 1), e.getX(h + 2))
      else for (e = 0; e < l.count; e += 3) b(e, e + 1, e + 2)
      this.computeFaceNormals()
      null !== a.boundingBox && (this.boundingBox = a.boundingBox.clone())
      null !== a.boundingSphere &&
        (this.boundingSphere = a.boundingSphere.clone())
      return this
    },
    center: function () {
      this.computeBoundingBox()
      this.boundingBox.getCenter(Rf).negate()
      this.translate(Rf.x, Rf.y, Rf.z)
      return this
    },
    normalize: function () {
      this.computeBoundingSphere()
      var a = this.boundingSphere.center,
        b = this.boundingSphere.radius,
        b = 0 === b ? 1 : 1 / b,
        d = new O()
      d.set(b, 0, 0, -b * a.x, 0, b, 0, -b * a.y, 0, 0, b, -b * a.z, 0, 0, 0, 1)
      this.applyMatrix4(d)
      return this
    },
    computeFaceNormals: function () {
      for (
        var a = new p(), b = new p(), d = 0, e = this.faces.length;
        d < e;
        d++
      ) {
        var h = this.faces[d],
          l = this.vertices[h.a],
          f = this.vertices[h.b]
        a.subVectors(this.vertices[h.c], f)
        b.subVectors(l, f)
        a.cross(b)
        a.normalize()
        h.normal.copy(a)
      }
    },
    computeVertexNormals: function (a) {
      void 0 === a && (a = !0)
      for (
        var b = Array(this.vertices.length), d = 0, e = this.vertices.length;
        d < e;
        d++
      )
        b[d] = new p()
      if (a) {
        a = new p()
        for (var d = new p(), e = 0, h = this.faces.length; e < h; e++) {
          var l = this.faces[e],
            f = this.vertices[l.a],
            g = this.vertices[l.b]
          a.subVectors(this.vertices[l.c], g)
          d.subVectors(f, g)
          a.cross(d)
          b[l.a].add(a)
          b[l.b].add(a)
          b[l.c].add(a)
        }
      } else
        for (
          this.computeFaceNormals(), a = 0, d = this.faces.length;
          a < d;
          a++
        )
          (e = this.faces[a]),
            b[e.a].add(e.normal),
            b[e.b].add(e.normal),
            b[e.c].add(e.normal)
      a = 0
      for (d = this.vertices.length; a < d; a++) b[a].normalize()
      a = 0
      for (d = this.faces.length; a < d; a++)
        (e = this.faces[a]),
          (h = e.vertexNormals),
          3 === h.length
            ? (h[0].copy(b[e.a]), h[1].copy(b[e.b]), h[2].copy(b[e.c]))
            : ((h[0] = b[e.a].clone()),
              (h[1] = b[e.b].clone()),
              (h[2] = b[e.c].clone()))
      0 < this.faces.length && (this.normalsNeedUpdate = !0)
    },
    computeFlatVertexNormals: function () {
      this.computeFaceNormals()
      for (var a = 0, b = this.faces.length; a < b; a++) {
        var d = this.faces[a],
          e = d.vertexNormals
        3 === e.length
          ? (e[0].copy(d.normal), e[1].copy(d.normal), e[2].copy(d.normal))
          : ((e[0] = d.normal.clone()),
            (e[1] = d.normal.clone()),
            (e[2] = d.normal.clone()))
      }
      0 < this.faces.length && (this.normalsNeedUpdate = !0)
    },
    computeMorphNormals: function () {
      for (var a = 0, b = this.faces.length; a < b; a++) {
        var d = this.faces[a]
        d.__originalFaceNormal
          ? d.__originalFaceNormal.copy(d.normal)
          : (d.__originalFaceNormal = d.normal.clone())
        d.__originalVertexNormals || (d.__originalVertexNormals = [])
        for (var e = 0, h = d.vertexNormals.length; e < h; e++)
          d.__originalVertexNormals[e]
            ? d.__originalVertexNormals[e].copy(d.vertexNormals[e])
            : (d.__originalVertexNormals[e] = d.vertexNormals[e].clone())
      }
      a = new V()
      a.faces = this.faces
      b = 0
      for (d = this.morphTargets.length; b < d; b++) {
        if (!this.morphNormals[b]) {
          this.morphNormals[b] = {}
          this.morphNormals[b].faceNormals = []
          this.morphNormals[b].vertexNormals = []
          for (
            var e = this.morphNormals[b].faceNormals,
              h = this.morphNormals[b].vertexNormals,
              l = 0,
              f = this.faces.length;
            l < f;
            l++
          ) {
            var g = new p(),
              k = { a: new p(), b: new p(), c: new p() }
            e.push(g)
            h.push(k)
          }
        }
        e = this.morphNormals[b]
        a.vertices = this.morphTargets[b].vertices
        a.computeFaceNormals()
        a.computeVertexNormals()
        h = 0
        for (l = this.faces.length; h < l; h++)
          (f = this.faces[h]),
            (g = e.vertexNormals[h]),
            e.faceNormals[h].copy(f.normal),
            g.a.copy(f.vertexNormals[0]),
            g.b.copy(f.vertexNormals[1]),
            g.c.copy(f.vertexNormals[2])
      }
      a = 0
      for (b = this.faces.length; a < b; a++)
        (d = this.faces[a]),
          (d.normal = d.__originalFaceNormal),
          (d.vertexNormals = d.__originalVertexNormals)
    },
    computeBoundingBox: function () {
      null === this.boundingBox && (this.boundingBox = new ba())
      this.boundingBox.setFromPoints(this.vertices)
    },
    computeBoundingSphere: function () {
      null === this.boundingSphere && (this.boundingSphere = new ta())
      this.boundingSphere.setFromPoints(this.vertices)
    },
    merge: function (a, b, d) {
      if (a && a.is_0x6) {
        var e,
          h = this.vertices.length,
          l = this.vertices,
          f = a.vertices,
          g = this.faces,
          k = a.faces,
          m = this.colors,
          n = a.colors
        void 0 === d && (d = 0)
        void 0 !== b && (e = new ha().getNormalMatrix(b))
        for (var p = 0, r = f.length; p < r; p++) {
          var u = f[p].clone()
          void 0 !== b && u.applyMatrix4(b)
          l.push(u)
        }
        b = 0
        for (l = n.length; b < l; b++) m.push(n[b].clone())
        m = 0
        for (n = k.length; m < n; m++) {
          b = k[m]
          r = b.vertexNormals
          l = b.vertexColors
          f = new vc(b.a + h, b.b + h, b.c + h)
          f.normal.copy(b.normal)
          void 0 !== e && f.normal.applyMatrix3(e).normalize()
          for (var u = 0, w = r.length; u < w; u++)
            (p = r[u].clone()),
              void 0 !== e && p.applyMatrix3(e).normalize(),
              f.vertexNormals.push(p)
          f.color.copy(b.color)
          r = 0
          for (u = l.length; r < u; r++)
            (p = l[r]), f.vertexColors.push(p.clone())
          f.materialIndex = b.materialIndex + d
          g.push(f)
        }
        d = 0
        for (e = a.faceVertexUvs.length; d < e; d++)
          for (
            h = a.faceVertexUvs[d],
              void 0 === this.faceVertexUvs[d] && (this.faceVertexUvs[d] = []),
              g = 0,
              k = h.length;
            g < k;
            g++
          ) {
            m = h[g]
            n = []
            b = 0
            for (l = m.length; b < l; b++) n.push(m[b].clone())
            this.faceVertexUvs[d].push(n)
          }
      } else
        console.error(
          'THREE._0x6.merge(): geometry not an instance of THREE._0x6.',
          a
        )
    },
    mergena: function (a) {
      a && a.isna
        ? (a.matrixAutoUpdate && a.updateMatrix(),
          this.merge(a.geometry, a.matrix))
        : console.error(
            'THREE._0x6.mergena(): mesh not an instance of THREE.na.',
            a
          )
    },
    mergeVertices: function () {
      for (
        var a = {},
          b = [],
          d = [],
          e = Math.pow(10, 4),
          h = 0,
          l = this.vertices.length;
        h < l;
        h++
      ) {
        var f = this.vertices[h],
          f =
            Math.round(f.x * e) +
            '_' +
            Math.round(f.y * e) +
            '_' +
            Math.round(f.z * e)
        void 0 === a[f]
          ? ((a[f] = h), b.push(this.vertices[h]), (d[h] = b.length - 1))
          : (d[h] = d[a[f]])
      }
      a = []
      e = 0
      for (h = this.faces.length; e < h; e++)
        for (
          l = this.faces[e],
            l.a = d[l.a],
            l.b = d[l.b],
            l.c = d[l.c],
            l = [l.a, l.b, l.c],
            f = 0;
          3 > f;
          f++
        )
          if (l[f] === l[(f + 1) % 3]) {
            a.push(e)
            break
          }
      for (d = a.length - 1; 0 <= d; d--)
        for (
          e = a[d],
            this.faces.splice(e, 1),
            h = 0,
            l = this.faceVertexUvs.length;
          h < l;
          h++
        )
          this.faceVertexUvs[h].splice(e, 1)
      d = this.vertices.length - b.length
      this.vertices = b
      return d
    },
    setFromPoints: function (a) {
      this.vertices = []
      for (var b = 0, d = a.length; b < d; b++) {
        var e = a[b]
        this.vertices.push(new p(e.x, e.y, e.z || 0))
      }
      return this
    },
    sortFacesByMaterialIndex: function () {
      for (var a = this.faces, b = a.length, d = 0; d < b; d++) a[d]._id = d
      a.sort(function (a, b) {
        return a.materialIndex - b.materialIndex
      })
      var d = this.faceVertexUvs[0],
        e = this.faceVertexUvs[1],
        h,
        f
      d && d.length === b && (h = [])
      e && e.length === b && (f = [])
      for (var g = 0; g < b; g++) {
        var t = a[g]._id
        h && h.push(d[t])
        f && f.push(e[t])
      }
      h && (this.faceVertexUvs[0] = h)
      f && (this.faceVertexUvs[1] = f)
    },
    toJSON: function () {
      function a(a, b, d) {
        return d ? a | (1 << b) : a & ~(1 << b)
      }
      function b(a) {
        var b = a.x.toString() + a.y.toString() + a.z.toString()
        if (void 0 !== m[b]) return m[b]
        m[b] = k.length / 3
        k.push(a.x, a.y, a.z)
        return m[b]
      }
      function d(a) {
        var b = a.r.toString() + a.g.toString() + a.b.toString()
        if (void 0 !== p[b]) return p[b]
        p[b] = n.length
        n.push(a.getHex())
        return p[b]
      }
      function e(a) {
        var b = a.x.toString() + a.y.toString()
        if (void 0 !== u[b]) return u[b]
        u[b] = r.length / 2
        r.push(a.x, a.y)
        return u[b]
      }
      var h = {
        metadata: { version: 4.5, type: '_0x6', generator: '_0x6.toJSON' },
      }
      h.uuid = this.uuid
      h.type = this.type
      '' !== this.name && (h.name = this.name)
      if (void 0 !== this.parameters) {
        var f = this.parameters,
          g
        for (g in f) void 0 !== f[g] && (h[g] = f[g])
        return h
      }
      f = []
      for (g = 0; g < this.vertices.length; g++) {
        var t = this.vertices[g]
        f.push(t.x, t.y, t.z)
      }
      g = []
      for (
        var k = [], m = {}, n = [], p = {}, r = [], u = {}, t = 0;
        t < this.faces.length;
        t++
      ) {
        var w = this.faces[t],
          v = void 0 !== this.faceVertexUvs[0][t],
          z = 0 < w.normal.length(),
          y = 0 < w.vertexNormals.length,
          x = 1 !== w.color.r || 1 !== w.color.g || 1 !== w.color.b,
          C = 0 < w.vertexColors.length,
          B = 0,
          B = a(B, 0, 0),
          B = a(B, 1, !0),
          B = a(B, 2, !1),
          B = a(B, 3, v),
          B = a(B, 4, z),
          B = a(B, 5, y),
          B = a(B, 6, x),
          B = a(B, 7, C)
        g.push(B)
        g.push(w.a, w.b, w.c)
        g.push(w.materialIndex)
        v && ((v = this.faceVertexUvs[0][t]), g.push(e(v[0]), e(v[1]), e(v[2])))
        z && g.push(b(w.normal))
        y && ((z = w.vertexNormals), g.push(b(z[0]), b(z[1]), b(z[2])))
        x && g.push(d(w.color))
        C && ((w = w.vertexColors), g.push(d(w[0]), d(w[1]), d(w[2])))
      }
      h.data = {}
      h.data.vertices = f
      h.data.normals = k
      0 < n.length && (h.data.colors = n)
      0 < r.length && (h.data.uvs = [r])
      h.data.faces = g
      return h
    },
    clone: function () {
      return new V().copy(this)
    },
    copy: function (a) {
      this.vertices = []
      this.colors = []
      this.faces = []
      this.faceVertexUvs = [[]]
      this.morphTargets = []
      this.morphNormals = []
      this.skinWeights = []
      this.skinIndices = []
      this.lineDistances = []
      this.boundingSphere = this.boundingBox = null
      this.name = a.name
      for (var b = a.vertices, d = 0, e = b.length; d < e; d++)
        this.vertices.push(b[d].clone())
      b = a.colors
      d = 0
      for (e = b.length; d < e; d++) this.colors.push(b[d].clone())
      b = a.faces
      d = 0
      for (e = b.length; d < e; d++) this.faces.push(b[d].clone())
      b = 0
      for (d = a.faceVertexUvs.length; b < d; b++) {
        e = a.faceVertexUvs[b]
        void 0 === this.faceVertexUvs[b] && (this.faceVertexUvs[b] = [])
        for (var h = 0, f = e.length; h < f; h++) {
          for (var g = e[h], t = [], k = 0, m = g.length; k < m; k++)
            t.push(g[k].clone())
          this.faceVertexUvs[b].push(t)
        }
      }
      b = a.morphTargets
      d = 0
      for (e = b.length; d < e; d++) {
        h = {}
        h.name = b[d].name
        if (void 0 !== b[d].vertices)
          for (h.vertices = [], f = 0, g = b[d].vertices.length; f < g; f++)
            h.vertices.push(b[d].vertices[f].clone())
        if (void 0 !== b[d].normals)
          for (h.normals = [], f = 0, g = b[d].normals.length; f < g; f++)
            h.normals.push(b[d].normals[f].clone())
        this.morphTargets.push(h)
      }
      b = a.morphNormals
      d = 0
      for (e = b.length; d < e; d++) {
        h = {}
        if (void 0 !== b[d].vertexNormals)
          for (
            h.vertexNormals = [], f = 0, g = b[d].vertexNormals.length;
            f < g;
            f++
          )
            (t = b[d].vertexNormals[f]),
              (k = {}),
              (k.a = t.a.clone()),
              (k.b = t.b.clone()),
              (k.c = t.c.clone()),
              h.vertexNormals.push(k)
        if (void 0 !== b[d].faceNormals)
          for (
            h.faceNormals = [], f = 0, g = b[d].faceNormals.length;
            f < g;
            f++
          )
            h.faceNormals.push(b[d].faceNormals[f].clone())
        this.morphNormals.push(h)
      }
      b = a.skinWeights
      d = 0
      for (e = b.length; d < e; d++) this.skinWeights.push(b[d].clone())
      b = a.skinIndices
      d = 0
      for (e = b.length; d < e; d++) this.skinIndices.push(b[d].clone())
      b = a.lineDistances
      d = 0
      for (e = b.length; d < e; d++) this.lineDistances.push(b[d])
      b = a.boundingBox
      null !== b && (this.boundingBox = b.clone())
      b = a.boundingSphere
      null !== b && (this.boundingSphere = b.clone())
      this.elementsNeedUpdate = a.elementsNeedUpdate
      this.verticesNeedUpdate = a.verticesNeedUpdate
      this.uvsNeedUpdate = a.uvsNeedUpdate
      this.normalsNeedUpdate = a.normalsNeedUpdate
      this.colorsNeedUpdate = a.colorsNeedUpdate
      this.lineDistancesNeedUpdate = a.lineDistancesNeedUpdate
      this.groupsNeedUpdate = a.groupsNeedUpdate
      return this
    },
    dispose: function () {
      this.dispatchEvent({ type: 'dispose' })
    },
  })
  Ka.prototype = Object.create(V.prototype)
  Ka.prototype.constructor = Ka
  Ha.prototype = Object.create(I.prototype)
  Ha.prototype.constructor = Ha
  var Nh = { clone: Ja, merge: ga }
  wa.prototype = Object.create(y.prototype)
  wa.prototype.constructor = wa
  wa.prototype.isShaderMaterial = !0
  wa.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.fragmentShader = a.fragmentShader
    this.vertexShader = a.vertexShader
    this.uniforms = Ja(a.uniforms)
    this.defines = Object.assign({}, a.defines)
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.lights = a.lights
    this.clipping = a.clipping
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    this.extensions = Object.assign({}, a.extensions)
    this.glslVersion = a.glslVersion
    return this
  }
  wa.prototype.toJSON = function (a) {
    var b = y.prototype.toJSON.call(this, a)
    b.glslVersion = this.glslVersion
    b.uniforms = {}
    for (var d in this.uniforms) {
      var e = this.uniforms[d].value
      b.uniforms[d] =
        e && e.isTexture
          ? { type: 't', value: e.toJSON(a).uuid }
          : e && e.isColor
          ? { type: 'c', value: e.getHex() }
          : e && e.isvt2
          ? { type: 'v2', value: e.toArray() }
          : e && e.is_0x1
          ? { type: 'v3', value: e.toArray() }
          : e && e.isVector4
          ? { type: 'v4', value: e.toArray() }
          : e && e.isMatrix3
          ? { type: 'm3', value: e.toArray() }
          : e && e.isMatrix4
          ? { type: 'm4', value: e.toArray() }
          : { value: e }
    }
    0 < Object.keys(this.defines).length && (b.defines = this.defines)
    b.vertexShader = this.vertexShader
    b.fragmentShader = this.fragmentShader
    a = {}
    for (var h in this.extensions) !0 === this.extensions[h] && (a[h] = !0)
    0 < Object.keys(a).length && (b.extensions = a)
    return b
  }
  ua.prototype = Object.assign(Object.create(n.prototype), {
    constructor: ua,
    isCamera: !0,
    copy: function (a, b) {
      n.prototype.copy.call(this, a, b)
      this.matrixWorldInverse.copy(a.matrixWorldInverse)
      this.projectionMatrix.copy(a.projectionMatrix)
      this.projectionMatrixInverse.copy(a.projectionMatrixInverse)
      return this
    },
    getWorldDirection: function (a) {
      void 0 === a &&
        (console.warn(
          'THREE.Camera: .getWorldDirection() target is now required'
        ),
        (a = new p()))
      this.updateMatrixWorld(!0)
      var b = this.matrixWorld.elements
      return a.set(-b[8], -b[9], -b[10]).normalize()
    },
    updateMatrixWorld: function (a) {
      n.prototype.updateMatrixWorld.call(this, a)
      this.matrixWorldInverse.getInverse(this.matrixWorld)
    },
    updateWorldMatrix: function (a, b) {
      n.prototype.updateWorldMatrix.call(this, a, b)
      this.matrixWorldInverse.getInverse(this.matrixWorld)
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
  })
  la.prototype = Object.assign(Object.create(ua.prototype), {
    constructor: la,
    isq4: !0,
    copy: function (a, b) {
      ua.prototype.copy.call(this, a, b)
      this.fov = a.fov
      this.zoom = a.zoom
      this.near = a.near
      this.far = a.far
      this.focus = a.focus
      this.aspect = a.aspect
      this.view = null === a.view ? null : Object.assign({}, a.view)
      this.filmGauge = a.filmGauge
      this.filmOffset = a.filmOffset
      return this
    },
    setFocalLength: function (a) {
      a = (0.5 * this.getFilmHeight()) / a
      this.fov = 2 * ea.RAD2DEG * Math.atan(a)
      this.updateProjectionMatrix()
    },
    getFocalLength: function () {
      var a = Math.tan(0.5 * ea.DEG2RAD * this.fov)
      return (0.5 * this.getFilmHeight()) / a
    },
    getEffectiveFOV: function () {
      return (
        2 *
        ea.RAD2DEG *
        Math.atan(Math.tan(0.5 * ea.DEG2RAD * this.fov) / this.zoom)
      )
    },
    getFilmWidth: function () {
      return this.filmGauge * Math.min(this.aspect, 1)
    },
    getFilmHeight: function () {
      return this.filmGauge / Math.max(this.aspect, 1)
    },
    setViewOffset: function (a, b, d, e, h, f) {
      this.aspect = a / b
      null === this.view &&
        (this.view = {
          enabled: !0,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1,
        })
      this.view.enabled = !0
      this.view.fullWidth = a
      this.view.fullHeight = b
      this.view.offsetX = d
      this.view.offsetY = e
      this.view.width = h
      this.view.height = f
      this.updateProjectionMatrix()
    },
    clearViewOffset: function () {
      null !== this.view && (this.view.enabled = !1)
      this.updateProjectionMatrix()
    },
    updateProjectionMatrix: function () {
      var a = this.near,
        b = (a * Math.tan(0.5 * ea.DEG2RAD * this.fov)) / this.zoom,
        d = 2 * b,
        e = this.aspect * d,
        h = -0.5 * e,
        f = this.view
      if (null !== this.view && this.view.enabled)
        var g = f.fullWidth,
          t = f.fullHeight,
          h = h + (f.offsetX * e) / g,
          b = b - (f.offsetY * d) / t,
          e = (f.width / g) * e,
          d = (f.height / t) * d
      f = this.filmOffset
      0 !== f && (h += (a * f) / this.getFilmWidth())
      this.projectionMatrix.makePerspective(h, h + e, b, b - d, a, this.far)
      this.projectionMatrixInverse.getInverse(this.projectionMatrix)
    },
    toJSON: function (a) {
      a = n.prototype.toJSON.call(this, a)
      a.object.fov = this.fov
      a.object.zoom = this.zoom
      a.object.near = this.near
      a.object.far = this.far
      a.object.focus = this.focus
      a.object.aspect = this.aspect
      null !== this.view && (a.object.view = Object.assign({}, this.view))
      a.object.filmGauge = this.filmGauge
      a.object.filmOffset = this.filmOffset
      return a
    },
  })
  Kb.prototype = Object.create(n.prototype)
  Kb.prototype.constructor = Kb
  pb.prototype = Object.create(k.prototype)
  pb.prototype.constructor = pb
  pb.prototype.isWebGLCubeRenderTarget = !0
  pb.prototype.fromEquirectangularTexture = function (a, b) {
    this.texture.type = b.type
    this.texture.format = 1023
    this.texture.encoding = b.encoding
    this.texture.generateMipmaps = b.generateMipmaps
    this.texture.minFilter = b.minFilter
    this.texture.magFilter = b.magFilter
    var d = new Ha(5, 5, 5),
      e = new wa({
        name: 'CubemapFromEquirect',
        uniforms: Ja({ tEquirect: { value: null } }),
        vertexShader:
          '\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\tvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\n\t\t\t\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvWorldDirection \x3d transformDirection( position, modelMatrix );\n\n\t\t\t\t#include \x3cbegin_vertex\x3e\n\t\t\t\t#include \x3cproject_vertex\x3e\n\n\t\t\t}\n\t\t',
        fragmentShader:
          '\n\n\t\t\tuniform sampler2D tEquirect;\n\n\t\t\tvarying vec3 vWorldDirection;\n\n\t\t\t#include \x3ccommon\x3e\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 direction \x3d normalize( vWorldDirection );\n\n\t\t\t\tvec2 sampleUV \x3d equirectUv( direction );\n\n\t\t\t\tgl_FragColor \x3d texture2D( tEquirect, sampleUV );\n\n\t\t\t}\n\t\t',
        side: 1,
        blending: 0,
      })
    e.uniforms.tEquirect.value = b
    d = new ca(d, e)
    e = b.minFilter
    1008 === b.minFilter && (b.minFilter = 1006)
    new Kb(1, 10, this).update(a, d)
    b.minFilter = e
    d.geometry.dispose()
    d.material.dispose()
    return this
  }
  Za.prototype = Object.create(g.prototype)
  Za.prototype.constructor = Za
  Za.prototype.isDataTexture = !0
  var Md = new ta(),
    Sf = new p(),
    $a = function (a, b, d, e, h, f) {
      this.planes = [
        void 0 !== a ? a : new da(),
        void 0 !== b ? b : new da(),
        void 0 !== d ? d : new da(),
        void 0 !== e ? e : new da(),
        void 0 !== h ? h : new da(),
        void 0 !== f ? f : new da(),
      ]
    }
  $a.prototype.set = function (a, b, d, e, h, f) {
    var l = this.planes
    l[0].copy(a)
    l[1].copy(b)
    l[2].copy(d)
    l[3].copy(e)
    l[4].copy(h)
    l[5].copy(f)
    return this
  }
  $a.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  $a.prototype.copy = function (a) {
    for (var b = this.planes, d = 0; 6 > d; d++) b[d].copy(a.planes[d])
    return this
  }
  $a.prototype.setFromProjectionMatrix = function (a) {
    var b = this.planes,
      d = a.elements
    a = d[0]
    var e = d[1],
      h = d[2],
      f = d[3],
      g = d[4],
      t = d[5],
      k = d[6],
      m = d[7],
      n = d[8],
      p = d[9],
      r = d[10],
      u = d[11],
      w = d[12],
      v = d[13],
      z = d[14],
      d = d[15]
    b[0].setComponents(f - a, m - g, u - n, d - w).normalize()
    b[1].setComponents(f + a, m + g, u + n, d + w).normalize()
    b[2].setComponents(f + e, m + t, u + p, d + v).normalize()
    b[3].setComponents(f - e, m - t, u - p, d - v).normalize()
    b[4].setComponents(f - h, m - k, u - r, d - z).normalize()
    b[5].setComponents(f + h, m + k, u + r, d + z).normalize()
    return this
  }
  $a.prototype.intersectsObject = function (a) {
    var b = a.geometry
    null === b.boundingSphere && b.computeBoundingSphere()
    Md.copy(b.boundingSphere).applyMatrix4(a.matrixWorld)
    return this.intersectsSphere(Md)
  }
  $a.prototype.intersectsSprite = function (a) {
    Md.center.set(0, 0, 0)
    Md.radius = 0.7071067811865476
    Md.applyMatrix4(a.matrixWorld)
    return this.intersectsSphere(Md)
  }
  $a.prototype.intersectsSphere = function (a) {
    var b = this.planes,
      d = a.center
    a = -a.radius
    for (var e = 0; 6 > e; e++) if (b[e].distanceToPoint(d) < a) return !1
    return !0
  }
  $a.prototype.intersectsBox = function (a) {
    for (var b = this.planes, d = 0; 6 > d; d++) {
      var e = b[d]
      Sf.x = 0 < e.normal.x ? a.max.x : a.min.x
      Sf.y = 0 < e.normal.y ? a.max.y : a.min.y
      Sf.z = 0 < e.normal.z ? a.max.z : a.min.z
      if (0 > e.distanceToPoint(Sf)) return !1
    }
    return !0
  }
  $a.prototype.containsPoint = function (a) {
    for (var b = this.planes, d = 0; 6 > d; d++)
      if (0 > b[d].distanceToPoint(a)) return !1
    return !0
  }
  Lb.prototype = Object.create(V.prototype)
  Lb.prototype.constructor = Lb
  Qa.prototype = Object.create(I.prototype)
  Qa.prototype.constructor = Qa
  var ia = {
      alphamap_fragment:
        '#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *\x3d texture2D( alphaMap, vUv ).g;\n#endif',
      alphamap_pars_fragment:
        '#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif',
      alphatest_fragment:
        '#ifdef ALPHATEST\n\tif ( diffuseColor.a \x3c ALPHATEST ) discard;\n#endif',
      aomap_fragment:
        '#ifdef USE_AOMAP\n\tfloat ambientOcclusion \x3d ( texture2D( aoMap, vUv2 ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *\x3d ambientOcclusion;\n\t#if defined( USE_ENVMAP ) \x26\x26 defined( STANDARD )\n\t\tfloat dotNV \x3d saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *\x3d computeSpecularOcclusion( dotNV, ambientOcclusion, material.specularRoughness );\n\t#endif\n#endif',
      aomap_pars_fragment:
        '#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif',
      begin_vertex: 'vec3 transformed \x3d vec3( position );',
      beginnormal_vertex:
        'vec3 objectNormal \x3d vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent \x3d vec3( tangent.xyz );\n#endif',
      bsdfs:
        'vec2 integrateSpecularBRDF( const in float dotNV, const in float roughness ) {\n\tconst vec4 c0 \x3d vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 \x3d vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r \x3d roughness * c0 + c1;\n\tfloat a004 \x3d min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\treturn vec2( -1.04, 1.04 ) * a004 + r.zw;\n}\nfloat punctualLightIntensityToIrradianceFactor( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n#if defined ( PHYSICALLY_CORRECT_LIGHTS )\n\tfloat distanceFalloff \x3d 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\tif( cutoffDistance \x3e 0.0 ) {\n\t\tdistanceFalloff *\x3d pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t}\n\treturn distanceFalloff;\n#else\n\tif( cutoffDistance \x3e 0.0 \x26\x26 decayExponent \x3e 0.0 ) {\n\t\treturn pow( saturate( -lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t}\n\treturn 1.0;\n#endif\n}\nvec3 BRDF_Diffuse_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 specularColor, const in float dotLH ) {\n\tfloat fresnel \x3d exp2( ( -5.55473 * dotLH - 6.98316 ) * dotLH );\n\treturn ( 1.0 - specularColor ) * fresnel + specularColor;\n}\nvec3 F_Schlick_RoughnessDependent( const in vec3 F0, const in float dotNV, const in float roughness ) {\n\tfloat fresnel \x3d exp2( ( -5.55473 * dotNV - 6.98316 ) * dotNV );\n\tvec3 Fr \x3d max( vec3( 1.0 - roughness ), F0 ) - F0;\n\treturn Fr * fresnel + F0;\n}\nfloat G_GGX_Smith( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat gl \x3d dotNL + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\tfloat gv \x3d dotNV + sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\treturn 1.0 / ( gl * gv );\n}\nfloat G_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat gv \x3d dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl \x3d dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 \x3d pow2( alpha );\n\tfloat denom \x3d pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\nvec3 BRDF_Specular_GGX( const in IncidentLight incidentLight, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat alpha \x3d pow2( roughness );\n\tvec3 halfDir \x3d normalize( incidentLight.direction + viewDir );\n\tfloat dotNL \x3d saturate( dot( normal, incidentLight.direction ) );\n\tfloat dotNV \x3d saturate( dot( normal, viewDir ) );\n\tfloat dotNH \x3d saturate( dot( normal, halfDir ) );\n\tfloat dotLH \x3d saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F \x3d F_Schlick( specularColor, dotLH );\n\tfloat G \x3d G_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\tfloat D \x3d D_GGX( alpha, dotNH );\n\treturn F * ( G * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE \x3d 64.0;\n\tconst float LUT_SCALE \x3d ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS \x3d 0.5 / LUT_SIZE;\n\tfloat dotNV \x3d saturate( dot( N, V ) );\n\tvec2 uv \x3d vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv \x3d uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l \x3d length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x \x3d dot( v1, v2 );\n\tfloat y \x3d abs( x );\n\tfloat a \x3d 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b \x3d 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v \x3d a / b;\n\tfloat theta_sintheta \x3d ( x \x3e 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 \x3d rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 \x3d rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal \x3d cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) \x3c 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 \x3d normalize( V - N * dot( V, N ) );\n\tT2 \x3d - cross( N, T1 );\n\tmat3 mat \x3d mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] \x3d mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] \x3d mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] \x3d mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] \x3d mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] \x3d normalize( coords[ 0 ] );\n\tcoords[ 1 ] \x3d normalize( coords[ 1 ] );\n\tcoords[ 2 ] \x3d normalize( coords[ 2 ] );\n\tcoords[ 3 ] \x3d normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor \x3d vec3( 0.0 );\n\tvectorFormFactor +\x3d LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor +\x3d LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor +\x3d LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor +\x3d LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result \x3d LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\nvec3 BRDF_Specular_GGX_Environment( const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float roughness ) {\n\tfloat dotNV \x3d saturate( dot( normal, viewDir ) );\n\tvec2 brdf \x3d integrateSpecularBRDF( dotNV, roughness );\n\treturn specularColor * brdf.x + brdf.y;\n}\nvoid BRDF_Specular_Multiscattering_Environment( const in GeometricContext geometry, const in vec3 specularColor, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n\tfloat dotNV \x3d saturate( dot( geometry.normal, geometry.viewDir ) );\n\tvec3 F \x3d F_Schlick_RoughnessDependent( specularColor, dotNV, roughness );\n\tvec2 brdf \x3d integrateSpecularBRDF( dotNV, roughness );\n\tvec3 FssEss \x3d F * brdf.x + brdf.y;\n\tfloat Ess \x3d brdf.x + brdf.y;\n\tfloat Ems \x3d 1.0 - Ess;\n\tvec3 Favg \x3d specularColor + ( 1.0 - specularColor ) * 0.047619;\tvec3 Fms \x3d FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter +\x3d FssEss;\n\tmultiScatter +\x3d Fms * Ems;\n}\nfloat G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_Specular_BlinnPhong( const in IncidentLight incidentLight, const in GeometricContext geometry, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir \x3d normalize( incidentLight.direction + geometry.viewDir );\n\tfloat dotNH \x3d saturate( dot( geometry.normal, halfDir ) );\n\tfloat dotLH \x3d saturate( dot( incidentLight.direction, halfDir ) );\n\tvec3 F \x3d F_Schlick( specularColor, dotLH );\n\tfloat G \x3d G_BlinnPhong_Implicit( );\n\tfloat D \x3d D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n}\nfloat GGXRoughnessToBlinnExponent( const in float ggxRoughness ) {\n\treturn ( 2.0 / pow2( ggxRoughness + 0.0001 ) - 2.0 );\n}\nfloat BlinnExponentToGGXRoughness( const in float blinnExponent ) {\n\treturn sqrt( 2.0 / ( blinnExponent + 2.0 ) );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie(float roughness, float NoH) {\n\tfloat invAlpha \x3d 1.0 / roughness;\n\tfloat cos2h \x3d NoH * NoH;\n\tfloat sin2h \x3d max(1.0 - cos2h, 0.0078125);\treturn (2.0 + invAlpha) * pow(sin2h, invAlpha * 0.5) / (2.0 * PI);\n}\nfloat V_Neubelt(float NoV, float NoL) {\n\treturn saturate(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\nvec3 BRDF_Specular_Sheen( const in float roughness, const in vec3 L, const in GeometricContext geometry, vec3 specularColor ) {\n\tvec3 N \x3d geometry.normal;\n\tvec3 V \x3d geometry.viewDir;\n\tvec3 H \x3d normalize( V + L );\n\tfloat dotNH \x3d saturate( dot( N, H ) );\n\treturn specularColor * D_Charlie( roughness, dotNH ) * V_Neubelt( dot(N, V), dot(N, L) );\n}\n#endif',
      bumpmap_pars_fragment:
        '#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx \x3d dFdx( vUv );\n\t\tvec2 dSTdy \x3d dFdy( vUv );\n\t\tfloat Hll \x3d bumpScale * texture2D( bumpMap, vUv ).x;\n\t\tfloat dBx \x3d bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\n\t\tfloat dBy \x3d bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\n\t\tvec3 vSigmaX \x3d vec3( dFdx( surf_pos.x ), dFdx( surf_pos.y ), dFdx( surf_pos.z ) );\n\t\tvec3 vSigmaY \x3d vec3( dFdy( surf_pos.x ), dFdy( surf_pos.y ), dFdy( surf_pos.z ) );\n\t\tvec3 vN \x3d surf_norm;\n\t\tvec3 R1 \x3d cross( vSigmaY, vN );\n\t\tvec3 R2 \x3d cross( vN, vSigmaX );\n\t\tfloat fDet \x3d dot( vSigmaX, R1 );\n\t\tfDet *\x3d ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\tvec3 vGrad \x3d sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif',
      clipping_planes_fragment:
        '#if NUM_CLIPPING_PLANES \x3e 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane \x3d clippingpls[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) \x3e plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES \x3c NUM_CLIPPING_PLANES\n\t\tbool clipped \x3d true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i \x3d UNION_CLIPPING_PLANES; i \x3c NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane \x3d clippingpls[ i ];\n\t\t\tclipped \x3d ( dot( vClipPosition, plane.xyz ) \x3e plane.w ) \x26\x26 clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif',
      clipping_planes_pars_fragment:
        '#if NUM_CLIPPING_PLANES \x3e 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingpls[ NUM_CLIPPING_PLANES ];\n#endif',
      clipping_planes_pars_vertex:
        '#if NUM_CLIPPING_PLANES \x3e 0\n\tvarying vec3 vClipPosition;\n#endif',
      clipping_planes_vertex:
        '#if NUM_CLIPPING_PLANES \x3e 0\n\tvClipPosition \x3d - mvPosition.xyz;\n#endif',
      color_fragment:
        '#ifdef USE_COLOR\n\tdiffuseColor.rgb *\x3d vColor;\n#endif',
      color_pars_fragment: '#ifdef USE_COLOR\n\tvarying vec3 vColor;\n#endif',
      color_pars_vertex:
        '#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif',
      color_vertex:
        '#if defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor \x3d vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor.xyz *\x3d color.xyz;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *\x3d instanceColor.xyz;\n#endif',
      common:
        '#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement(a) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 \x3d x*x; return x2*x2; }\nfloat average( const in vec3 color ) { return dot( color, vec3( 0.3333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a \x3d 12.9898, b \x3d 78.233, c \x3d 43758.5453;\n\thighp float dt \x3d dot( uv.xy, vec2( a,b ) ), sn \x3d mod( dt, PI );\n\treturn fract(sin(sn) * c);\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat max3( vec3 v ) { return max( max( v.x, v.y ), v.z ); }\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent \x3d max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nvec3 projectOnpl(in vec3 point, in vec3 pointOnpl, in vec3 planeNormal ) {\n\tfloat distance \x3d dot( planeNormal, point - pointOnpl );\n\treturn - distance * planeNormal + point;\n}\nfloat sideOfpl( in vec3 point, in vec3 pointOnpl, in vec3 planeNormal ) {\n\treturn sign( dot( point - pointOnpl, planeNormal ) );\n}\nvec3 lineplIntersect( in vec3 pointOnLine, in vec3 lineDirection, in vec3 pointOnpl, in vec3 planeNormal ) {\n\treturn lineDirection * ( dot( planeNormal, pointOnpl - pointOnLine ) / dot( planeNormal, lineDirection ) ) + pointOnLine;\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] \x3d vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] \x3d vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] \x3d vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat linearToRelativeLuminance( const in vec3 color ) {\n\tvec3 weights \x3d vec3( 0.2126, 0.7152, 0.0722 );\n\treturn dot( weights, color.rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] \x3d\x3d - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u \x3d atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v \x3d asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}',
      cube_uv_reflection_fragment:
        '#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_maxMipLevel 8.0\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_maxTileSize 256.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection \x3d abs( direction );\n\t\tfloat face \x3d - 1.0;\n\t\tif ( absDirection.x \x3e absDirection.z ) {\n\t\t\tif ( absDirection.x \x3e absDirection.y )\n\t\t\t\tface \x3d direction.x \x3e 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface \x3d direction.y \x3e 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z \x3e absDirection.y )\n\t\t\t\tface \x3d direction.z \x3e 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface \x3d direction.y \x3e 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face \x3d\x3d 0.0 ) {\n\t\t\tuv \x3d vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face \x3d\x3d 1.0 ) {\n\t\t\tuv \x3d vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face \x3d\x3d 2.0 ) {\n\t\t\tuv \x3d vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face \x3d\x3d 3.0 ) {\n\t\t\tuv \x3d vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face \x3d\x3d 4.0 ) {\n\t\t\tuv \x3d vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv \x3d vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face \x3d getFace( direction );\n\t\tfloat filterInt \x3d max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt \x3d max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize \x3d exp2( mipInt );\n\t\tfloat texelSize \x3d 1.0 / ( 3.0 * cubeUV_maxTileSize );\n\t\tvec2 uv \x3d getUV( direction, face ) * ( faceSize - 1.0 );\n\t\tvec2 f \x3d fract( uv );\n\t\tuv +\x3d 0.5 - f;\n\t\tif ( face \x3e 2.0 ) {\n\t\t\tuv.y +\x3d faceSize;\n\t\t\tface -\x3d 3.0;\n\t\t}\n\t\tuv.x +\x3d face * faceSize;\n\t\tif ( mipInt \x3c cubeUV_maxMipLevel ) {\n\t\t\tuv.y +\x3d 2.0 * cubeUV_maxTileSize;\n\t\t}\n\t\tuv.y +\x3d filterInt * 2.0 * cubeUV_minTileSize;\n\t\tuv.x +\x3d 3.0 * max( 0.0, cubeUV_maxTileSize - 2.0 * faceSize );\n\t\tuv *\x3d texelSize;\n\t\tvec3 tl \x3d envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x +\x3d texelSize;\n\t\tvec3 tr \x3d envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.y +\x3d texelSize;\n\t\tvec3 br \x3d envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tuv.x -\x3d texelSize;\n\t\tvec3 bl \x3d envMapTexelToLinear( texture2D( envMap, uv ) ).rgb;\n\t\tvec3 tm \x3d mix( tl, tr, f.x );\n\t\tvec3 bm \x3d mix( bl, br, f.x );\n\t\treturn mix( tm, bm, f.y );\n\t}\n\t#define r0 1.0\n\t#define v0 0.339\n\t#define m0 - 2.0\n\t#define r1 0.8\n\t#define v1 0.276\n\t#define m1 - 1.0\n\t#define r4 0.4\n\t#define v4 0.046\n\t#define m4 2.0\n\t#define r5 0.305\n\t#define v5 0.016\n\t#define m5 3.0\n\t#define r6 0.21\n\t#define v6 0.0038\n\t#define m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip \x3d 0.0;\n\t\tif ( roughness \x3e\x3d r1 ) {\n\t\t\tmip \x3d ( r0 - roughness ) * ( m1 - m0 ) / ( r0 - r1 ) + m0;\n\t\t} else if ( roughness \x3e\x3d r4 ) {\n\t\t\tmip \x3d ( r1 - roughness ) * ( m4 - m1 ) / ( r1 - r4 ) + m1;\n\t\t} else if ( roughness \x3e\x3d r5 ) {\n\t\t\tmip \x3d ( r4 - roughness ) * ( m5 - m4 ) / ( r4 - r5 ) + m4;\n\t\t} else if ( roughness \x3e\x3d r6 ) {\n\t\t\tmip \x3d ( r5 - roughness ) * ( m6 - m5 ) / ( r5 - r6 ) + m5;\n\t\t} else {\n\t\t\tmip \x3d - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip \x3d clamp( roughnessToMip( roughness ), m0, cubeUV_maxMipLevel );\n\t\tfloat mipF \x3d fract( mip );\n\t\tfloat mipInt \x3d floor( mip );\n\t\tvec3 color0 \x3d bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF \x3d\x3d 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 \x3d bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif',
      defaultnormal_vertex:
        'vec3 transformedNormal \x3d objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m \x3d mat3( instanceMatrix );\n\ttransformedNormal /\x3d vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal \x3d m * transformedNormal;\n#endif\ntransformedNormal \x3d normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal \x3d - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent \x3d ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent \x3d - transformedTangent;\n\t#endif\n#endif',
      displacementmap_pars_vertex:
        '#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif',
      displacementmap_vertex:
        '#ifdef USE_DISPLACEMENTMAP\n\ttransformed +\x3d normalize( objectNormal ) * ( texture2D( displacementMap, vUv ).x * displacementScale + displacementBias );\n#endif',
      emissivemap_fragment:
        '#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor \x3d texture2D( emissiveMap, vUv );\n\temissiveColor.rgb \x3d emissiveMapTexelToLinear( emissiveColor ).rgb;\n\ttotalEmissiveRadiance *\x3d emissiveColor.rgb;\n#endif',
      emissivemap_pars_fragment:
        '#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif',
      encodings_fragment:
        'gl_FragColor \x3d linearToOutputTexel( gl_FragColor );',
      encodings_pars_fragment:
        '\nvec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 GammaToLinear( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( gammaFactor ) ), value.a );\n}\nvec4 LinearToGamma( in vec4 value, in float gammaFactor ) {\n\treturn vec4( pow( value.rgb, vec3( 1.0 / gammaFactor ) ), value.a );\n}\nvec4 sRGBToLinear( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), value.rgb * 0.0773993808, vec3( lessThanEqual( value.rgb, vec3( 0.04045 ) ) ) ), value.a );\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}\nvec4 RGBEToLinear( in vec4 value ) {\n\treturn vec4( value.rgb * exp2( value.a * 255.0 - 128.0 ), 1.0 );\n}\nvec4 LinearToRGBE( in vec4 value ) {\n\tfloat maxComponent \x3d max( max( value.r, value.g ), value.b );\n\tfloat fExp \x3d clamp( ceil( log2( maxComponent ) ), -128.0, 127.0 );\n\treturn vec4( value.rgb / exp2( fExp ), ( fExp + 128.0 ) / 255.0 );\n}\nvec4 RGBMToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * value.a * maxRange, 1.0 );\n}\nvec4 LinearToRGBM( in vec4 value, in float maxRange ) {\n\tfloat maxRGB \x3d max( value.r, max( value.g, value.b ) );\n\tfloat M \x3d clamp( maxRGB / maxRange, 0.0, 1.0 );\n\tM \x3d ceil( M * 255.0 ) / 255.0;\n\treturn vec4( value.rgb / ( M * maxRange ), M );\n}\nvec4 RGBDToLinear( in vec4 value, in float maxRange ) {\n\treturn vec4( value.rgb * ( ( maxRange / 255.0 ) / value.a ), 1.0 );\n}\nvec4 LinearToRGBD( in vec4 value, in float maxRange ) {\n\tfloat maxRGB \x3d max( value.r, max( value.g, value.b ) );\n\tfloat D \x3d max( maxRange / maxRGB, 1.0 );\n\tD \x3d clamp( floor( D ) / 255.0, 0.0, 1.0 );\n\treturn vec4( value.rgb * ( D * ( 255.0 / maxRange ) ), D );\n}\nconst mat3 cLogLuvM \x3d mat3( 0.2209, 0.3390, 0.4184, 0.1138, 0.6780, 0.7319, 0.0102, 0.1130, 0.2969 );\nvec4 LinearToLogLuv( in vec4 value ) {\n\tvec3 Xp_Y_XYZp \x3d cLogLuvM * value.rgb;\n\tXp_Y_XYZp \x3d max( Xp_Y_XYZp, vec3( 1e-6, 1e-6, 1e-6 ) );\n\tvec4 vResult;\n\tvResult.xy \x3d Xp_Y_XYZp.xy / Xp_Y_XYZp.z;\n\tfloat Le \x3d 2.0 * log2(Xp_Y_XYZp.y) + 127.0;\n\tvResult.w \x3d fract( Le );\n\tvResult.z \x3d ( Le - ( floor( vResult.w * 255.0 ) ) / 255.0 ) / 255.0;\n\treturn vResult;\n}\nconst mat3 cLogLuvInverseM \x3d mat3( 6.0014, -2.7008, -1.7996, -1.3320, 3.1029, -5.7721, 0.3008, -1.0882, 5.6268 );\nvec4 LogLuvToLinear( in vec4 value ) {\n\tfloat Le \x3d value.z * 255.0 + value.w;\n\tvec3 Xp_Y_XYZp;\n\tXp_Y_XYZp.y \x3d exp2( ( Le - 127.0 ) / 2.0 );\n\tXp_Y_XYZp.z \x3d Xp_Y_XYZp.y / value.y;\n\tXp_Y_XYZp.x \x3d value.x * Xp_Y_XYZp.z;\n\tvec3 vRGB \x3d cLogLuvInverseM * Xp_Y_XYZp.rgb;\n\treturn vec4( max( vRGB, 0.0 ), 1.0 );\n}',
      envmap_fragment:
        '#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag \x3d normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag \x3d normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal \x3d inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec \x3d reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec \x3d refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec \x3d vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor \x3d textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 envColor \x3d textureCubeUV( envMap, reflectVec, 0.0 );\n\t#else\n\t\tvec4 envColor \x3d vec4( 0.0 );\n\t#endif\n\t#ifndef ENVMAP_TYPE_CUBE_UV\n\t\tenvColor \x3d envMapTexelToLinear( envColor );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight \x3d mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight \x3d mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight +\x3d envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif',
      envmap_common_pars_fragment:
        '#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\tuniform int maxMipLevel;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif',
      envmap_pars_fragment:
        '#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif',
      envmap_pars_vertex:
        '#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) ||defined( PHONG )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif',
      envmap_physical_pars_fragment:
        '#if defined( USE_ENVMAP )\n\t#ifdef ENVMAP_MODE_REFRACTION\n\t\tuniform float refractionRatio;\n\t#endif\n\tvec3 getLightProbeIndirectIrradiance( const in GeometricContext geometry, const in int maxMIPLevel ) {\n\t\tvec3 worldNormal \x3d inverseTransformDirection( geometry.normal, viewMatrix );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryVec \x3d vec3( flipEnvMap * worldNormal.x, worldNormal.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d textureCubeLodEXT( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d textureCube( envMap, queryVec, float( maxMIPLevel ) );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor \x3d textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t#else\n\t\t\tvec4 envMapColor \x3d vec4( 0.0 );\n\t\t#endif\n\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t}\n\tfloat getSpecularMIPLevel( const in float roughness, const in int maxMIPLevel ) {\n\t\tfloat maxMIPLevelScalar \x3d float( maxMIPLevel );\n\t\tfloat sigma \x3d PI * roughness * roughness / ( 1.0 + roughness );\n\t\tfloat desiredMIPLevel \x3d maxMIPLevelScalar + log2( sigma );\n\t\treturn clamp( desiredMIPLevel, 0.0, maxMIPLevelScalar );\n\t}\n\tvec3 getLightProbeIndirectRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in int maxMIPLevel ) {\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec \x3d reflect( -viewDir, normal );\n\t\t\treflectVec \x3d normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t#else\n\t\t\tvec3 reflectVec \x3d refract( -viewDir, normal, refractionRatio );\n\t\t#endif\n\t\treflectVec \x3d inverseTransformDirection( reflectVec, viewMatrix );\n\t\tfloat specularMIPLevel \x3d getSpecularMIPLevel( roughness, maxMIPLevel );\n\t\t#ifdef ENVMAP_TYPE_CUBE\n\t\t\tvec3 queryReflectVec \x3d vec3( flipEnvMap * reflectVec.x, reflectVec.yz );\n\t\t\t#ifdef TEXTURE_LOD_EXT\n\t\t\t\tvec4 envMapColor \x3d textureCubeLodEXT( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#else\n\t\t\t\tvec4 envMapColor \x3d textureCube( envMap, queryReflectVec, specularMIPLevel );\n\t\t\t#endif\n\t\t\tenvMapColor.rgb \x3d envMapTexelToLinear( envMapColor ).rgb;\n\t\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\t\tvec4 envMapColor \x3d textureCubeUV( envMap, reflectVec, roughness );\n\t\t#endif\n\t\treturn envMapColor.rgb * envMapIntensity;\n\t}\n#endif',
      envmap_vertex:
        '#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition \x3d worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex \x3d normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex \x3d normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal \x3d inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect \x3d reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect \x3d refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif',
      fog_vertex: '#ifdef USE_FOG\n\tfogDepth \x3d - mvPosition.z;\n#endif',
      fog_pars_vertex: '#ifdef USE_FOG\n\tvarying float fogDepth;\n#endif',
      fog_fragment:
        '#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor \x3d 1.0 - exp( - fogDensity * fogDensity * fogDepth * fogDepth );\n\t#else\n\t\tfloat fogFactor \x3d smoothstep( fogNear, fogFar, fogDepth );\n\t#endif\n\tgl_FragColor.rgb \x3d mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif',
      fog_pars_fragment:
        '#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float fogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif',
      gradientmap_pars_fragment:
        '#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL \x3d dot( normal, lightDirection );\n\tvec2 coord \x3d vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn texture2D( gradientMap, coord ).rgb;\n\t#else\n\t\treturn ( coord.x \x3c 0.7 ) ? vec3( 0.7 ) : vec3( 1.0 );\n\t#endif\n}',
      lightmap_fragment:
        '#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel\x3d texture2D( lightMap, vUv2 );\n\treflectedLight.indirectDiffuse +\x3d PI * lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n#endif',
      lightmap_pars_fragment:
        '#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif',
      lights_lambert_vertex:
        'vec3 diffuse \x3d vec3( 1.0 );\nGeometricContext geometry;\ngeometry.position \x3d mvPosition.xyz;\ngeometry.normal \x3d normalize( transformedNormal );\ngeometry.viewDir \x3d ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( -mvPosition.xyz );\nGeometricContext back_0x6;\nback_0x6.position \x3d geometry.position;\nback_0x6.normal \x3d -geometry.normal;\nback_0x6.viewDir \x3d geometry.viewDir;\nvLightFront \x3d vec3( 0.0 );\nvIndirectFront \x3d vec3( 0.0 );\n#ifdef DOUBLE_SIDED\n\tvLightBack \x3d vec3( 0.0 );\n\tvIndirectBack \x3d vec3( 0.0 );\n#endif\nIncidentLight directLight;\nfloat dotNL;\nvec3 directLightColor_Diffuse;\nvIndirectFront +\x3d getq10Irradiance( ambientLightColor );\nvIndirectFront +\x3d getLightProbeIrradiance( lightProbe, geometry );\n#ifdef DOUBLE_SIDED\n\tvIndirectBack +\x3d getq10Irradiance( ambientLightColor );\n\tvIndirectBack +\x3d getLightProbeIrradiance( lightProbe, back_0x6 );\n#endif\n#if NUM_POINT_LIGHTS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tgetPointDirectLightIrradiance( pointLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_SPOT_LIGHTS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tgetSpotDirectLightIrradiance( spotLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_DIR_LIGHTS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tgetDirectionalDirectLightIrradiance( directionalLights[ i ], geometry, directLight );\n\t\tdotNL \x3d dot( geometry.normal, directLight.direction );\n\t\tdirectLightColor_Diffuse \x3d PI * directLight.color;\n\t\tvLightFront +\x3d saturate( dotNL ) * directLightColor_Diffuse;\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvLightBack +\x3d saturate( -dotNL ) * directLightColor_Diffuse;\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if NUM_HEMI_LIGHTS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_HEMI_LIGHTS; i ++ ) {\n\t\tvIndirectFront +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\tvIndirectBack +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], back_0x6 );\n\t\t#endif\n\t}\n\t#pragma unroll_loop_end\n#endif',
      lights_pars_begin:
        'uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x \x3d normal.x, y \x3d normal.y, z \x3d normal.z;\n\tvec3 result \x3d shCoefficients[ 0 ] * 0.886227;\n\tresult +\x3d shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult +\x3d shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult +\x3d shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult +\x3d shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult +\x3d shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult +\x3d shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult +\x3d shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult +\x3d shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in GeometricContext geometry ) {\n\tvec3 worldNormal \x3d inverseTransformDirection( geometry.normal, viewMatrix );\n\tvec3 irradiance \x3d shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getq10Irradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance \x3d ambientLightColor;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treturn irradiance;\n}\n#if NUM_DIR_LIGHTS \x3e 0\n\tstruct q9 {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform q9 directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalDirectLightIrradiance( const in q9 directionalLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tdirectLight.color \x3d directionalLight.color;\n\t\tdirectLight.direction \x3d directionalLight.direction;\n\t\tdirectLight.visible \x3d true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS \x3e 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointDirectLightIrradiance( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector \x3d pointLight.position - geometry.position;\n\t\tdirectLight.direction \x3d normalize( lVector );\n\t\tfloat lightDistance \x3d length( lVector );\n\t\tdirectLight.color \x3d pointLight.color;\n\t\tdirectLight.color *\x3d punctualLightIntensityToIrradianceFactor( lightDistance, pointLight.distance, pointLight.decay );\n\t\tdirectLight.visible \x3d ( directLight.color !\x3d vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS \x3e 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotDirectLightIrradiance( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight directLight ) {\n\t\tvec3 lVector \x3d spotLight.position - geometry.position;\n\t\tdirectLight.direction \x3d normalize( lVector );\n\t\tfloat lightDistance \x3d length( lVector );\n\t\tfloat angleCos \x3d dot( directLight.direction, spotLight.direction );\n\t\tif ( angleCos \x3e spotLight.coneCos ) {\n\t\t\tfloat spotEffect \x3d smoothstep( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\t\tdirectLight.color \x3d spotLight.color;\n\t\t\tdirectLight.color *\x3d spotEffect * punctualLightIntensityToIrradianceFactor( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tdirectLight.visible \x3d true;\n\t\t} else {\n\t\t\tdirectLight.color \x3d vec3( 0.0 );\n\t\t\tdirectLight.visible \x3d false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS \x3e 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS \x3e 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in GeometricContext geometry ) {\n\t\tfloat dotNL \x3d dot( geometry.normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight \x3d 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance \x3d mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tirradiance *\x3d PI;\n\t\t#endif\n\t\treturn irradiance;\n\t}\n#endif',
      lights_toon_fragment:
        'ToonMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb;',
      lights_toon_pars_fragment:
        'varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance \x3d getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treflectedLight.directDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon\n#define Material_LightProbeLOD( material )\t(0)',
      lights_phong_fragment:
        'BlinnPhongMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb;\nmaterial.specularColor \x3d specular;\nmaterial.specularShininess \x3d shininess;\nmaterial.specularStrength \x3d specularStrength;',
      lights_phong_pars_fragment:
        'varying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL \x3d saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance \x3d dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\treflectedLight.directDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular +\x3d irradiance * BRDF_Specular_BlinnPhong( directLight, geometry, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong\n#define Material_LightProbeLOD( material )\t(0)',
      lights_physical_fragment:
        'PhysicalMaterial material;\nmaterial.diffuseColor \x3d diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy \x3d max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness \x3d max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.specularRoughness \x3d max( roughnessFactor, 0.0525 );material.specularRoughness +\x3d geometryRoughness;\nmaterial.specularRoughness \x3d min( material.specularRoughness, 1.0 );\n#ifdef REFLECTIVITY\n\tmaterial.specularColor \x3d mix( vec3( MAXIMUM_SPECULAR_COEFFICIENT * pow2( reflectivity ) ), diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor \x3d mix( vec3( DEFAULT_SPECULAR_COEFFICIENT ), diffuseColor.rgb, metalnessFactor );\n#endif\n#ifdef CLEARCOAT\n\tmaterial.clearcoat \x3d clearcoat;\n\tmaterial.clearcoatRoughness \x3d clearcoatRoughness;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *\x3d texture2D( clearcoatMap, vUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *\x3d texture2D( clearcoatRoughnessMap, vUv ).y;\n\t#endif\n\tmaterial.clearcoat \x3d saturate( material.clearcoat );\tmaterial.clearcoatRoughness \x3d max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness +\x3d geometryRoughness;\n\tmaterial.clearcoatRoughness \x3d min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor \x3d sheen;\n#endif',
      lights_physical_pars_fragment:
        'struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat specularRoughness;\n\tvec3 specularColor;\n#ifdef CLEARCOAT\n\tfloat clearcoat;\n\tfloat clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tvec3 sheenColor;\n#endif\n};\n#define MAXIMUM_SPECULAR_COEFFICIENT 0.16\n#define DEFAULT_SPECULAR_COEFFICIENT 0.04\nfloat clearcoatDHRApprox( const in float roughness, const in float dotNL ) {\n\treturn DEFAULT_SPECULAR_COEFFICIENT + ( 1.0 - DEFAULT_SPECULAR_COEFFICIENT ) * ( pow( 1.0 - dotNL, 5.0 ) * pow( 1.0 - roughness, 2.0 ) );\n}\n#if NUM_RECT_AREA_LIGHTS \x3e 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal \x3d geometry.normal;\n\t\tvec3 viewDir \x3d geometry.viewDir;\n\t\tvec3 position \x3d geometry.position;\n\t\tvec3 lightPos \x3d rectAreaLight.position;\n\t\tvec3 halfWidth \x3d rectAreaLight.halfWidth;\n\t\tvec3 halfHeight \x3d rectAreaLight.halfHeight;\n\t\tvec3 lightColor \x3d rectAreaLight.color;\n\t\tfloat roughness \x3d material.specularRoughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] \x3d lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] \x3d lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] \x3d lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] \x3d lightPos + halfWidth + halfHeight;\n\t\tvec2 uv \x3d LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 \x3d texture2D( ltc_1, uv );\n\t\tvec4 t2 \x3d texture2D( ltc_2, uv );\n\t\tmat3 mInv \x3d mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel \x3d ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular +\x3d lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse +\x3d lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL \x3d saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance \x3d dotNL * directLight.color;\n\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\tirradiance *\x3d PI;\n\t#endif\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNL \x3d saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance \x3d ccDotNL * directLight.color;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tccIrradiance *\x3d PI;\n\t\t#endif\n\t\tfloat clearcoatDHR \x3d material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t\treflectedLight.directSpecular +\x3d ccIrradiance * material.clearcoat * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t#else\n\t\tfloat clearcoatDHR \x3d 0.0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\treflectedLight.directSpecular +\x3d ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_Sheen(\n\t\t\tmaterial.specularRoughness,\n\t\t\tdirectLight.direction,\n\t\t\tgeometry,\n\t\t\tmaterial.sheenColor\n\t\t);\n\t#else\n\t\treflectedLight.directSpecular +\x3d ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Specular_GGX( directLight, geometry.viewDir, geometry.normal, material.specularColor, material.specularRoughness);\n\t#endif\n\treflectedLight.directDiffuse +\x3d ( 1.0 - clearcoatDHR ) * irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse +\x3d irradiance * BRDF_Diffuse_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef CLEARCOAT\n\t\tfloat ccDotNV \x3d saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular +\x3d clearcoatRadiance * material.clearcoat * BRDF_Specular_GGX_Environment( geometry.viewDir, geometry.clearcoatNormal, vec3( DEFAULT_SPECULAR_COEFFICIENT ), material.clearcoatRoughness );\n\t\tfloat ccDotNL \x3d ccDotNV;\n\t\tfloat clearcoatDHR \x3d material.clearcoat * clearcoatDHRApprox( material.clearcoatRoughness, ccDotNL );\n\t#else\n\t\tfloat clearcoatDHR \x3d 0.0;\n\t#endif\n\tfloat clearcoatInv \x3d 1.0 - clearcoatDHR;\n\tvec3 singleScattering \x3d vec3( 0.0 );\n\tvec3 multiScattering \x3d vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance \x3d irradiance * RECIPROCAL_PI;\n\tBRDF_Specular_Multiscattering_Environment( geometry, material.specularColor, material.specularRoughness, singleScattering, multiScattering );\n\tvec3 diffuse \x3d material.diffuseColor * ( 1.0 - ( singleScattering + multiScattering ) );\n\treflectedLight.indirectSpecular +\x3d clearcoatInv * radiance * singleScattering;\n\treflectedLight.indirectSpecular +\x3d multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse +\x3d diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}',
      lights_fragment_begin:
        '\nGeometricContext geometry;\ngeometry.position \x3d - vViewPosition;\ngeometry.normal \x3d normal;\ngeometry.viewDir \x3d ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef CLEARCOAT\n\tgeometry.clearcoatNormal \x3d clearcoatNormal;\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) \x26\x26 NUM_POINT_LIGHT_SHADOWS \x3e 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight \x3d pointLights[ i ];\n\t\tgetPointDirectLightIrradiance( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) \x26\x26 ( UNROLLED_LOOP_INDEX \x3c NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow \x3d pointLightShadows[ i ];\n\t\tdirectLight.color *\x3d all( bvec2( directLight.visible, receiveShadow ) ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tSpotLight spotLight;\n\t#if defined( USE_SHADOWMAP ) \x26\x26 NUM_SPOT_LIGHT_SHADOWS \x3e 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight \x3d spotLights[ i ];\n\t\tgetSpotDirectLightIrradiance( spotLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) \x26\x26 ( UNROLLED_LOOP_INDEX \x3c NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow \x3d spotLightShadows[ i ];\n\t\tdirectLight.color *\x3d all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct )\n\tq9 directionalLight;\n\t#if defined( USE_SHADOWMAP ) \x26\x26 NUM_DIR_LIGHT_SHADOWS \x3e 0\n\tq9Shadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight \x3d directionalLights[ i ];\n\t\tgetDirectionalDirectLightIrradiance( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) \x26\x26 ( UNROLLED_LOOP_INDEX \x3c NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow \x3d directionalLightShadows[ i ];\n\t\tdirectLight.color *\x3d all( bvec2( directLight.visible, receiveShadow ) ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS \x3e 0 ) \x26\x26 defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight \x3d rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance \x3d vec3( 0.0 );\n\tvec3 irradiance \x3d getq10Irradiance( ambientLightColor );\n\tirradiance +\x3d getLightProbeIrradiance( lightProbe, geometry );\n\t#if ( NUM_HEMI_LIGHTS \x3e 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i \x3d 0; i \x3c NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance +\x3d getHemisphereLightIrradiance( hemisphereLights[ i ], geometry );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance \x3d vec3( 0.0 );\n\tvec3 clearcoatRadiance \x3d vec3( 0.0 );\n#endif',
      lights_fragment_maps:
        '#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel\x3d texture2D( lightMap, vUv2 );\n\t\tvec3 lightMapIrradiance \x3d lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t\t#ifndef PHYSICALLY_CORRECT_LIGHTS\n\t\t\tlightMapIrradiance *\x3d PI;\n\t\t#endif\n\t\tirradiance +\x3d lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) \x26\x26 defined( STANDARD ) \x26\x26 defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance +\x3d getLightProbeIndirectIrradiance( geometry, maxMipLevel );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) \x26\x26 defined( RE_IndirectSpecular )\n\tradiance +\x3d getLightProbeIndirectRadiance( geometry.viewDir, geometry.normal, material.specularRoughness, maxMipLevel );\n\t#ifdef CLEARCOAT\n\t\tclearcoatRadiance +\x3d getLightProbeIndirectRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness, maxMipLevel );\n\t#endif\n#endif',
      lights_fragment_end:
        '#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif',
      logdepthbuf_fragment:
        '#if defined( USE_LOGDEPTHBUF ) \x26\x26 defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT \x3d vIsPerspective \x3d\x3d 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif',
      logdepthbuf_pars_fragment:
        '#if defined( USE_LOGDEPTHBUF ) \x26\x26 defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif',
      logdepthbuf_pars_vertex:
        '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif',
      logdepthbuf_vertex:
        '#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth \x3d 1.0 + gl_Position.w;\n\t\tvIsPerspective \x3d float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z \x3d log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *\x3d gl_Position.w;\n\t\t}\n\t#endif\n#endif',
      map_fragment:
        '#ifdef USE_MAP\n\tvec4 texelColor \x3d texture2D( map, vUv );\n\ttexelColor \x3d mapTexelToLinear( texelColor );\n\tdiffuseColor *\x3d texelColor;\n#endif',
      map_pars_fragment: '#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif',
      map_particle_fragment:
        '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tvec2 uv \x3d ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n#endif\n#ifdef USE_MAP\n\tvec4 mapTexel \x3d texture2D( map, uv );\n\tdiffuseColor *\x3d mapTexelToLinear( mapTexel );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *\x3d texture2D( alphaMap, uv ).g;\n#endif',
      map_particle_pars_fragment:
        '#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\tuniform mat3 uvTransform;\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif',
      metalnessmap_fragment:
        'float metalnessFactor \x3d metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness \x3d texture2D( metalnessMap, vUv );\n\tmetalnessFactor *\x3d texelMetalness.b;\n#endif',
      metalnessmap_pars_fragment:
        '#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif',
      morphnormal_vertex:
        '#ifdef USE_MORPHNORMALS\n\tobjectNormal *\x3d morphTargetBaseInfluence;\n\tobjectNormal +\x3d morphNormal0 * morphTargetInfluences[ 0 ];\n\tobjectNormal +\x3d morphNormal1 * morphTargetInfluences[ 1 ];\n\tobjectNormal +\x3d morphNormal2 * morphTargetInfluences[ 2 ];\n\tobjectNormal +\x3d morphNormal3 * morphTargetInfluences[ 3 ];\n#endif',
      morphtarget_pars_vertex:
        '#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifndef USE_MORPHNORMALS\n\t\tuniform float morphTargetInfluences[ 8 ];\n\t#else\n\t\tuniform float morphTargetInfluences[ 4 ];\n\t#endif\n#endif',
      morphtarget_vertex:
        '#ifdef USE_MORPHTARGETS\n\ttransformed *\x3d morphTargetBaseInfluence;\n\ttransformed +\x3d morphTarget0 * morphTargetInfluences[ 0 ];\n\ttransformed +\x3d morphTarget1 * morphTargetInfluences[ 1 ];\n\ttransformed +\x3d morphTarget2 * morphTargetInfluences[ 2 ];\n\ttransformed +\x3d morphTarget3 * morphTargetInfluences[ 3 ];\n\t#ifndef USE_MORPHNORMALS\n\t\ttransformed +\x3d morphTarget4 * morphTargetInfluences[ 4 ];\n\t\ttransformed +\x3d morphTarget5 * morphTargetInfluences[ 5 ];\n\t\ttransformed +\x3d morphTarget6 * morphTargetInfluences[ 6 ];\n\t\ttransformed +\x3d morphTarget7 * morphTargetInfluences[ 7 ];\n\t#endif\n#endif',
      normal_fragment_begin:
        '#ifdef FLAT_SHADED\n\tvec3 fdx \x3d vec3( dFdx( vViewPosition.x ), dFdx( vViewPosition.y ), dFdx( vViewPosition.z ) );\n\tvec3 fdy \x3d vec3( dFdy( vViewPosition.x ), dFdy( vViewPosition.y ), dFdy( vViewPosition.z ) );\n\tvec3 normal \x3d normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal \x3d normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal \x3d normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\t#ifdef USE_TANGENT\n\t\tvec3 tangent \x3d normalize( vTangent );\n\t\tvec3 bitangent \x3d normalize( vBitangent );\n\t\t#ifdef DOUBLE_SIDED\n\t\t\ttangent \x3d tangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t\tbitangent \x3d bitangent * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\t#endif\n\t\t#if defined( TANGENTSPACE_NORMALMAP ) || defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tmat3 vTBN \x3d mat3( tangent, bitangent, normal );\n\t\t#endif\n\t#endif\n#endif\nvec3 geometryNormal \x3d normal;',
      normal_fragment_maps:
        '#ifdef OBJECTSPACE_NORMALMAP\n\tnormal \x3d texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal \x3d - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal \x3d normal * ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t#endif\n\tnormal \x3d normalize( normalMatrix * normal );\n#elif defined( TANGENTSPACE_NORMALMAP )\n\tvec3 mapN \x3d texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *\x3d normalScale;\n\t#ifdef USE_TANGENT\n\t\tnormal \x3d normalize( vTBN * mapN );\n\t#else\n\t\tnormal \x3d perturbNormal2Arb( -vViewPosition, normal, mapN );\n\t#endif\n#elif defined( USE_BUMPMAP )\n\tnormal \x3d perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif',
      normalmap_pars_fragment:
        '#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef OBJECTSPACE_NORMALMAP\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) \x26\x26 ( defined ( TANGENTSPACE_NORMALMAP ) || defined ( USE_CLEARCOAT_NORMALMAP ) )\n\tvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm, vec3 mapN ) {\n\t\tvec3 q0 \x3d vec3( dFdx( eye_pos.x ), dFdx( eye_pos.y ), dFdx( eye_pos.z ) );\n\t\tvec3 q1 \x3d vec3( dFdy( eye_pos.x ), dFdy( eye_pos.y ), dFdy( eye_pos.z ) );\n\t\tvec2 st0 \x3d dFdx( vUv.st );\n\t\tvec2 st1 \x3d dFdy( vUv.st );\n\t\tfloat scale \x3d sign( st1.t * st0.s - st0.t * st1.s );\n\t\tvec3 S \x3d normalize( ( q0 * st1.t - q1 * st0.t ) * scale );\n\t\tvec3 T \x3d normalize( ( - q0 * st1.s + q1 * st0.s ) * scale );\n\t\tvec3 N \x3d normalize( surf_norm );\n\t\tmat3 tsn \x3d mat3( S, T, N );\n\t\tmapN.xy *\x3d ( float( gl_FrontFacing ) * 2.0 - 1.0 );\n\t\treturn normalize( tsn * mapN );\n\t}\n#endif',
      clearcoat_normal_fragment_begin:
        '#ifdef CLEARCOAT\n\tvec3 clearcoatNormal \x3d geometryNormal;\n#endif',
      clearcoat_normal_fragment_maps:
        '#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN \x3d texture2D( clearcoatNormalMap, vUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *\x3d clearcoatNormalScale;\n\t#ifdef USE_TANGENT\n\t\tclearcoatNormal \x3d normalize( vTBN * clearcoatMapN );\n\t#else\n\t\tclearcoatNormal \x3d perturbNormal2Arb( - vViewPosition, clearcoatNormal, clearcoatMapN );\n\t#endif\n#endif',
      clearcoat_pars_fragment:
        '#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif',
      packing:
        'vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale \x3d 256. / 255.;const float UnpackDownscale \x3d 255. / 256.;\nconst vec3 PackFactors \x3d vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors \x3d UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 \x3d 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r \x3d vec4( fract( v * PackFactors ), v );\n\tr.yzw -\x3d r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r \x3d vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ));\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w);\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float linearClipZ, const in float near, const in float far ) {\n\treturn linearClipZ * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn (( near + viewZ ) * far ) / (( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float invClipZ, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * invClipZ - far );\n}',
      premultiplied_alpha_fragment:
        '#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *\x3d gl_FragColor.a;\n#endif',
      project_vertex:
        'vec4 mvPosition \x3d vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition \x3d instanceMatrix * mvPosition;\n#endif\nmvPosition \x3d modelViewMatrix * mvPosition;\ngl_Position \x3d projectionMatrix * mvPosition;',
      dithering_fragment:
        '#ifdef DITHERING\n\tgl_FragColor.rgb \x3d dithering( gl_FragColor.rgb );\n#endif',
      dithering_pars_fragment:
        '#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position \x3d rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB \x3d vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB \x3d mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif',
      roughnessmap_fragment:
        'float roughnessFactor \x3d roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness \x3d texture2D( roughnessMap, vUv );\n\troughnessFactor *\x3d texelRoughness.g;\n#endif',
      roughnessmap_pars_fragment:
        '#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif',
      shadowmap_pars_fragment:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS \x3e 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct q9Shadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform q9Shadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS \x3e 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS \x3e 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion \x3d 1.0;\n\t\tvec2 distribution \x3d texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow \x3d step( compare , distribution.x );\n\t\tif (hard_shadow !\x3d 1.0 ) {\n\t\t\tfloat distance \x3d compare - distribution.x ;\n\t\t\tfloat variance \x3d max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability \x3d variance / (variance + distance * distance );\t\t\tsoftness_probability \x3d clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion \x3d clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow \x3d 1.0;\n\t\tshadowCoord.xyz /\x3d shadowCoord.w;\n\t\tshadowCoord.z +\x3d shadowBias;\n\t\tbvec4 inFrustumVec \x3d bvec4 ( shadowCoord.x \x3e\x3d 0.0, shadowCoord.x \x3c\x3d 1.0, shadowCoord.y \x3e\x3d 0.0, shadowCoord.y \x3c\x3d 1.0 );\n\t\tbool inFrustum \x3d all( inFrustumVec );\n\t\tbvec2 frustumTestVec \x3d bvec2( inFrustum, shadowCoord.z \x3c\x3d 1.0 );\n\t\tbool frustumTest \x3d all( frustumTestVec );\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize \x3d vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 \x3d - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 \x3d - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 \x3d + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 \x3d + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 \x3d dx0 / 2.0;\n\t\t\tfloat dy2 \x3d dy0 / 2.0;\n\t\t\tfloat dx3 \x3d dx1 / 2.0;\n\t\t\tfloat dy3 \x3d dy1 / 2.0;\n\t\t\tshadow \x3d (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize \x3d vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx \x3d texelSize.x;\n\t\t\tfloat dy \x3d texelSize.y;\n\t\t\tvec2 uv \x3d shadowCoord.xy;\n\t\t\tvec2 f \x3d fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -\x3d f * texelSize;\n\t\t\tshadow \x3d (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ), \n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow \x3d VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow \x3d texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV \x3d abs( v );\n\t\tfloat scaleToCube \x3d 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *\x3d scaleToCube;\n\t\tv *\x3d scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar \x3d v.xy;\n\t\tfloat almostATexel \x3d 1.5 * texelSizeY;\n\t\tfloat almostOne \x3d 1.0 - almostATexel;\n\t\tif ( absV.z \x3e\x3d almostOne ) {\n\t\t\tif ( v.z \x3e 0.0 )\n\t\t\t\tplanar.x \x3d 4.0 - v.x;\n\t\t} else if ( absV.x \x3e\x3d almostOne ) {\n\t\t\tfloat signX \x3d sign( v.x );\n\t\t\tplanar.x \x3d v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y \x3e\x3d almostOne ) {\n\t\t\tfloat signY \x3d sign( v.y );\n\t\t\tplanar.x \x3d v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y \x3d v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize \x3d vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition \x3d shadowCoord.xyz;\n\t\tfloat dp \x3d ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp +\x3d shadowBias;\n\t\tvec3 bd3D \x3d normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset \x3d vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif',
      shadowmap_pars_vertex:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS \x3e 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct q9Shadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform q9Shadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS \x3e 0\n\t\tuniform mat4 spotShadowMatrix[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vSpotShadowCoord[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS \x3e 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif',
      shadowmap_vertex:
        '#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS \x3e 0 || NUM_SPOT_LIGHT_SHADOWS \x3e 0 || NUM_POINT_LIGHT_SHADOWS \x3e 0\n\t\tvec3 shadowWorldNormal \x3d inverseTransformDirection( transformedNormal, viewMatrix );\n\t\tvec4 shadowWorldPosition;\n\t#endif\n\t#if NUM_DIR_LIGHT_SHADOWS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition \x3d worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvDirectionalShadowCoord[ i ] \x3d directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition \x3d worldPosition + vec4( shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvSpotShadowCoord[ i ] \x3d spotShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS \x3e 0\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tshadowWorldPosition \x3d worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\tvPointShadowCoord[ i ] \x3d pointShadowMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n#endif',
      shadowmask_pars_fragment:
        'float getShadowMask() {\n\tfloat shadow \x3d 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS \x3e 0\n\tq9Shadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight \x3d directionalLightShadows[ i ];\n\t\tshadow *\x3d receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS \x3e 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight \x3d spotLightShadows[ i ];\n\t\tshadow *\x3d receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS \x3e 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i \x3d 0; i \x3c NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight \x3d pointLightShadows[ i ];\n\t\tshadow *\x3d receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}',
      skinbase_vertex:
        '#ifdef USE_SKINNING\n\tmat4 boneMatX \x3d getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY \x3d getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ \x3d getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW \x3d getBoneMatrix( skinIndex.w );\n#endif',
      skinning_pars_vertex:
        '#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\t#ifdef BONE_TEXTURE\n\t\tuniform highp sampler2D boneTexture;\n\t\tuniform int boneTextureSize;\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tfloat j \x3d i * 4.0;\n\t\t\tfloat x \x3d mod( j, float( boneTextureSize ) );\n\t\t\tfloat y \x3d floor( j / float( boneTextureSize ) );\n\t\t\tfloat dx \x3d 1.0 / float( boneTextureSize );\n\t\t\tfloat dy \x3d 1.0 / float( boneTextureSize );\n\t\t\ty \x3d dy * ( y + 0.5 );\n\t\t\tvec4 v1 \x3d texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\t\tvec4 v2 \x3d texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\t\tvec4 v3 \x3d texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\t\tvec4 v4 \x3d texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\t\tmat4 bone \x3d mat4( v1, v2, v3, v4 );\n\t\t\treturn bone;\n\t\t}\n\t#else\n\t\tuniform mat4 boneMatrices[ MAX_BONES ];\n\t\tmat4 getBoneMatrix( const in float i ) {\n\t\t\tmat4 bone \x3d boneMatrices[ int(i) ];\n\t\t\treturn bone;\n\t\t}\n\t#endif\n#endif',
      skinning_vertex:
        '#ifdef USE_SKINNING\n\tvec4 skinVertex \x3d bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned \x3d vec4( 0.0 );\n\tskinned +\x3d boneMatX * skinVertex * skinWeight.x;\n\tskinned +\x3d boneMatY * skinVertex * skinWeight.y;\n\tskinned +\x3d boneMatZ * skinVertex * skinWeight.z;\n\tskinned +\x3d boneMatW * skinVertex * skinWeight.w;\n\ttransformed \x3d ( bindMatrixInverse * skinned ).xyz;\n#endif',
      skinnormal_vertex:
        '#ifdef USE_SKINNING\n\tmat4 skinMatrix \x3d mat4( 0.0 );\n\tskinMatrix +\x3d skinWeight.x * boneMatX;\n\tskinMatrix +\x3d skinWeight.y * boneMatY;\n\tskinMatrix +\x3d skinWeight.z * boneMatZ;\n\tskinMatrix +\x3d skinWeight.w * boneMatW;\n\tskinMatrix \x3d bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal \x3d vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent \x3d vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif',
      specularmap_fragment:
        'float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular \x3d texture2D( specularMap, vUv );\n\tspecularStrength \x3d texelSpecular.r;\n#else\n\tspecularStrength \x3d 1.0;\n#endif',
      specularmap_pars_fragment:
        '#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif',
      tonemapping_fragment:
        '#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb \x3d toneMapping( gl_FragColor.rgb );\n#endif',
      tonemapping_pars_fragment:
        '#ifndef saturate\n#define saturate(a) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn toneMappingExposure * color;\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *\x3d toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *\x3d toneMappingExposure;\n\tcolor \x3d max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a \x3d v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b \x3d v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat \x3d mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat \x3d mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *\x3d toneMappingExposure / 0.6;\n\tcolor \x3d ACESInputMat * color;\n\tcolor \x3d RRTAndODTFit( color );\n\tcolor \x3d ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }',
      transmissionmap_fragment:
        '#ifdef USE_TRANSMISSIONMAP\n\ttotalTransmission *\x3d texture2D( transmissionMap, vUv ).r;\n#endif',
      transmissionmap_pars_fragment:
        '#ifdef USE_TRANSMISSIONMAP\n\tuniform sampler2D transmissionMap;\n#endif',
      uv_pars_fragment:
        '#if ( defined( USE_UV ) \x26\x26 ! defined( UVS_VERTEX_ONLY ) )\n\tvarying vec2 vUv;\n#endif',
      uv_pars_vertex:
        '#ifdef USE_UV\n\t#ifdef UVS_VERTEX_ONLY\n\t\tvec2 vUv;\n\t#else\n\t\tvarying vec2 vUv;\n\t#endif\n\tuniform mat3 uvTransform;\n#endif',
      uv_vertex:
        '#ifdef USE_UV\n\tvUv \x3d ( uvTransform * vec3( uv, 1 ) ).xy;\n#endif',
      uv2_pars_fragment:
        '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvarying vec2 vUv2;\n#endif',
      uv2_pars_vertex:
        '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tattribute vec2 uv2;\n\tvarying vec2 vUv2;\n\tuniform mat3 uv2Transform;\n#endif',
      uv2_vertex:
        '#if defined( USE_LIGHTMAP ) || defined( USE_AOMAP )\n\tvUv2 \x3d ( uv2Transform * vec3( uv2, 1 ) ).xy;\n#endif',
      worldpos_vertex:
        '#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP )\n\tvec4 worldPosition \x3d vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition \x3d instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition \x3d modelMatrix * worldPosition;\n#endif',
      background_frag:
        'uniform sampler2D t2D;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor \x3d texture2D( t2D, vUv );\n\tgl_FragColor \x3d mapTexelToLinear( texColor );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n}',
      background_vert:
        'varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv \x3d ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position \x3d vec4( position.xy, 1.0, 1.0 );\n}',
      cube_frag:
        '#include \x3cenvmap_common_pars_fragment\x3e\nuniform float opacity;\nvarying vec3 vWorldDirection;\n#include \x3ccube_uv_reflection_fragment\x3e\nvoid main() {\n\tvec3 vReflect \x3d vWorldDirection;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d envColor;\n\tgl_FragColor.a *\x3d opacity;\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n}',
      cube_vert:
        'varying vec3 vWorldDirection;\n#include \x3ccommon\x3e\nvoid main() {\n\tvWorldDirection \x3d transformDirection( position, modelMatrix );\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\tgl_Position.z \x3d gl_Position.w;\n}',
      depth_frag:
        '#if DEPTH_PACKING \x3d\x3d 3200\n\tuniform float opacity;\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( 1.0 );\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\t\tdiffuseColor.a \x3d opacity;\n\t#endif\n\t#include \x3cmap_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3clogdepthbuf_fragment\x3e\n\tfloat fragCoordZ \x3d 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING \x3d\x3d 3200\n\t\tgl_FragColor \x3d vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING \x3d\x3d 3201\n\t\tgl_FragColor \x3d packDepthToRGBA( fragCoordZ );\n\t#endif\n}',
      depth_vert:
        '#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include \x3cbeginnormal_vertex\x3e\n\t\t#include \x3cmorphnormal_vertex\x3e\n\t\t#include \x3cskinnormal_vertex\x3e\n\t#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvHighPrecisionZW \x3d gl_Position.zw;\n}',
      distanceRGBA_frag:
        '#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main () {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( 1.0 );\n\t#include \x3cmap_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\tfloat dist \x3d length( vWorldPosition - referencePosition );\n\tdist \x3d ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist \x3d saturate( dist );\n\tgl_FragColor \x3d packDepthToRGBA( dist );\n}',
      distanceRGBA_vert:
        '#define DISTANCE\nvarying vec3 vWorldPosition;\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include \x3cbeginnormal_vertex\x3e\n\t\t#include \x3cmorphnormal_vertex\x3e\n\t\t#include \x3cskinnormal_vertex\x3e\n\t#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvWorldPosition \x3d worldPosition.xyz;\n}',
      equirect_frag:
        'uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include \x3ccommon\x3e\nvoid main() {\n\tvec3 direction \x3d normalize( vWorldDirection );\n\tvec2 sampleUV \x3d equirectUv( direction );\n\tvec4 texColor \x3d texture2D( tEquirect, sampleUV );\n\tgl_FragColor \x3d mapTexelToLinear( texColor );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n}',
      equirect_vert:
        'varying vec3 vWorldDirection;\n#include \x3ccommon\x3e\nvoid main() {\n\tvWorldDirection \x3d transformDirection( position, modelMatrix );\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n}',
      linedashed_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tif ( mod( vLineDistance, totalSize ) \x3e dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight \x3d vec3( 0.0 );\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\toutgoingLight \x3d diffuseColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n}',
      linedashed_vert:
        'uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\tvLineDistance \x3d scale * lineDistance;\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      meshbasic_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cenvmap_common_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3ccube_uv_reflection_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\n\t\tvec4 lightMapTexel\x3d texture2D( lightMap, vUv2 );\n\t\treflectedLight.indirectDiffuse +\x3d lightMapTexelToLinear( lightMapTexel ).rgb * lightMapIntensity;\n\t#else\n\t\treflectedLight.indirectDiffuse +\x3d vec3( 1.0 );\n\t#endif\n\t#include \x3caomap_fragment\x3e\n\treflectedLight.indirectDiffuse *\x3d diffuseColor.rgb;\n\tvec3 outgoingLight \x3d reflectedLight.indirectDiffuse;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshbasic_vert:
        '#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#ifdef USE_ENVMAP\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      meshlambert_frag:
        'uniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cenvmap_common_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3ccube_uv_reflection_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cshadowmask_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.indirectDiffuse +\x3d ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n\t#else\n\t\treflectedLight.indirectDiffuse +\x3d vIndirectFront;\n\t#endif\n\t#include \x3clightmap_fragment\x3e\n\treflectedLight.indirectDiffuse *\x3d BRDF_Diffuse_Lambert( diffuseColor.rgb );\n\t#ifdef DOUBLE_SIDED\n\t\treflectedLight.directDiffuse \x3d ( gl_FrontFacing ) ? vLightFront : vLightBack;\n\t#else\n\t\treflectedLight.directDiffuse \x3d vLightFront;\n\t#endif\n\treflectedLight.directDiffuse *\x3d BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshlambert_vert:
        '#define LAMBERT\nvarying vec3 vLightFront;\nvarying vec3 vIndirectFront;\n#ifdef DOUBLE_SIDED\n\tvarying vec3 vLightBack;\n\tvarying vec3 vIndirectBack;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n\t#include \x3clights_lambert_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      meshmatcap_frag:
        '#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cnormal_fragment_begin\x3e\n\t#include \x3cnormal_fragment_maps\x3e\n\tvec3 viewDir \x3d normalize( vViewPosition );\n\tvec3 x \x3d normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y \x3d cross( viewDir, x );\n\tvec2 uv \x3d vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor \x3d texture2D( matcap, uv );\n\t\tmatcapColor \x3d matcapTexelToLinear( matcapColor );\n\t#else\n\t\tvec4 matcapColor \x3d vec4( 1.0 );\n\t#endif\n\tvec3 outgoingLight \x3d diffuseColor.rgb * matcapColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshmatcap_vert:
        '#define MATCAP\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#ifndef FLAT_SHADED\n\t\tvNormal \x3d normalize( transformedNormal );\n\t#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n}',
      meshtoon_frag:
        '#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cgradientmap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3clights_toon_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cnormal_fragment_begin\x3e\n\t#include \x3cnormal_fragment_maps\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#include \x3clights_toon_fragment\x3e\n\t#include \x3clights_fragment_begin\x3e\n\t#include \x3clights_fragment_maps\x3e\n\t#include \x3clights_fragment_end\x3e\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshtoon_vert:
        '#define TOON\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      meshphong_frag:
        '#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3cenvmap_common_pars_fragment\x3e\n#include \x3cenvmap_pars_fragment\x3e\n#include \x3ccube_uv_reflection_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3clights_phong_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3cspecularmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3cspecularmap_fragment\x3e\n\t#include \x3cnormal_fragment_begin\x3e\n\t#include \x3cnormal_fragment_maps\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#include \x3clights_phong_fragment\x3e\n\t#include \x3clights_fragment_begin\x3e\n\t#include \x3clights_fragment_maps\x3e\n\t#include \x3clights_fragment_end\x3e\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include \x3cenvmap_fragment\x3e\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshphong_vert:
        '#define PHONG\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cenvmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cenvmap_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      meshphysical_frag:
        '#define STANDARD\n#ifdef PHYSICAL\n\t#define REFLECTIVITY\n\t#define CLEARCOAT\n\t#define TRANSMISSION\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef TRANSMISSION\n\tuniform float transmission;\n#endif\n#ifdef REFLECTIVITY\n\tuniform float reflectivity;\n#endif\n#ifdef CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheen;\n#endif\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cdithering_pars_fragment\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cuv2_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3caomap_pars_fragment\x3e\n#include \x3clightmap_pars_fragment\x3e\n#include \x3cemissivemap_pars_fragment\x3e\n#include \x3ctransmissionmap_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3ccube_uv_reflection_fragment\x3e\n#include \x3cenvmap_common_pars_fragment\x3e\n#include \x3cenvmap_physical_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3clights_physical_pars_fragment\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3cclearcoat_pars_fragment\x3e\n#include \x3croughnessmap_pars_fragment\x3e\n#include \x3cmetalnessmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\tReflectedLight reflectedLight \x3d ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance \x3d emissive;\n\t#ifdef TRANSMISSION\n\t\tfloat totalTransmission \x3d transmission;\n\t#endif\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\t#include \x3croughnessmap_fragment\x3e\n\t#include \x3cmetalnessmap_fragment\x3e\n\t#include \x3cnormal_fragment_begin\x3e\n\t#include \x3cnormal_fragment_maps\x3e\n\t#include \x3cclearcoat_normal_fragment_begin\x3e\n\t#include \x3cclearcoat_normal_fragment_maps\x3e\n\t#include \x3cemissivemap_fragment\x3e\n\t#include \x3ctransmissionmap_fragment\x3e\n\t#include \x3clights_physical_fragment\x3e\n\t#include \x3clights_fragment_begin\x3e\n\t#include \x3clights_fragment_maps\x3e\n\t#include \x3clights_fragment_end\x3e\n\t#include \x3caomap_fragment\x3e\n\tvec3 outgoingLight \x3d reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#ifdef TRANSMISSION\n\t\tdiffuseColor.a *\x3d saturate( 1. - totalTransmission + linearToRelativeLuminance( reflectedLight.directSpecular + reflectedLight.indirectSpecular ) );\n\t#endif\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n\t#include \x3cdithering_fragment\x3e\n}',
      meshphysical_vert:
        '#define STANDARD\nvarying vec3 vViewPosition;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cuv2_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cuv2_vertex\x3e\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent \x3d normalize( transformedTangent );\n\t\tvBitangent \x3d normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\tvViewPosition \x3d - mvPosition.xyz;\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      normal_frag:
        '#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include \x3cpacking\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cbumpmap_pars_fragment\x3e\n#include \x3cnormalmap_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cnormal_fragment_begin\x3e\n\t#include \x3cnormal_fragment_maps\x3e\n\tgl_FragColor \x3d vec4( packNormalToRGB( normal ), opacity );\n}',
      normal_vert:
        '#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvarying vec3 vViewPosition;\n#endif\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cdisplacementmap_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3cskinning_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n#ifndef FLAT_SHADED\n\tvNormal \x3d normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent \x3d normalize( transformedTangent );\n\t\tvBitangent \x3d normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cskinning_vertex\x3e\n\t#include \x3cdisplacementmap_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( TANGENTSPACE_NORMALMAP )\n\tvViewPosition \x3d - mvPosition.xyz;\n#endif\n}',
      points_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_fragment\x3e\n#include \x3cmap_particle_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec3 outgoingLight \x3d vec3( 0.0 );\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_particle_fragment\x3e\n\t#include \x3ccolor_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\toutgoingLight \x3d diffuseColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n\t#include \x3cpremultiplied_alpha_fragment\x3e\n}',
      points_vert:
        'uniform float size;\nuniform float scale;\n#include \x3ccommon\x3e\n#include \x3ccolor_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cmorphtarget_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3ccolor_vertex\x3e\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cmorphtarget_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\tgl_PointSize \x3d size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective \x3d isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *\x3d ( scale / - mvPosition.z );\n\t#endif\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      shadow_frag:
        'uniform vec3 color;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cpacking\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3cbsdfs\x3e\n#include \x3clights_pars_begin\x3e\n#include \x3cshadowmap_pars_fragment\x3e\n#include \x3cshadowmask_pars_fragment\x3e\nvoid main() {\n\tgl_FragColor \x3d vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}',
      shadow_vert:
        '#include \x3ccommon\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3cshadowmap_pars_vertex\x3e\nvoid main() {\n\t#include \x3cbegin_vertex\x3e\n\t#include \x3cproject_vertex\x3e\n\t#include \x3cworldpos_vertex\x3e\n\t#include \x3cbeginnormal_vertex\x3e\n\t#include \x3cmorphnormal_vertex\x3e\n\t#include \x3cskinbase_vertex\x3e\n\t#include \x3cskinnormal_vertex\x3e\n\t#include \x3cdefaultnormal_vertex\x3e\n\t#include \x3cshadowmap_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
      sprite_frag:
        'uniform vec3 diffuse;\nuniform float opacity;\n#include \x3ccommon\x3e\n#include \x3cuv_pars_fragment\x3e\n#include \x3cmap_pars_fragment\x3e\n#include \x3calphamap_pars_fragment\x3e\n#include \x3cfog_pars_fragment\x3e\n#include \x3clogdepthbuf_pars_fragment\x3e\n#include \x3cclipping_planes_pars_fragment\x3e\nvoid main() {\n\t#include \x3cclipping_planes_fragment\x3e\n\tvec3 outgoingLight \x3d vec3( 0.0 );\n\tvec4 diffuseColor \x3d vec4( diffuse, opacity );\n\t#include \x3clogdepthbuf_fragment\x3e\n\t#include \x3cmap_fragment\x3e\n\t#include \x3calphamap_fragment\x3e\n\t#include \x3calphatest_fragment\x3e\n\toutgoingLight \x3d diffuseColor.rgb;\n\tgl_FragColor \x3d vec4( outgoingLight, diffuseColor.a );\n\t#include \x3ctonemapping_fragment\x3e\n\t#include \x3cencodings_fragment\x3e\n\t#include \x3cfog_fragment\x3e\n}',
      sprite_vert:
        'uniform float rotation;\nuniform vec2 center;\n#include \x3ccommon\x3e\n#include \x3cuv_pars_vertex\x3e\n#include \x3cfog_pars_vertex\x3e\n#include \x3clogdepthbuf_pars_vertex\x3e\n#include \x3cclipping_planes_pars_vertex\x3e\nvoid main() {\n\t#include \x3cuv_vertex\x3e\n\tvec4 mvPosition \x3d modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x \x3d length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y \x3d length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective \x3d isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *\x3d - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition \x3d ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x \x3d cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y \x3d sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy +\x3d rotatedPosition;\n\tgl_Position \x3d projectionMatrix * mvPosition;\n\t#include \x3clogdepthbuf_vertex\x3e\n\t#include \x3cclipping_planes_vertex\x3e\n\t#include \x3cfog_vertex\x3e\n}',
    },
    N = {
      common: {
        diffuse: { value: new H(15658734) },
        opacity: { value: 1 },
        map: { value: null },
        uvTransform: { value: new ha() },
        uv2Transform: { value: new ha() },
        alphaMap: { value: null },
      },
      specularmap: { specularMap: { value: null } },
      envmap: {
        envMap: { value: null },
        flipEnvMap: { value: -1 },
        reflectivity: { value: 1 },
        refractionRatio: { value: 0.98 },
        maxMipLevel: { value: 0 },
      },
      aomap: { aoMap: { value: null }, aoMapIntensity: { value: 1 } },
      lightmap: { lightMap: { value: null }, lightMapIntensity: { value: 1 } },
      emissivemap: { emissiveMap: { value: null } },
      bumpmap: { bumpMap: { value: null }, bumpScale: { value: 1 } },
      normalmap: {
        normalMap: { value: null },
        normalScale: { value: new B(1, 1) },
      },
      displacementmap: {
        displacementMap: { value: null },
        displacementScale: { value: 1 },
        displacementBias: { value: 0 },
      },
      roughnessmap: { roughnessMap: { value: null } },
      metalnessmap: { metalnessMap: { value: null } },
      gradientmap: { gradientMap: { value: null } },
      fog: {
        fogDensity: { value: 2.5e-4 },
        fogNear: { value: 1 },
        fogFar: { value: 2e3 },
        fogColor: { value: new H(16777215) },
      },
      lights: {
        ambientLightColor: { value: [] },
        lightProbe: { value: [] },
        directionalLights: {
          value: [],
          properties: { direction: {}, color: {} },
        },
        directionalLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
          },
        },
        directionalShadowMap: { value: [] },
        directionalShadowMatrix: { value: [] },
        spotLights: {
          value: [],
          properties: {
            color: {},
            position: {},
            direction: {},
            distance: {},
            coneCos: {},
            penumbraCos: {},
            decay: {},
          },
        },
        spotLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
          },
        },
        spotShadowMap: { value: [] },
        spotShadowMatrix: { value: [] },
        pointLights: {
          value: [],
          properties: { color: {}, position: {}, decay: {}, distance: {} },
        },
        pointLightShadows: {
          value: [],
          properties: {
            shadowBias: {},
            shadowNormalBias: {},
            shadowRadius: {},
            shadowMapSize: {},
            shadowCameraNear: {},
            shadowCameraFar: {},
          },
        },
        pointShadowMap: { value: [] },
        pointShadowMatrix: { value: [] },
        hemisphereLights: {
          value: [],
          properties: { direction: {}, skyColor: {}, groundColor: {} },
        },
        rectAreaLights: {
          value: [],
          properties: { color: {}, position: {}, width: {}, height: {} },
        },
        ltc_1: { value: null },
        ltc_2: { value: null },
      },
      points: {
        diffuse: { value: new H(15658734) },
        opacity: { value: 1 },
        size: { value: 1 },
        scale: { value: 1 },
        map: { value: null },
        alphaMap: { value: null },
        uvTransform: { value: new ha() },
      },
      sprite: {
        diffuse: { value: new H(15658734) },
        opacity: { value: 1 },
        center: { value: new B(0.5, 0.5) },
        rotation: { value: 0 },
        map: { value: null },
        alphaMap: { value: null },
        uvTransform: { value: new ha() },
      },
    },
    qb = {
      basic: {
        uniforms: ga([
          N.common,
          N.specularmap,
          N.envmap,
          N.aomap,
          N.lightmap,
          N.fog,
        ]),
        vertexShader: ia.meshbasic_vert,
        fragmentShader: ia.meshbasic_frag,
      },
      lambert: {
        uniforms: ga([
          N.common,
          N.specularmap,
          N.envmap,
          N.aomap,
          N.lightmap,
          N.emissivemap,
          N.fog,
          N.lights,
          { emissive: { value: new H(0) } },
        ]),
        vertexShader: ia.meshlambert_vert,
        fragmentShader: ia.meshlambert_frag,
      },
      phong: {
        uniforms: ga([
          N.common,
          N.specularmap,
          N.envmap,
          N.aomap,
          N.lightmap,
          N.emissivemap,
          N.bumpmap,
          N.normalmap,
          N.displacementmap,
          N.fog,
          N.lights,
          {
            emissive: { value: new H(0) },
            specular: { value: new H(1118481) },
            shininess: { value: 30 },
          },
        ]),
        vertexShader: ia.meshphong_vert,
        fragmentShader: ia.meshphong_frag,
      },
      standard: {
        uniforms: ga([
          N.common,
          N.envmap,
          N.aomap,
          N.lightmap,
          N.emissivemap,
          N.bumpmap,
          N.normalmap,
          N.displacementmap,
          N.roughnessmap,
          N.metalnessmap,
          N.fog,
          N.lights,
          {
            emissive: { value: new H(0) },
            roughness: { value: 1 },
            metalness: { value: 0 },
            envMapIntensity: { value: 1 },
          },
        ]),
        vertexShader: ia.meshphysical_vert,
        fragmentShader: ia.meshphysical_frag,
      },
      toon: {
        uniforms: ga([
          N.common,
          N.aomap,
          N.lightmap,
          N.emissivemap,
          N.bumpmap,
          N.normalmap,
          N.displacementmap,
          N.gradientmap,
          N.fog,
          N.lights,
          { emissive: { value: new H(0) } },
        ]),
        vertexShader: ia.meshtoon_vert,
        fragmentShader: ia.meshtoon_frag,
      },
      matcap: {
        uniforms: ga([
          N.common,
          N.bumpmap,
          N.normalmap,
          N.displacementmap,
          N.fog,
          { matcap: { value: null } },
        ]),
        vertexShader: ia.meshmatcap_vert,
        fragmentShader: ia.meshmatcap_frag,
      },
      points: {
        uniforms: ga([N.points, N.fog]),
        vertexShader: ia.points_vert,
        fragmentShader: ia.points_frag,
      },
      dashed: {
        uniforms: ga([
          N.common,
          N.fog,
          {
            scale: { value: 1 },
            dashSize: { value: 1 },
            totalSize: { value: 2 },
          },
        ]),
        vertexShader: ia.linedashed_vert,
        fragmentShader: ia.linedashed_frag,
      },
      depth: {
        uniforms: ga([N.common, N.displacementmap]),
        vertexShader: ia.depth_vert,
        fragmentShader: ia.depth_frag,
      },
      normal: {
        uniforms: ga([
          N.common,
          N.bumpmap,
          N.normalmap,
          N.displacementmap,
          { opacity: { value: 1 } },
        ]),
        vertexShader: ia.normal_vert,
        fragmentShader: ia.normal_frag,
      },
      sprite: {
        uniforms: ga([N.sprite, N.fog]),
        vertexShader: ia.sprite_vert,
        fragmentShader: ia.sprite_frag,
      },
      background: {
        uniforms: { uvTransform: { value: new ha() }, t2D: { value: null } },
        vertexShader: ia.background_vert,
        fragmentShader: ia.background_frag,
      },
      cube: {
        uniforms: ga([N.envmap, { opacity: { value: 1 } }]),
        vertexShader: ia.cube_vert,
        fragmentShader: ia.cube_frag,
      },
      equirect: {
        uniforms: { tEquirect: { value: null } },
        vertexShader: ia.equirect_vert,
        fragmentShader: ia.equirect_frag,
      },
      distanceRGBA: {
        uniforms: ga([
          N.common,
          N.displacementmap,
          {
            referencePosition: { value: new p() },
            nearDistance: { value: 1 },
            farDistance: { value: 1e3 },
          },
        ]),
        vertexShader: ia.distanceRGBA_vert,
        fragmentShader: ia.distanceRGBA_frag,
      },
      shadow: {
        uniforms: ga([
          N.lights,
          N.fog,
          { color: { value: new H(0) }, opacity: { value: 1 } },
        ]),
        vertexShader: ia.shadow_vert,
        fragmentShader: ia.shadow_frag,
      },
    }
  qb.physical = {
    uniforms: ga([
      qb.standard.uniforms,
      {
        clearcoat: { value: 0 },
        clearcoatMap: { value: null },
        clearcoatRoughness: { value: 0 },
        clearcoatRoughnessMap: { value: null },
        clearcoatNormalScale: { value: new B(1, 1) },
        clearcoatNormalMap: { value: null },
        sheen: { value: new H(0) },
        transmission: { value: 0 },
        transmissionMap: { value: null },
      },
    ]),
    vertexShader: ia.meshphysical_vert,
    fragmentShader: ia.meshphysical_frag,
  }
  Mb.prototype = Object.create(g.prototype)
  Mb.prototype.constructor = Mb
  Mb.prototype.isCubeTexture = !0
  Object.defineProperty(Mb.prototype, 'images', {
    get: function () {
      return this.image
    },
    set: function (a) {
      this.image = a
    },
  })
  Zc.prototype = Object.create(g.prototype)
  Zc.prototype.constructor = Zc
  Zc.prototype.isDataTexture2DArray = !0
  $c.prototype = Object.create(g.prototype)
  $c.prototype.constructor = $c
  $c.prototype.isDataTexture3D = !0
  var Ah = new g(),
    Cj = new Zc(),
    Ej = new $c(),
    Bh = new Mb(),
    uh = [],
    wh = [],
    zh = new Float32Array(16),
    yh = new Float32Array(9),
    xh = new Float32Array(4)
  Ch.prototype.updateCache = function (a) {
    var b = this.cache
    a instanceof Float32Array &&
      b.length !== a.length &&
      (this.cache = new Float32Array(a.length))
    fb(b, a)
  }
  Dh.prototype.setValue = function (a, b, d) {
    for (var e = this.seq, h = 0, f = e.length; h !== f; ++h) {
      var g = e[h]
      g.setValue(a, b[g.id], d)
    }
  }
  var ng = /([\w\d_]+)(\])?(\[|\.)?/g
  ac.prototype.setValue = function (a, b, d, e) {
    b = this.map[b]
    void 0 !== b && b.setValue(a, d, e)
  }
  ac.prototype.setOptional = function (a, b, d) {
    b = b[d]
    void 0 !== b && this.setValue(a, d, b)
  }
  ac.upload = function (a, b, d, e) {
    for (var h = 0, f = b.length; h !== f; ++h) {
      var g = b[h],
        t = d[g.id]
      !1 !== t.needsUpdate && g.setValue(a, t.value, e)
    }
  }
  ac.seqWithValue = function (a, b) {
    for (var d = [], e = 0, h = a.length; e !== h; ++e) {
      var f = a[e]
      f.id in b && d.push(f)
    }
    return d
  }
  var jk = 0,
    pg = /^[ \t]*#include +<([\w\d./]+)>/gm,
    Mh = /#pragma unroll_loop[\s]+?for \( int i \= (\d+)\; i < (\d+)\; i \+\+ \) \{([\s\S]+?)(?=\})\}/g,
    Lh = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g,
    uk = 0
  bc.prototype = Object.create(y.prototype)
  bc.prototype.constructor = bc
  bc.prototype.isnaDepthMaterial = !0
  bc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.depthPacking = a.depthPacking
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.map = a.map
    this.alphaMap = a.alphaMap
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    return this
  }
  cc.prototype = Object.create(y.prototype)
  cc.prototype.constructor = cc
  cc.prototype.isnaDistanceMaterial = !0
  cc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.referencePosition.copy(a.referencePosition)
    this.nearDistance = a.nearDistance
    this.farDistance = a.farDistance
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.map = a.map
    this.alphaMap = a.alphaMap
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    return this
  }
  bf.prototype = Object.assign(Object.create(la.prototype), {
    constructor: bf,
    isArrayCamera: !0,
  })
  dc.prototype = Object.assign(Object.create(n.prototype), {
    constructor: dc,
    isGroup: !0,
  })
  Object.assign(Vd.prototype, {
    constructor: Vd,
    getHandSpace: function () {
      if (
        null === this._hand &&
        ((this._hand = new dc()),
        (this._hand.matrixAutoUpdate = !1),
        (this._hand.visible = !1),
        (this._hand.joints = []),
        (this._hand.inputState = { pinching: !1 }),
        window.XRHand)
      )
        for (var a = 0; a <= window.XRHand.LITTLE_PHALANX_TIP; a++) {
          var b = new dc()
          b.matrixAutoUpdate = !1
          b.visible = !1
          this._hand.joints.push(b)
          this._hand.add(b)
        }
      return this._hand
    },
    getTargetRaySpace: function () {
      null === this._targetRay &&
        ((this._targetRay = new dc()),
        (this._targetRay.matrixAutoUpdate = !1),
        (this._targetRay.visible = !1))
      return this._targetRay
    },
    getGripSpace: function () {
      null === this._grip &&
        ((this._grip = new dc()),
        (this._grip.matrixAutoUpdate = !1),
        (this._grip.visible = !1))
      return this._grip
    },
    dispatchEvent: function (a) {
      null !== this._targetRay && this._targetRay.dispatchEvent(a)
      null !== this._grip && this._grip.dispatchEvent(a)
      null !== this._hand && this._hand.dispatchEvent(a)
      return this
    },
    disconnect: function (a) {
      this.dispatchEvent({ type: 'disconnected', data: a })
      null !== this._targetRay && (this._targetRay.visible = !1)
      null !== this._grip && (this._grip.visible = !1)
      null !== this._hand && (this._hand.visible = !1)
      return this
    },
    update: function (a, b, d) {
      var e = null,
        h = null,
        f = null,
        g = this._targetRay,
        t = this._grip,
        k = this._hand
      if (a)
        if (k && a.hand)
          for (var f = !0, m = 0; m <= window.XRHand.LITTLE_PHALANX_TIP; m++) {
            if (a.hand[m]) {
              var n = b.getJointPose(a.hand[m], d),
                p = k.joints[m]
              null !== n &&
                (p.matrix.fromArray(n.transform.matrix),
                p.matrix.decompose(p.position, p.rotation, p.scale),
                (p.jointRadius = n.radius))
              p.visible = null !== n
              n = k.joints[window.XRHand.INDEX_PHALANX_TIP].position.distanceTo(
                k.joints[window.XRHand.THUMB_PHALANX_TIP].position
              )
              k.inputState.pinching && 0.025 < n
                ? ((k.inputState.pinching = !1),
                  this.dispatchEvent({
                    type: 'pinchend',
                    handedness: a.handedness,
                    target: this,
                  }))
                : !k.inputState.pinching &&
                  0.015 >= n &&
                  ((k.inputState.pinching = !0),
                  this.dispatchEvent({
                    type: 'pinchstart',
                    handedness: a.handedness,
                    target: this,
                  }))
            }
          }
        else
          null !== g &&
            ((e = b.getPose(a.targetRaySpace, d)),
            null !== e &&
              (g.matrix.fromArray(e.transform.matrix),
              g.matrix.decompose(g.position, g.rotation, g.scale))),
            null !== t &&
              a.gripSpace &&
              ((h = b.getPose(a.gripSpace, d)),
              null !== h &&
                (t.matrix.fromArray(h.transform.matrix),
                t.matrix.decompose(t.position, t.rotation, t.scale)))
      null !== g && (g.visible = null !== e)
      null !== t && (t.visible = null !== h)
      null !== k && (k.visible = null !== f)
      return this
    },
  })
  Object.assign(Sh.prototype, m.prototype)
  sg.prototype = Object.assign(Object.create(Wd.prototype), {
    constructor: sg,
    isWebGL1Renderer: !0,
  })
  var Ne = function (a, b) {
    Object.defineProperty(this, 'isFogExp2', { value: !0 })
    this.name = ''
    this.color = new H(a)
    this.density = void 0 !== b ? b : 2.5e-4
  }
  Ne.prototype.clone = function () {
    return new Ne(this.color, this.density)
  }
  Ne.prototype.toJSON = function () {
    return {
      type: 'FogExp2',
      color: this.color.getHex(),
      density: this.density,
    }
  }
  var Oe = function (a, b, d) {
    Object.defineProperty(this, 'isFog', { value: !0 })
    this.name = ''
    this.color = new H(a)
    this.near = void 0 !== b ? b : 1
    this.far = void 0 !== d ? d : 1e3
  }
  Oe.prototype.clone = function () {
    return new Oe(this.color, this.near, this.far)
  }
  Oe.prototype.toJSON = function () {
    return {
      type: 'Fog',
      color: this.color.getHex(),
      near: this.near,
      far: this.far,
    }
  }
  fc.prototype = Object.create(n.prototype)
  fc.prototype.constructor = fc
  fc.prototype.copy = function (a, b) {
    n.prototype.copy.call(this, a, b)
    null !== a.background && (this.background = a.background.clone())
    null !== a.environment && (this.environment = a.environment.clone())
    null !== a.fog && (this.fog = a.fog.clone())
    null !== a.overrideMaterial &&
      (this.overrideMaterial = a.overrideMaterial.clone())
    this.autoUpdate = a.autoUpdate
    this.matrixAutoUpdate = a.matrixAutoUpdate
    return this
  }
  fc.prototype.toJSON = function (a) {
    var b = n.prototype.toJSON.call(this, a)
    null !== this.background &&
      (b.object.background = this.background.toJSON(a))
    null !== this.environment &&
      (b.object.environment = this.environment.toJSON(a))
    null !== this.fog && (b.object.fog = this.fog.toJSON())
    return b
  }
  Object.defineProperty(hb.prototype, 'needsUpdate', {
    set: function (a) {
      !0 === a && this.version++
    },
  })
  Object.assign(hb.prototype, {
    isInterleavedBuffer: !0,
    onUploadCallback: function () {},
    setUsage: function (a) {
      this.usage = a
      return this
    },
    copy: function (a) {
      this.array = new a.array.constructor(a.array)
      this.count = a.count
      this.stride = a.stride
      this.usage = a.usage
      return this
    },
    copyAt: function (a, b, d) {
      a *= this.stride
      d *= b.stride
      for (var e = 0, h = this.stride; e < h; e++)
        this.array[a + e] = b.array[d + e]
      return this
    },
    set: function (a, b) {
      void 0 === b && (b = 0)
      this.array.set(a, b)
      return this
    },
    clone: function (a) {
      void 0 === a.arrayBuffers && (a.arrayBuffers = {})
      void 0 === this.array.buffer._uuid &&
        (this.array.buffer._uuid = ea.generateUUID())
      void 0 === a.arrayBuffers[this.array.buffer._uuid] &&
        (a.arrayBuffers[this.array.buffer._uuid] = this.array.slice(0).buffer)
      a = new this.array.constructor(a.arrayBuffers[this.array.buffer._uuid])
      a = new hb(a, this.stride)
      a.setUsage(this.usage)
      return a
    },
    onUpload: function (a) {
      this.onUploadCallback = a
      return this
    },
    toJSON: function (a) {
      void 0 === a.arrayBuffers && (a.arrayBuffers = {})
      void 0 === this.array.buffer._uuid &&
        (this.array.buffer._uuid = ea.generateUUID())
      void 0 === a.arrayBuffers[this.array.buffer._uuid] &&
        (a.arrayBuffers[this.array.buffer._uuid] = Array.prototype.slice.call(
          new Uint32Array(this.array.buffer)
        ))
      return {
        uuid: this.uuid,
        buffer: this.array.buffer._uuid,
        type: this.array.constructor.name,
        stride: this.stride,
      }
    },
  })
  var Nc = new p()
  Object.defineProperties(gc.prototype, {
    count: {
      get: function () {
        return this.data.count
      },
    },
    array: {
      get: function () {
        return this.data.array
      },
    },
    needsUpdate: {
      set: function (a) {
        this.data.needsUpdate = a
      },
    },
  })
  Object.assign(gc.prototype, {
    isInterleaved_0x3: !0,
    applyMatrix4: function (a) {
      for (var b = 0, d = this.data.count; b < d; b++)
        (Nc.x = this.getX(b)),
          (Nc.y = this.getY(b)),
          (Nc.z = this.getZ(b)),
          Nc.applyMatrix4(a),
          this.setXYZ(b, Nc.x, Nc.y, Nc.z)
      return this
    },
    setX: function (a, b) {
      this.data.array[a * this.data.stride + this.offset] = b
      return this
    },
    setY: function (a, b) {
      this.data.array[a * this.data.stride + this.offset + 1] = b
      return this
    },
    setZ: function (a, b) {
      this.data.array[a * this.data.stride + this.offset + 2] = b
      return this
    },
    setW: function (a, b) {
      this.data.array[a * this.data.stride + this.offset + 3] = b
      return this
    },
    getX: function (a) {
      return this.data.array[a * this.data.stride + this.offset]
    },
    getY: function (a) {
      return this.data.array[a * this.data.stride + this.offset + 1]
    },
    getZ: function (a) {
      return this.data.array[a * this.data.stride + this.offset + 2]
    },
    getW: function (a) {
      return this.data.array[a * this.data.stride + this.offset + 3]
    },
    setXY: function (a, b, d) {
      a = a * this.data.stride + this.offset
      this.data.array[a + 0] = b
      this.data.array[a + 1] = d
      return this
    },
    setXYZ: function (a, b, d, e) {
      a = a * this.data.stride + this.offset
      this.data.array[a + 0] = b
      this.data.array[a + 1] = d
      this.data.array[a + 2] = e
      return this
    },
    setXYZW: function (a, b, d, e, h) {
      a = a * this.data.stride + this.offset
      this.data.array[a + 0] = b
      this.data.array[a + 1] = d
      this.data.array[a + 2] = e
      this.data.array[a + 3] = h
      return this
    },
    clone: function (a) {
      if (void 0 === a) {
        console.log(
          'THREE.Interleaved_0x3.clone(): Cloning an interlaved buffer attribute will deinterleave buffer data.'
        )
        a = []
        for (var b = 0; b < this.count; b++)
          for (
            var d = b * this.data.stride + this.offset, e = 0;
            e < this.itemSize;
            e++
          )
            a.push(this.data.array[d + e])
        return new C(
          new this.array.constructor(a),
          this.itemSize,
          this.normalized
        )
      }
      void 0 === a.interleavedBuffers && (a.interleavedBuffers = {})
      void 0 === a.interleavedBuffers[this.data.uuid] &&
        (a.interleavedBuffers[this.data.uuid] = this.data.clone(a))
      return new gc(
        a.interleavedBuffers[this.data.uuid],
        this.itemSize,
        this.offset,
        this.normalized
      )
    },
    toJSON: function (a) {
      if (void 0 === a) {
        console.log(
          'THREE.Interleaved_0x3.toJSON(): Serializing an interlaved buffer attribute will deinterleave buffer data.'
        )
        a = []
        for (var b = 0; b < this.count; b++)
          for (
            var d = b * this.data.stride + this.offset, e = 0;
            e < this.itemSize;
            e++
          )
            a.push(this.data.array[d + e])
        return {
          itemSize: this.itemSize,
          type: this.array.constructor.name,
          array: a,
          normalized: this.normalized,
        }
      }
      void 0 === a.interleavedBuffers && (a.interleavedBuffers = {})
      void 0 === a.interleavedBuffers[this.data.uuid] &&
        (a.interleavedBuffers[this.data.uuid] = this.data.toJSON(a))
      return {
        isInterleaved_0x3: !0,
        itemSize: this.itemSize,
        data: this.data.uuid,
        offset: this.offset,
        normalized: this.normalized,
      }
    },
  })
  hc.prototype = Object.create(y.prototype)
  hc.prototype.constructor = hc
  hc.prototype.isSpriteMaterial = !0
  hc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.map = a.map
    this.alphaMap = a.alphaMap
    this.rotation = a.rotation
    this.sizeAttenuation = a.sizeAttenuation
    return this
  }
  var bd,
    Pe = new p(),
    Nd = new p(),
    Od = new p(),
    cd = new B(),
    Yd = new B(),
    Uh = new O(),
    Tf = new p(),
    Qe = new p(),
    Uf = new p(),
    yi = new B(),
    kh = new B(),
    zi = new B()
  Xd.prototype = Object.assign(Object.create(n.prototype), {
    constructor: Xd,
    isSprite: !0,
    raycast: function (a, b) {
      null === a.camera &&
        console.error(
          'THREE.Sprite: "rct.camera" needs to be set in order to raycast against sprites.'
        )
      Nd.setFromMatrixScale(this.matrixWorld)
      Uh.copy(a.camera.matrixWorld)
      this.modelViewMatrix.multiplyMatrices(
        a.camera.matrixWorldInverse,
        this.matrixWorld
      )
      Od.setFromMatrixPosition(this.modelViewMatrix)
      a.camera.isq4 &&
        !1 === this.material.sizeAttenuation &&
        Nd.multiplyScalar(-Od.z)
      var d = this.material.rotation,
        e,
        h
      0 !== d && ((h = Math.cos(d)), (e = Math.sin(d)))
      d = this.center
      cf(Tf.set(-0.5, -0.5, 0), Od, d, Nd, e, h)
      cf(Qe.set(0.5, -0.5, 0), Od, d, Nd, e, h)
      cf(Uf.set(0.5, 0.5, 0), Od, d, Nd, e, h)
      yi.set(0, 0)
      kh.set(1, 0)
      zi.set(1, 1)
      var f = a.ray.intersectTriangle(Tf, Qe, Uf, !1, Pe)
      if (
        null === f &&
        (cf(Qe.set(-0.5, 0.5, 0), Od, d, Nd, e, h),
        kh.set(0, 1),
        (f = a.ray.intersectTriangle(Tf, Uf, Qe, !1, Pe)),
        null === f)
      )
        return
      e = a.ray.origin.distanceTo(Pe)
      e < a.near ||
        e > a.far ||
        b.push({
          distance: e,
          point: Pe.clone(),
          uv: fa.getUV(Pe, Tf, Qe, Uf, yi, kh, zi, new B()),
          face: null,
          object: this,
        })
    },
    copy: function (a) {
      n.prototype.copy.call(this, a)
      void 0 !== a.center && this.center.copy(a.center)
      this.material = a.material
      return this
    },
  })
  var Vf = new p(),
    Ai = new p()
  Zd.prototype = Object.assign(Object.create(n.prototype), {
    constructor: Zd,
    isLOD: !0,
    copy: function (a) {
      n.prototype.copy.call(this, a, !1)
      for (var b = a.levels, d = 0, e = b.length; d < e; d++) {
        var h = b[d]
        this.addLevel(h.object.clone(), h.distance)
      }
      this.autoUpdate = a.autoUpdate
      return this
    },
    addLevel: function (a, b) {
      void 0 === b && (b = 0)
      b = Math.abs(b)
      var d = this.levels,
        e
      for (e = 0; e < d.length && !(b < d[e].distance); e++);
      d.splice(e, 0, { distance: b, object: a })
      this.add(a)
      return this
    },
    getCurrentLevel: function () {
      return this._currentLevel
    },
    getObjectForDistance: function (a) {
      var b = this.levels
      if (0 < b.length) {
        var d, e
        d = 1
        for (e = b.length; d < e && !(a < b[d].distance); d++);
        return b[d - 1].object
      }
      return null
    },
    raycast: function (a, b) {
      if (0 < this.levels.length) {
        Vf.setFromMatrixPosition(this.matrixWorld)
        var d = a.ray.origin.distanceTo(Vf)
        this.getObjectForDistance(d).raycast(a, b)
      }
    },
    update: function (a) {
      var b = this.levels
      if (1 < b.length) {
        Vf.setFromMatrixPosition(a.matrixWorld)
        Ai.setFromMatrixPosition(this.matrixWorld)
        a = Vf.distanceTo(Ai) / a.zoom
        b[0].object.visible = !0
        var d, e
        d = 1
        for (e = b.length; d < e; d++)
          if (a >= b[d].distance)
            (b[d - 1].object.visible = !1), (b[d].object.visible = !0)
          else break
        for (this._currentLevel = d - 1; d < e; d++) b[d].object.visible = !1
      }
    },
    toJSON: function (a) {
      a = n.prototype.toJSON.call(this, a)
      !1 === this.autoUpdate && (a.object.autoUpdate = !1)
      a.object.levels = []
      for (var b = this.levels, d = 0, e = b.length; d < e; d++) {
        var h = b[d]
        a.object.levels.push({ object: h.object.uuid, distance: h.distance })
      }
      return a
    },
  })
  df.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: df,
    isSkinnedna: !0,
    copy: function (a) {
      ca.prototype.copy.call(this, a)
      this.bindMode = a.bindMode
      this.bindMatrix.copy(a.bindMatrix)
      this.bindMatrixInverse.copy(a.bindMatrixInverse)
      this.skeleton = a.skeleton
      return this
    },
    bind: function (a, b) {
      this.skeleton = a
      void 0 === b &&
        (this.updateMatrixWorld(!0),
        this.skeleton.calculateInverses(),
        (b = this.matrixWorld))
      this.bindMatrix.copy(b)
      this.bindMatrixInverse.getInverse(b)
    },
    pose: function () {
      this.skeleton.pose()
    },
    normalizeSkinWeights: function () {
      for (
        var a = new P(),
          b = this.geometry.attributes.skinWeight,
          d = 0,
          e = b.count;
        d < e;
        d++
      ) {
        a.x = b.getX(d)
        a.y = b.getY(d)
        a.z = b.getZ(d)
        a.w = b.getW(d)
        var h = 1 / a.manhattanLength()
        Infinity !== h ? a.multiplyScalar(h) : a.set(1, 0, 0, 0)
        b.setXYZW(d, a.x, a.y, a.z, a.w)
      }
    },
    updateMatrixWorld: function (a) {
      ca.prototype.updateMatrixWorld.call(this, a)
      'attached' === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.matrixWorld)
        : 'detached' === this.bindMode
        ? this.bindMatrixInverse.getInverse(this.bindMatrix)
        : console.warn(
            'THREE.Skinnedna: Unrecognized bindMode: ' + this.bindMode
          )
    },
    boneTransform: (function () {
      var a = new p(),
        b = new P(),
        d = new P(),
        e = new p(),
        h = new O()
      return function (f, g) {
        var l = this.skeleton,
          q = this.geometry
        b.from_0x3(q.attributes.skinIndex, f)
        d.from_0x3(q.attributes.skinWeight, f)
        a.from_0x3(q.attributes.position, f).applyMatrix4(this.bindMatrix)
        g.set(0, 0, 0)
        for (q = 0; 4 > q; q++) {
          var k = d.getComponent(q)
          if (0 !== k) {
            var m = b.getComponent(q)
            h.multiplyMatrices(l.bones[m].matrixWorld, l.boneInverses[m])
            g.addScaledVector(e.copy(a).applyMatrix4(h), k)
          }
        }
        return g.applyMatrix4(this.bindMatrixInverse)
      }
    })(),
  })
  var Bi = new O(),
    Pk = new O()
  Object.assign(ef.prototype, {
    calculateInverses: function () {
      this.boneInverses = []
      for (var a = 0, b = this.bones.length; a < b; a++) {
        var d = new O()
        this.bones[a] && d.getInverse(this.bones[a].matrixWorld)
        this.boneInverses.push(d)
      }
    },
    pose: function () {
      for (var a = 0, b = this.bones.length; a < b; a++) {
        var d = this.bones[a]
        d && d.matrixWorld.getInverse(this.boneInverses[a])
      }
      a = 0
      for (b = this.bones.length; a < b; a++)
        if ((d = this.bones[a]))
          d.parent && d.parent.isBone
            ? (d.matrix.getInverse(d.parent.matrixWorld),
              d.matrix.multiply(d.matrixWorld))
            : d.matrix.copy(d.matrixWorld),
            d.matrix.decompose(d.position, d.quaternion, d.scale)
    },
    update: function () {
      for (
        var a = this.bones,
          b = this.boneInverses,
          d = this.boneMatrices,
          e = this.boneTexture,
          h = 0,
          f = a.length;
        h < f;
        h++
      )
        Bi.multiplyMatrices(a[h] ? a[h].matrixWorld : Pk, b[h]),
          Bi.toArray(d, 16 * h)
      void 0 !== e && (e.needsUpdate = !0)
    },
    clone: function () {
      return new ef(this.bones, this.boneInverses)
    },
    getBoneByName: function (a) {
      for (var b = 0, d = this.bones.length; b < d; b++) {
        var e = this.bones[b]
        if (e.name === a) return e
      }
    },
    dispose: function () {
      this.boneTexture &&
        (this.boneTexture.dispose(), (this.boneTexture = void 0))
    },
  })
  tg.prototype = Object.assign(Object.create(n.prototype), {
    constructor: tg,
    isBone: !0,
  })
  var Ci = new O(),
    Di = new O(),
    Wf = [],
    Re = new ca(),
    Qk = new H(16777215),
    Rk = new O().set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)
  $d.prototype = Object.assign(Object.create(ca.prototype), {
    constructor: $d,
    isInstancedna: !0,
    copy: function (a) {
      ca.prototype.copy.call(this, a)
      this.instanceMatrix.copy(a.instanceMatrix)
      this.count = a.count
      return this
    },
    setColorAt: function (a, b) {
      null === this.instanceColor &&
        (this.instanceColor = new C(new Float32Array(3 * this.count), 3))
      null == b
        ? Qk.toArray(this.instanceColor.array, 3 * a)
        : b.toArray(this.instanceColor.array, 3 * a)
    },
    _010: function (a, b, d) {
      if (null == this.selectna && null == this.mainna) {
        this.selectna = new $d(this.geometry, this.material, this.count)
        this.selectna.instanceMatrix = this.instanceMatrix.clone()
        for (
          var e = this.selectna.material.length, h = 0;
          h < this.selectna.count;
          h++
        )
          this.selectna._013(h, !1)
        this.selectna.material = []
        for (h = 0; h < e; h++) this.selectna.material.push(b)
        d.add(this.selectna)
        this.selectna.mainna = this
      }
      this.selectna
        ? (this.selectna._013(a, !0), this._013(a, !1))
        : this.mainna && (this._013(a, !0), this.mainna._013(a, !1))
    },
    _011: function (a) {
      this.selectna
        ? (this.selectna._013(a, !1), this._013(a, !0))
        : this.mainna && (this._013(a, !1), this.mainna._013(a, !0))
    },
    _013: function (a, b) {
      null === this.instanceHide_qmodel &&
        (this.instanceHide_qmodel = new Map())
      if (b) {
        var d = this.instanceHide_qmodel.get(a)
        if (null == d) return
        this.instanceHide_qmodel['delete'](a)
        this.setMatrixAt(a, d)
        this.visible = !0
      } else {
        d = this.instanceHide_qmodel.get(a)
        if (null != d) return
        d = new O()
        this.getMatrixAt(a, d)
        this.instanceHide_qmodel.set(a, d)
        this.setMatrixAt(a, Rk)
        this.visible = this.instanceHide_qmodel.size < this.count
      }
      this.instanceMatrix.needsUpdate = !0
    },
    getMatrixAt_qmodel: function (a) {
      var b = new THREE.Matrix4(),
        b = this.instanceHide_qmodel ? this.instanceHide_qmodel.get(a) : b
      null == b && this.getMatrixAt(a, b)
      return b
    },
    getMatrixAt: function (a, b) {
      b.fromArray(this.instanceMatrix.array, 16 * a)
    },
    raycast: function (a, b) {
      var d = this.matrixWorld,
        e = this.count
      Re.geometry = this.geometry
      Re.material = this.material
      if (void 0 !== Re.material)
        for (var h = 0; h < e; h++) {
          this.getMatrixAt(h, Ci)
          Di.multiplyMatrices(d, Ci)
          Re.matrixWorld = Di
          Re.raycast(a, Wf)
          for (var f = 0, g = Wf.length; f < g; f++) {
            var k = Wf[f]
            k.instanceId = h
            k.object = this
            b.push(k)
          }
          Wf.length = 0
        }
    },
    setMatrixAt: function (a, b) {
      b.toArray(this.instanceMatrix.array, 16 * a)
    },
    updateMorphTargets: function () {},
  })
  ma.prototype = Object.create(y.prototype)
  ma.prototype.constructor = ma
  ma.prototype.isb3 = !0
  ma.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.linewidth = a.linewidth
    this.linecap = a.linecap
    this.linejoin = a.linejoin
    this.morphTargets = a.morphTargets
    return this
  }
  var Ei = new p(),
    Fi = new p(),
    Gi = new O(),
    Xf = new pa(),
    Se = new ta()
  ab.prototype = Object.assign(Object.create(n.prototype), {
    constructor: ab,
    isLine: !0,
    copy: function (a) {
      n.prototype.copy.call(this, a)
      this.material = a.material
      this.geometry = a.geometry
      return this
    },
    computeLineDistances: function () {
      var a = this.geometry
      if (a.is_0x2)
        if (null === a.index) {
          for (
            var b = a.attributes.position, d = [0], e = 1, h = b.count;
            e < h;
            e++
          )
            Ei.from_0x3(b, e - 1),
              Fi.from_0x3(b, e),
              (d[e] = d[e - 1]),
              (d[e] += Ei.distanceTo(Fi))
          a.setAttribute('lineDistance', new E(d, 1))
        } else
          console.warn(
            'THREE.Line.computeLineDistances(): Computation only possible with non-indexed _0x2.'
          )
      else if (a.is_0x6)
        for (
          b = a.vertices, a = a.lineDistances, a[0] = 0, d = 1, e = b.length;
          d < e;
          d++
        )
          (a[d] = a[d - 1]), (a[d] += b[d - 1].distanceTo(b[d]))
      return this
    },
    raycast: function (a, b) {
      var d = this.geometry,
        e = this.matrixWorld,
        h = a.params.Line.threshold
      null === d.boundingSphere && d.computeBoundingSphere()
      Se.copy(d.boundingSphere)
      Se.applyMatrix4(e)
      Se.radius += h
      if (!1 !== a.ray.intersectsSphere(Se)) {
        Gi.getInverse(e)
        Xf.copy(a.ray).applyMatrix4(Gi)
        var e = h / ((this.scale.x + this.scale.y + this.scale.z) / 3),
          e = e * e,
          f = new p(),
          g = new p(),
          h = new p(),
          k = new p(),
          m = this && this.isb2 ? 2 : 1
        if (d.is_0x2) {
          var n = d.index,
            d = d.attributes.position.array
          if (null !== n)
            for (var n = n.array, r = 0, u = n.length - 1; r < u; r += m) {
              var w = n[r + 1]
              f.fromArray(d, 3 * n[r])
              g.fromArray(d, 3 * w)
              Xf.distanceSqToSegment(f, g, k, h) > e ||
                (k.applyMatrix4(this.matrixWorld),
                (w = a.ray.origin.distanceTo(k)),
                w < a.near ||
                  w > a.far ||
                  b.push({
                    distance: w,
                    point: h.clone().applyMatrix4(this.matrixWorld),
                    index: r,
                    face: null,
                    faceIndex: null,
                    object: this,
                  }))
            }
          else
            for (n = 0, r = d.length / 3 - 1; n < r; n += m)
              f.fromArray(d, 3 * n),
                g.fromArray(d, 3 * n + 3),
                Xf.distanceSqToSegment(f, g, k, h) > e ||
                  (k.applyMatrix4(this.matrixWorld),
                  (u = a.ray.origin.distanceTo(k)),
                  u < a.near ||
                    u > a.far ||
                    b.push({
                      distance: u,
                      point: h.clone().applyMatrix4(this.matrixWorld),
                      index: n,
                      face: null,
                      faceIndex: null,
                      object: this,
                    }))
        } else if (d.is_0x6)
          for (f = d.vertices, g = f.length, d = 0; d < g - 1; d += m)
            Xf.distanceSqToSegment(f[d], f[d + 1], k, h) > e ||
              (k.applyMatrix4(this.matrixWorld),
              (n = a.ray.origin.distanceTo(k)),
              n < a.near ||
                n > a.far ||
                b.push({
                  distance: n,
                  point: h.clone().applyMatrix4(this.matrixWorld),
                  index: d,
                  face: null,
                  faceIndex: null,
                  object: this,
                }))
      }
    },
    updateMorphTargets: function () {
      var a = this.geometry
      if (a.is_0x2) {
        var a = a.morphAttributes,
          b = Object.keys(a)
        if (0 < b.length && ((a = a[b[0]]), void 0 !== a)) {
          this.morphTargetInfluences = []
          this.morphTargetDictionary = {}
          for (var b = 0, d = a.length; b < d; b++) {
            var e = a[b].name || String(b)
            this.morphTargetInfluences.push(0)
            this.morphTargetDictionary[e] = b
          }
        }
      } else
        (a = a.morphTargets),
          void 0 !== a &&
            0 < a.length &&
            console.error(
              'THREE.Line.updateMorphTargets() does not support THREE._0x6. Use THREE._0x2 instead.'
            )
    },
  })
  var Yf = new p(),
    Zf = new p()
  qa.prototype = Object.assign(Object.create(ab.prototype), {
    constructor: qa,
    isb2: !0,
    computeLineDistances: function () {
      var a = this.geometry
      if (a.is_0x2)
        if (null === a.index) {
          for (
            var b = a.attributes.position, d = [], e = 0, h = b.count;
            e < h;
            e += 2
          )
            Yf.from_0x3(b, e),
              Zf.from_0x3(b, e + 1),
              (d[e] = 0 === e ? 0 : d[e - 1]),
              (d[e + 1] = d[e] + Yf.distanceTo(Zf))
          a.setAttribute('lineDistance', new E(d, 1))
        } else
          console.warn(
            'THREE.b2.computeLineDistances(): Computation only possible with non-indexed _0x2.'
          )
      else if (a.is_0x6)
        for (
          b = a.vertices, a = a.lineDistances, d = 0, e = b.length;
          d < e;
          d += 2
        )
          Yf.copy(b[d]),
            Zf.copy(b[d + 1]),
            (a[d] = 0 === d ? 0 : a[d - 1]),
            (a[d + 1] = a[d] + Yf.distanceTo(Zf))
      return this
    },
  })
  ff.prototype = Object.assign(Object.create(ab.prototype), {
    constructor: ff,
    isLineLoop: !0,
  })
  rb.prototype = Object.create(y.prototype)
  rb.prototype.constructor = rb
  rb.prototype.isPointsMaterial = !0
  rb.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.map = a.map
    this.alphaMap = a.alphaMap
    this.size = a.size
    this.sizeAttenuation = a.sizeAttenuation
    this.morphTargets = a.morphTargets
    return this
  }
  var Hi = new O(),
    vg = new pa(),
    Te = new ta(),
    $f = new p()
  dd.prototype = Object.assign(Object.create(n.prototype), {
    constructor: dd,
    isPoints: !0,
    copy: function (a) {
      n.prototype.copy.call(this, a)
      this.material = a.material
      this.geometry = a.geometry
      return this
    },
    raycast: function (a, b) {
      var d = this.geometry,
        e = this.matrixWorld,
        h = a.params.Points.threshold
      null === d.boundingSphere && d.computeBoundingSphere()
      Te.copy(d.boundingSphere)
      Te.applyMatrix4(e)
      Te.radius += h
      if (!1 !== a.ray.intersectsSphere(Te))
        if (
          (Hi.getInverse(e),
          vg.copy(a.ray).applyMatrix4(Hi),
          (h /= (this.scale.x + this.scale.y + this.scale.z) / 3),
          (h *= h),
          d.is_0x2)
        ) {
          var f = d.index,
            d = d.attributes.position.array
          if (null !== f)
            for (var f = f.array, g = 0, k = f.length; g < k; g++) {
              var m = f[g]
              $f.fromArray(d, 3 * m)
              ug($f, m, h, e, a, b, this)
            }
          else
            for (f = 0, g = d.length / 3; f < g; f++)
              $f.fromArray(d, 3 * f), ug($f, f, h, e, a, b, this)
        } else
          for (d = d.vertices, f = 0, g = d.length; f < g; f++)
            ug(d[f], f, h, e, a, b, this)
    },
    updateMorphTargets: function () {
      var a = this.geometry
      if (a.is_0x2) {
        var a = a.morphAttributes,
          b = Object.keys(a)
        if (0 < b.length && ((a = a[b[0]]), void 0 !== a)) {
          this.morphTargetInfluences = []
          this.morphTargetDictionary = {}
          for (var b = 0, d = a.length; b < d; b++) {
            var e = a[b].name || String(b)
            this.morphTargetInfluences.push(0)
            this.morphTargetDictionary[e] = b
          }
        }
      } else
        (a = a.morphTargets),
          void 0 !== a &&
            0 < a.length &&
            console.error(
              'THREE.Points.updateMorphTargets() does not support THREE._0x6. Use THREE._0x2 instead.'
            )
    },
  })
  wg.prototype = Object.assign(Object.create(g.prototype), {
    constructor: wg,
    isVideoTexture: !0,
    update: function () {
      var a = this.image
      !1 === 'requestVideoFrameCallback' in a &&
        a.readyState >= a.HAVE_CURRENT_DATA &&
        (this.needsUpdate = !0)
    },
  })
  ed.prototype = Object.create(g.prototype)
  ed.prototype.constructor = ed
  ed.prototype.isCompressedTexture = !0
  ae.prototype = Object.create(g.prototype)
  ae.prototype.constructor = ae
  ae.prototype.isCanvasTexture = !0
  be.prototype = Object.create(g.prototype)
  be.prototype.constructor = be
  be.prototype.isDepthTexture = !0
  fd.prototype = Object.create(I.prototype)
  fd.prototype.constructor = fd
  ce.prototype = Object.create(V.prototype)
  ce.prototype.constructor = ce
  gd.prototype = Object.create(I.prototype)
  gd.prototype.constructor = gd
  de.prototype = Object.create(V.prototype)
  de.prototype.constructor = de
  bb.prototype = Object.create(I.prototype)
  bb.prototype.constructor = bb
  ee.prototype = Object.create(V.prototype)
  ee.prototype.constructor = ee
  hd.prototype = Object.create(bb.prototype)
  hd.prototype.constructor = hd
  fe.prototype = Object.create(V.prototype)
  fe.prototype.constructor = fe
  yc.prototype = Object.create(bb.prototype)
  yc.prototype.constructor = yc
  ge.prototype = Object.create(V.prototype)
  ge.prototype.constructor = ge
  id.prototype = Object.create(bb.prototype)
  id.prototype.constructor = id
  he.prototype = Object.create(V.prototype)
  he.prototype.constructor = he
  jd.prototype = Object.create(bb.prototype)
  jd.prototype.constructor = jd
  ie.prototype = Object.create(V.prototype)
  ie.prototype.constructor = ie
  zc.prototype = Object.create(I.prototype)
  zc.prototype.constructor = zc
  zc.prototype.toJSON = function () {
    var a = I.prototype.toJSON.call(this)
    a.path = this.parameters.path.toJSON()
    return a
  }
  je.prototype = Object.create(V.prototype)
  je.prototype.constructor = je
  kd.prototype = Object.create(I.prototype)
  kd.prototype.constructor = kd
  ke.prototype = Object.create(V.prototype)
  ke.prototype.constructor = ke
  ld.prototype = Object.create(I.prototype)
  ld.prototype.constructor = ld
  var Sk = {
      triangulate: function (a, b, d) {
        d = d || 2
        var e = b && b.length,
          h = e ? b[0] * d : a.length,
          f = Vh(a, 0, h, d, !0),
          g = []
        if (!f || f.next === f.prev) return g
        var k, m, n, p
        if (e) {
          var r = d,
            e = [],
            u,
            w,
            v
          p = 0
          for (u = b.length; p < u; p++)
            (w = b[p] * r),
              (v = p < u - 1 ? b[p + 1] * r : a.length),
              (w = Vh(a, w, v, r, !1)),
              w === w.next && (w.steiner = !0),
              e.push(Ck(w))
          e.sort(Ak)
          for (p = 0; p < e.length; p++) {
            r = e[p]
            b = f
            if ((b = Bk(r, b))) (r = Yh(b, r)), ic(b, b.next), ic(r, r.next)
            f = ic(f, f.next)
          }
        }
        if (a.length > 80 * d) {
          k = n = a[0]
          m = e = a[1]
          for (r = d; r < h; r += d)
            (p = a[r]),
              (b = a[r + 1]),
              p < k && (k = p),
              b < m && (m = b),
              p > n && (n = p),
              b > e && (e = b)
          n = Math.max(n - k, e - m)
          n = 0 !== n ? 1 / n : 0
        }
        me(f, g, d, k, m, n)
        return g
      },
    },
    Nb = {
      area: function (a) {
        for (var b = a.length, d = 0, e = b - 1, h = 0; h < b; e = h++)
          d += a[e].x * a[h].y - a[h].x * a[e].y
        return 0.5 * d
      },
      isClockWise: function (a) {
        return 0 > Nb.area(a)
      },
      triangulateShape: function (a, b) {
        var d = [],
          e = [],
          h = []
        Zh(a)
        $h(d, a)
        var f = a.length
        b.forEach(Zh)
        for (var g = 0; g < b.length; g++)
          e.push(f), (f += b[g].length), $h(d, b[g])
        d = Sk.triangulate(d, e)
        for (e = 0; e < d.length; e += 3) h.push(d.slice(e, e + 3))
        return h
      },
    }
  Ac.prototype = Object.create(V.prototype)
  Ac.prototype.constructor = Ac
  Ac.prototype.toJSON = function () {
    var a = V.prototype.toJSON.call(this)
    return ai(this.parameters.shapes, this.parameters.options, a)
  }
  Bb.prototype = Object.create(I.prototype)
  Bb.prototype.constructor = Bb
  Bb.prototype.toJSON = function () {
    var a = I.prototype.toJSON.call(this)
    return ai(this.parameters.shapes, this.parameters.options, a)
  }
  var Dk = {
    generateTopUV: function (a, b, d, e, h) {
      a = b[3 * e]
      e = b[3 * e + 1]
      var f = b[3 * h]
      h = b[3 * h + 1]
      return [new B(b[3 * d], b[3 * d + 1]), new B(a, e), new B(f, h)]
    },
    generateSideWallUV: function (a, b, d, e, h, f) {
      a = b[3 * d]
      var l = b[3 * d + 1]
      d = b[3 * d + 2]
      var g = b[3 * e],
        k = b[3 * e + 1]
      e = b[3 * e + 2]
      var m = b[3 * h],
        n = b[3 * h + 1]
      h = b[3 * h + 2]
      var p = b[3 * f],
        r = b[3 * f + 1]
      b = b[3 * f + 2]
      return 0.01 > Math.abs(l - k)
        ? [new B(a, 1 - d), new B(g, 1 - e), new B(m, 1 - h), new B(p, 1 - b)]
        : [new B(l, 1 - d), new B(k, 1 - e), new B(n, 1 - h), new B(r, 1 - b)]
    },
  }
  oe.prototype = Object.create(V.prototype)
  oe.prototype.constructor = oe
  nd.prototype = Object.create(Bb.prototype)
  nd.prototype.constructor = nd
  pe.prototype = Object.create(V.prototype)
  pe.prototype.constructor = pe
  Bc.prototype = Object.create(I.prototype)
  Bc.prototype.constructor = Bc
  qe.prototype = Object.create(V.prototype)
  qe.prototype.constructor = qe
  od.prototype = Object.create(I.prototype)
  od.prototype.constructor = od
  re.prototype = Object.create(V.prototype)
  re.prototype.constructor = re
  pd.prototype = Object.create(I.prototype)
  pd.prototype.constructor = pd
  Cc.prototype = Object.create(V.prototype)
  Cc.prototype.constructor = Cc
  Cc.prototype.toJSON = function () {
    var a = V.prototype.toJSON.call(this)
    return bi(this.parameters.shapes, a)
  }
  Dc.prototype = Object.create(I.prototype)
  Dc.prototype.constructor = Dc
  Dc.prototype.toJSON = function () {
    var a = I.prototype.toJSON.call(this)
    return bi(this.parameters.shapes, a)
  }
  qd.prototype = Object.create(I.prototype)
  qd.prototype.constructor = qd
  Ec.prototype = Object.create(V.prototype)
  Ec.prototype.constructor = Ec
  Ob.prototype = Object.create(I.prototype)
  Ob.prototype.constructor = Ob
  se.prototype = Object.create(Ec.prototype)
  se.prototype.constructor = se
  te.prototype = Object.create(Ob.prototype)
  te.prototype.constructor = te
  ue.prototype = Object.create(V.prototype)
  ue.prototype.constructor = ue
  rd.prototype = Object.create(I.prototype)
  rd.prototype.constructor = rd
  var Ya = Object.freeze({
    __proto__: null,
    Wireframe_0x6: fd,
    Parametric_0x6: ce,
    Parametric_0x2: gd,
    Tetrahedron_0x6: ee,
    Tetrahedron_0x2: hd,
    Octahedron_0x6: fe,
    Octahedron_0x2: yc,
    Icosahedron_0x6: ge,
    Icosahedron_0x2: id,
    Dodecahedron_0x6: he,
    Dodecahedron_0x2: jd,
    Polyhedron_0x6: de,
    Polyhedron_0x2: bb,
    Tube_0x6: ie,
    Tube_0x2: zc,
    TorusKnot_0x6: je,
    TorusKnot_0x2: kd,
    Torus_0x6: ke,
    Torus_0x2: ld,
    Text_0x6: oe,
    Text_0x2: nd,
    Sphere_0x6: pe,
    Sphere_0x2: Bc,
    Ring_0x6: qe,
    Ring_0x2: od,
    pl_0x6: Lb,
    pl_0x2: Qa,
    Lathe_0x6: re,
    Lathe_0x2: pd,
    Shape_0x6: Cc,
    Shape_0x2: Dc,
    Extrude_0x6: Ac,
    Extrude_0x2: Bb,
    Edges_0x6: qd,
    Cone_0x6: se,
    Cone_0x2: te,
    Cylinder_0x6: Ec,
    Cylinder_0x2: Ob,
    Circle_0x6: ue,
    Circle_0x2: rd,
    Box_0x6: Ka,
    Box_0x2: Ha,
  })
  Fc.prototype = Object.create(y.prototype)
  Fc.prototype.constructor = Fc
  Fc.prototype.isShadowMaterial = !0
  Fc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    return this
  }
  Pb.prototype = Object.create(wa.prototype)
  Pb.prototype.constructor = Pb
  Pb.prototype.isRawShaderMaterial = !0
  Cb.prototype = Object.create(y.prototype)
  Cb.prototype.constructor = Cb
  Cb.prototype.isnaStandardMaterial = !0
  Cb.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.defines = { STANDARD: '' }
    this.color.copy(a.color)
    this.roughness = a.roughness
    this.metalness = a.metalness
    this.map = a.map
    this.lightMap = a.lightMap
    this.lightMapIntensity = a.lightMapIntensity
    this.aoMap = a.aoMap
    this.aoMapIntensity = a.aoMapIntensity
    this.emissive.copy(a.emissive)
    this.emissiveMap = a.emissiveMap
    this.emissiveIntensity = a.emissiveIntensity
    this.bumpMap = a.bumpMap
    this.bumpScale = a.bumpScale
    this.normalMap = a.normalMap
    this.normalMapType = a.normalMapType
    this.normalScale.copy(a.normalScale)
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.roughnessMap = a.roughnessMap
    this.metalnessMap = a.metalnessMap
    this.alphaMap = a.alphaMap
    this.envMap = a.envMap
    this.envMapIntensity = a.envMapIntensity
    this.refractionRatio = a.refractionRatio
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.wireframeLinecap = a.wireframeLinecap
    this.wireframeLinejoin = a.wireframeLinejoin
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    this.vertexTangents = a.vertexTangents
    return this
  }
  jc.prototype = Object.create(Cb.prototype)
  jc.prototype.constructor = jc
  jc.prototype.isnaPhysicalMaterial = !0
  jc.prototype.copy = function (a) {
    Cb.prototype.copy.call(this, a)
    this.defines = { STANDARD: '', PHYSICAL: '' }
    this.clearcoat = a.clearcoat
    this.clearcoatMap = a.clearcoatMap
    this.clearcoatRoughness = a.clearcoatRoughness
    this.clearcoatRoughnessMap = a.clearcoatRoughnessMap
    this.clearcoatNormalMap = a.clearcoatNormalMap
    this.clearcoatNormalScale.copy(a.clearcoatNormalScale)
    this.reflectivity = a.reflectivity
    this.sheen = a.sheen ? (this.sheen || new H()).copy(a.sheen) : null
    this.transmission = a.transmission
    this.transmissionMap = a.transmissionMap
    return this
  }
  kc.prototype = Object.create(y.prototype)
  kc.prototype.constructor = kc
  kc.prototype.isnaPhongMaterial = !0
  kc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.specular.copy(a.specular)
    this.shininess = a.shininess
    this.map = a.map
    this.lightMap = a.lightMap
    this.lightMapIntensity = a.lightMapIntensity
    this.aoMap = a.aoMap
    this.aoMapIntensity = a.aoMapIntensity
    this.emissive.copy(a.emissive)
    this.emissiveMap = a.emissiveMap
    this.emissiveIntensity = a.emissiveIntensity
    this.bumpMap = a.bumpMap
    this.bumpScale = a.bumpScale
    this.normalMap = a.normalMap
    this.normalMapType = a.normalMapType
    this.normalScale.copy(a.normalScale)
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.specularMap = a.specularMap
    this.alphaMap = a.alphaMap
    this.envMap = a.envMap
    this.combine = a.combine
    this.reflectivity = a.reflectivity
    this.refractionRatio = a.refractionRatio
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.wireframeLinecap = a.wireframeLinecap
    this.wireframeLinejoin = a.wireframeLinejoin
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    return this
  }
  Gc.prototype = Object.create(y.prototype)
  Gc.prototype.constructor = Gc
  Gc.prototype.isnaToonMaterial = !0
  Gc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.map = a.map
    this.gradientMap = a.gradientMap
    this.lightMap = a.lightMap
    this.lightMapIntensity = a.lightMapIntensity
    this.aoMap = a.aoMap
    this.aoMapIntensity = a.aoMapIntensity
    this.emissive.copy(a.emissive)
    this.emissiveMap = a.emissiveMap
    this.emissiveIntensity = a.emissiveIntensity
    this.bumpMap = a.bumpMap
    this.bumpScale = a.bumpScale
    this.normalMap = a.normalMap
    this.normalMapType = a.normalMapType
    this.normalScale.copy(a.normalScale)
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.alphaMap = a.alphaMap
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.wireframeLinecap = a.wireframeLinecap
    this.wireframeLinejoin = a.wireframeLinejoin
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    return this
  }
  Hc.prototype = Object.create(y.prototype)
  Hc.prototype.constructor = Hc
  Hc.prototype.isnaNormalMaterial = !0
  Hc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.bumpMap = a.bumpMap
    this.bumpScale = a.bumpScale
    this.normalMap = a.normalMap
    this.normalMapType = a.normalMapType
    this.normalScale.copy(a.normalScale)
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    return this
  }
  Ic.prototype = Object.create(y.prototype)
  Ic.prototype.constructor = Ic
  Ic.prototype.isq7 = !0
  Ic.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.color.copy(a.color)
    this.map = a.map
    this.lightMap = a.lightMap
    this.lightMapIntensity = a.lightMapIntensity
    this.aoMap = a.aoMap
    this.aoMapIntensity = a.aoMapIntensity
    this.emissive.copy(a.emissive)
    this.emissiveMap = a.emissiveMap
    this.emissiveIntensity = a.emissiveIntensity
    this.specularMap = a.specularMap
    this.alphaMap = a.alphaMap
    this.envMap = a.envMap
    this.combine = a.combine
    this.reflectivity = a.reflectivity
    this.refractionRatio = a.refractionRatio
    this.wireframe = a.wireframe
    this.wireframeLinewidth = a.wireframeLinewidth
    this.wireframeLinecap = a.wireframeLinecap
    this.wireframeLinejoin = a.wireframeLinejoin
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    return this
  }
  Jc.prototype = Object.create(y.prototype)
  Jc.prototype.constructor = Jc
  Jc.prototype.isnaMatcapMaterial = !0
  Jc.prototype.copy = function (a) {
    y.prototype.copy.call(this, a)
    this.defines = { MATCAP: '' }
    this.color.copy(a.color)
    this.matcap = a.matcap
    this.map = a.map
    this.bumpMap = a.bumpMap
    this.bumpScale = a.bumpScale
    this.normalMap = a.normalMap
    this.normalMapType = a.normalMapType
    this.normalScale.copy(a.normalScale)
    this.displacementMap = a.displacementMap
    this.displacementScale = a.displacementScale
    this.displacementBias = a.displacementBias
    this.alphaMap = a.alphaMap
    this.skinning = a.skinning
    this.morphTargets = a.morphTargets
    this.morphNormals = a.morphNormals
    return this
  }
  Kc.prototype = Object.create(ma.prototype)
  Kc.prototype.constructor = Kc
  Kc.prototype.isLineDashedMaterial = !0
  Kc.prototype.copy = function (a) {
    ma.prototype.copy.call(this, a)
    this.scale = a.scale
    this.dashSize = a.dashSize
    this.gapSize = a.gapSize
    return this
  }
  var Tk = Object.freeze({
      __proto__: null,
      ShadowMaterial: Fc,
      SpriteMaterial: hc,
      RawShaderMaterial: Pb,
      ShaderMaterial: wa,
      PointsMaterial: rb,
      naPhysicalMaterial: jc,
      naStandardMaterial: Cb,
      naPhongMaterial: kc,
      naToonMaterial: Gc,
      naNormalMaterial: Hc,
      q7: Ic,
      naDepthMaterial: bc,
      naDistanceMaterial: cc,
      naBasicMaterial: L,
      naMatcapMaterial: Jc,
      LineDashedMaterial: Kc,
      b3: ma,
      Material: y,
    }),
    xa = {
      arraySlice: function (a, b, d) {
        return xa.isTypedArray(a)
          ? new a.constructor(a.subarray(b, void 0 !== d ? d : a.length))
          : a.slice(b, d)
      },
      convertArray: function (a, b, d) {
        return !a || (!d && a.constructor === b)
          ? a
          : 'number' === typeof b.BYTES_PER_ELEMENT
          ? new b(a)
          : Array.prototype.slice.call(a)
      },
      isTypedArray: function (a) {
        return ArrayBuffer.isView(a) && !(a instanceof DataView)
      },
      getKeyframeOrder: function (a) {
        for (var b = a.length, d = Array(b), e = 0; e !== b; ++e) d[e] = e
        d.sort(function (b, d) {
          return a[b] - a[d]
        })
        return d
      },
      sortedArray: function (a, b, d) {
        for (
          var e = a.length, h = new a.constructor(e), f = 0, g = 0;
          g !== e;
          ++f
        )
          for (var k = d[f] * b, m = 0; m !== b; ++m) h[g++] = a[k + m]
        return h
      },
      flattenJSON: function (a, b, d, e) {
        for (var h = 1, f = a[0]; void 0 !== f && void 0 === f[e]; ) f = a[h++]
        if (void 0 !== f) {
          var g = f[e]
          if (void 0 !== g)
            if (Array.isArray(g)) {
              do
                (g = f[e]),
                  void 0 !== g && (b.push(f.time), d.push.apply(d, g)),
                  (f = a[h++])
              while (void 0 !== f)
            } else if (void 0 !== g.toArray) {
              do
                (g = f[e]),
                  void 0 !== g && (b.push(f.time), g.toArray(d, d.length)),
                  (f = a[h++])
              while (void 0 !== f)
            } else {
              do
                (g = f[e]),
                  void 0 !== g && (b.push(f.time), d.push(g)),
                  (f = a[h++])
              while (void 0 !== f)
            }
        }
      },
      subclip: function (a, b, d, e, h) {
        h = h || 30
        a = a.clone()
        a.name = b
        b = []
        for (var f = 0; f < a.tracks.length; ++f) {
          for (
            var g = a.tracks[f], k = g.getValueSize(), m = [], n = [], p = 0;
            p < g.times.length;
            ++p
          ) {
            var r = g.times[p] * h
            if (!(r < d || r >= e))
              for (m.push(g.times[p]), r = 0; r < k; ++r)
                n.push(g.values[p * k + r])
          }
          0 !== m.length &&
            ((g.times = xa.convertArray(m, g.times.constructor)),
            (g.values = xa.convertArray(n, g.values.constructor)),
            b.push(g))
        }
        a.tracks = b
        d = Infinity
        for (e = 0; e < a.tracks.length; ++e)
          d > a.tracks[e].times[0] && (d = a.tracks[e].times[0])
        for (e = 0; e < a.tracks.length; ++e) a.tracks[e].shift(-1 * d)
        a.resetDuration()
        return a
      },
      makeClipAdditive: function (a, b, d, e) {
        void 0 === b && (b = 0)
        void 0 === d && (d = a)
        if (void 0 === e || 0 >= e) e = 30
        var h = a.tracks.length,
          f = b / e
        b = function (b) {
          var e = d.tracks[b],
            h = e.ValueTypeName
          if (
            'bool' !== h &&
            'string' !== h &&
            ((b = a.tracks.find(function (a) {
              return a.name === e.name && a.ValueTypeName === h
            })),
            void 0 !== b)
          ) {
            var l = 0,
              g = e.getValueSize()
            e.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline &&
              (l = g / 3)
            var q = 0,
              k = b.getValueSize()
            b.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline &&
              (q = k / 3)
            var m = e.times.length - 1,
              n = void 0
            f <= e.times[0]
              ? (n = xa.arraySlice(e.values, l, g - l))
              : f >= e.times[m]
              ? ((n = m * g + l), (n = xa.arraySlice(e.values, n, n + g - l)))
              : ((n = e.createInterpolant()),
                (m = l),
                (l = g - l),
                n.evaluate(f),
                (n = xa.arraySlice(n.resultBuffer, m, l)))
            'quaternion' === h &&
              new Z().fromArray(n).normalize().conjugate().toArray(n)
            l = b.times.length
            for (g = 0; g < l; ++g)
              if (((m = g * k + q), 'quaternion' === h))
                Z.multiplyQuaternionsFlat(b.values, m, n, 0, b.values, m)
              else
                for (var p = k - 2 * q, r = 0; r < p; ++r)
                  b.values[m + r] -= n[r]
          }
        }
        for (e = 0; e < h; ++e) b(e)
        a.blendMode = 2501
        return a
      },
    }
  Object.assign(ib.prototype, {
    evaluate: function (a) {
      var b = this.parameterPositions,
        d = this._cachedIndex,
        e = b[d],
        h = b[d - 1]
      a: {
        b: {
          c: {
            d: if (!(a < e)) {
              for (var f = d + 2; ; ) {
                if (void 0 === e) {
                  if (a < h) break d
                  this._cachedIndex = d = b.length
                  return this.afterEnd_(d - 1, a, h)
                }
                if (d === f) break
                h = e
                e = b[++d]
                if (a < e) break b
              }
              e = b.length
              break c
            }
            if (a >= h) break a
            else {
              f = b[1]
              a < f && ((d = 2), (h = f))
              for (f = d - 2; ; ) {
                if (void 0 === h)
                  return (this._cachedIndex = 0), this.beforeStart_(0, a, e)
                if (d === f) break
                e = h
                h = b[--d - 1]
                if (a >= h) break b
              }
              e = d
              d = 0
            }
          }
          for (; d < e; ) (h = (d + e) >>> 1), a < b[h] ? (e = h) : (d = h + 1)
          e = b[d]
          h = b[d - 1]
          if (void 0 === h)
            return (this._cachedIndex = 0), this.beforeStart_(0, a, e)
          if (void 0 === e)
            return (
              (this._cachedIndex = d = b.length), this.afterEnd_(d - 1, h, a)
            )
        }
        this._cachedIndex = d
        this.intervalChanged_(d, h, e)
      }
      return this.interpolate_(d, h, a, e)
    },
    settings: null,
    DefaultSettings_: {},
    getSettings_: function () {
      return this.settings || this.DefaultSettings_
    },
    copySampleValue_: function (a) {
      var b = this.resultBuffer,
        d = this.sampleValues,
        e = this.valueSize
      a *= e
      for (var h = 0; h !== e; ++h) b[h] = d[a + h]
      return b
    },
    interpolate_: function () {
      throw Error('call to abstract method')
    },
    intervalChanged_: function () {},
  })
  Object.assign(ib.prototype, {
    beforeStart_: ib.prototype.copySampleValue_,
    afterEnd_: ib.prototype.copySampleValue_,
  })
  kf.prototype = Object.assign(Object.create(ib.prototype), {
    constructor: kf,
    DefaultSettings_: { endingStart: 2400, endingEnd: 2400 },
    intervalChanged_: function (a, b, d) {
      var e = this.parameterPositions,
        h = a - 2,
        f = a + 1,
        g = e[h],
        k = e[f]
      if (void 0 === g)
        switch (this.getSettings_().endingStart) {
          case 2401:
            h = a
            g = 2 * b - d
            break
          case 2402:
            h = e.length - 2
            g = b + e[h] - e[h + 1]
            break
          default:
            ;(h = a), (g = d)
        }
      if (void 0 === k)
        switch (this.getSettings_().endingEnd) {
          case 2401:
            f = a
            k = 2 * d - b
            break
          case 2402:
            f = 1
            k = d + e[1] - e[0]
            break
          default:
            ;(f = a - 1), (k = b)
        }
      a = 0.5 * (d - b)
      e = this.valueSize
      this._weightPrev = a / (b - g)
      this._weightNext = a / (k - d)
      this._offsetPrev = h * e
      this._offsetNext = f * e
    },
    interpolate_: function (a, b, d, e) {
      var h = this.resultBuffer,
        f = this.sampleValues,
        g = this.valueSize
      a *= g
      var k = a - g,
        m = this._offsetPrev,
        n = this._offsetNext,
        p = this._weightPrev,
        r = this._weightNext,
        u = (d - b) / (e - b)
      d = u * u
      e = d * u
      b = -p * e + 2 * p * d - p * u
      p = (1 + p) * e + (-1.5 - 2 * p) * d + (-0.5 + p) * u + 1
      u = (-1 - r) * e + (1.5 + r) * d + 0.5 * u
      r = r * e - r * d
      for (d = 0; d !== g; ++d)
        h[d] = b * f[m + d] + p * f[k + d] + u * f[a + d] + r * f[n + d]
      return h
    },
  })
  ve.prototype = Object.assign(Object.create(ib.prototype), {
    constructor: ve,
    interpolate_: function (a, b, d, e) {
      var h = this.resultBuffer,
        f = this.sampleValues,
        g = this.valueSize
      a *= g
      var k = a - g
      b = (d - b) / (e - b)
      d = 1 - b
      for (e = 0; e !== g; ++e) h[e] = f[k + e] * d + f[a + e] * b
      return h
    },
  })
  lf.prototype = Object.assign(Object.create(ib.prototype), {
    constructor: lf,
    interpolate_: function (a) {
      return this.copySampleValue_(a - 1)
    },
  })
  Object.assign(Ma, {
    toJSON: function (a) {
      var b = a.constructor
      if (void 0 !== b.toJSON) b = b.toJSON(a)
      else {
        var b = {
            name: a.name,
            times: xa.convertArray(a.times, Array),
            values: xa.convertArray(a.values, Array),
          },
          d = a.getInterpolation()
        d !== a.DefaultInterpolation && (b.interpolation = d)
      }
      b.type = a.ValueTypeName
      return b
    },
  })
  Object.assign(Ma.prototype, {
    constructor: Ma,
    TimeBufferType: Float32Array,
    ValueBufferType: Float32Array,
    DefaultInterpolation: 2301,
    InterpolantFactoryMethodDiscrete: function (a) {
      return new lf(this.times, this.values, this.getValueSize(), a)
    },
    InterpolantFactoryMethodLinear: function (a) {
      return new ve(this.times, this.values, this.getValueSize(), a)
    },
    InterpolantFactoryMethodSmooth: function (a) {
      return new kf(this.times, this.values, this.getValueSize(), a)
    },
    setInterpolation: function (a) {
      var b
      switch (a) {
        case 2300:
          b = this.InterpolantFactoryMethodDiscrete
          break
        case 2301:
          b = this.InterpolantFactoryMethodLinear
          break
        case 2302:
          b = this.InterpolantFactoryMethodSmooth
      }
      if (void 0 === b) {
        b =
          'unsupported interpolation for ' +
          this.ValueTypeName +
          ' keyframe track named ' +
          this.name
        if (void 0 === this.createInterpolant)
          if (a !== this.DefaultInterpolation)
            this.setInterpolation(this.DefaultInterpolation)
          else throw Error(b)
        console.warn('THREE.KeyframeTrack:', b)
        return this
      }
      this.createInterpolant = b
      return this
    },
    getInterpolation: function () {
      switch (this.createInterpolant) {
        case this.InterpolantFactoryMethodDiscrete:
          return 2300
        case this.InterpolantFactoryMethodLinear:
          return 2301
        case this.InterpolantFactoryMethodSmooth:
          return 2302
      }
    },
    getValueSize: function () {
      return this.values.length / this.times.length
    },
    shift: function (a) {
      if (0 !== a)
        for (var b = this.times, d = 0, e = b.length; d !== e; ++d) b[d] += a
      return this
    },
    scale: function (a) {
      if (1 !== a)
        for (var b = this.times, d = 0, e = b.length; d !== e; ++d) b[d] *= a
      return this
    },
    trim: function (a, b) {
      for (
        var d = this.times, e = d.length, h = 0, f = e - 1;
        h !== e && d[h] < a;

      )
        ++h
      for (; -1 !== f && d[f] > b; ) --f
      ++f
      if (0 !== h || f !== e)
        h >= f && ((f = Math.max(f, 1)), (h = f - 1)),
          (e = this.getValueSize()),
          (this.times = xa.arraySlice(d, h, f)),
          (this.values = xa.arraySlice(this.values, h * e, f * e))
      return this
    },
    validate: function () {
      var a = !0,
        b = this.getValueSize()
      0 !== b - Math.floor(b) &&
        (console.error(
          'THREE.KeyframeTrack: Invalid value size in track.',
          this
        ),
        (a = !1))
      var d = this.times,
        b = this.values,
        e = d.length
      0 === e &&
        (console.error('THREE.KeyframeTrack: Track is empty.', this), (a = !1))
      for (var h = null, f = 0; f !== e; f++) {
        var g = d[f]
        if ('number' === typeof g && isNaN(g)) {
          console.error(
            'THREE.KeyframeTrack: Time is not a valid number.',
            this,
            f,
            g
          )
          a = !1
          break
        }
        if (null !== h && h > g) {
          console.error('THREE.KeyframeTrack: Out of order keys.', this, f, g, h)
          a = !1
          break
        }
        h = g
      }
      if (void 0 !== b && xa.isTypedArray(b))
        for (d = 0, e = b.length; d !== e; ++d)
          if (((h = b[d]), isNaN(h))) {
            console.error(
              'THREE.KeyframeTrack: Value is not a valid number.',
              this,
              d,
              h
            )
            a = !1
            break
          }
      return a
    },
    optimize: function () {
      for (
        var a = xa.arraySlice(this.times),
          b = xa.arraySlice(this.values),
          d = this.getValueSize(),
          e = 2302 === this.getInterpolation(),
          h = a.length - 1,
          f = 1,
          g = 1;
        g < h;
        ++g
      ) {
        var k = !1,
          m = a[g]
        if (m !== a[g + 1] && (1 !== g || m !== m[0]))
          if (e) k = !0
          else
            for (var m = g * d, n = m - d, p = m + d, r = 0; r !== d; ++r) {
              var u = b[m + r]
              if (u !== b[n + r] || u !== b[p + r]) {
                k = !0
                break
              }
            }
        if (k) {
          if (g !== f)
            for (a[f] = a[g], k = g * d, m = f * d, n = 0; n !== d; ++n)
              b[m + n] = b[k + n]
          ++f
        }
      }
      if (0 < h) {
        a[f] = a[h]
        e = h * d
        h = f * d
        for (g = 0; g !== d; ++g) b[h + g] = b[e + g]
        ++f
      }
      f !== a.length
        ? ((this.times = xa.arraySlice(a, 0, f)),
          (this.values = xa.arraySlice(b, 0, f * d)))
        : ((this.times = a), (this.values = b))
      return this
    },
    clone: function () {
      var a = xa.arraySlice(this.times, 0),
        b = xa.arraySlice(this.values, 0),
        a = new this.constructor(this.name, a, b)
      a.createInterpolant = this.createInterpolant
      return a
    },
  })
  mf.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: mf,
    ValueTypeName: 'bool',
    ValueBufferType: Array,
    DefaultInterpolation: 2300,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0,
  })
  nf.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: nf,
    ValueTypeName: 'color',
  })
  sd.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: sd,
    ValueTypeName: 'number',
  })
  of.prototype = Object.assign(Object.create(ib.prototype), {
    constructor: of,
    interpolate_: function (a, b, d, e) {
      var h = this.resultBuffer,
        f = this.sampleValues,
        g = this.valueSize
      b = (d - b) / (e - b)
      a *= g
      for (d = a + g; a !== d; a += 4) Z.slerpFlat(h, 0, f, a - g, f, a, b)
      return h
    },
  })
  we.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: we,
    ValueTypeName: 'quaternion',
    DefaultInterpolation: 2301,
    InterpolantFactoryMethodLinear: function (a) {
      return new of(this.times, this.values, this.getValueSize(), a)
    },
    InterpolantFactoryMethodSmooth: void 0,
  })
  pf.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: pf,
    ValueTypeName: 'string',
    ValueBufferType: Array,
    DefaultInterpolation: 2300,
    InterpolantFactoryMethodLinear: void 0,
    InterpolantFactoryMethodSmooth: void 0,
  })
  td.prototype = Object.assign(Object.create(Ma.prototype), {
    constructor: td,
    ValueTypeName: 'vector',
  })
  Object.assign(mb, {
    parse: function (a) {
      for (
        var b = [], d = a.tracks, e = 1 / (a.fps || 1), h = 0, f = d.length;
        h !== f;
        ++h
      )
        b.push(Fk(d[h]).scale(e))
      return new mb(a.name, a.duration, b, a.blendMode)
    },
    toJSON: function (a) {
      var b = [],
        d = a.tracks
      a = {
        name: a.name,
        duration: a.duration,
        tracks: b,
        uuid: a.uuid,
        blendMode: a.blendMode,
      }
      for (var e = 0, h = d.length; e !== h; ++e) b.push(Ma.toJSON(d[e]))
      return a
    },
    CreateFromMorphTargetSequence: function (a, b, d, e) {
      for (var h = b.length, f = [], g = 0; g < h; g++) {
        var k = [],
          m = []
        k.push((g + h - 1) % h, g, (g + 1) % h)
        m.push(0, 1, 0)
        var n = xa.getKeyframeOrder(k),
          k = xa.sortedArray(k, 1, n),
          m = xa.sortedArray(m, 1, n)
        e || 0 !== k[0] || (k.push(h), m.push(m[0]))
        f.push(
          new sd('.morphTargetInfluences[' + b[g].name + ']', k, m).scale(1 / d)
        )
      }
      return new mb(a, -1, f)
    },
    findByName: function (a, b) {
      var d = a
      Array.isArray(a) ||
        (d = (a.geometry && a.geometry.animations) || a.animations)
      for (var e = 0; e < d.length; e++) if (d[e].name === b) return d[e]
      return null
    },
    CreateClipsFromMorphTargetSequences: function (a, b, d) {
      for (
        var e = {}, h = /^([\w-]*?)([\d]+)$/, f = 0, g = a.length;
        f < g;
        f++
      ) {
        var k = a[f],
          m = k.name.match(h)
        if (m && 1 < m.length) {
          var m = m[1],
            n = e[m]
          n || (e[m] = n = [])
          n.push(k)
        }
      }
      a = []
      for (var p in e) a.push(mb.CreateFromMorphTargetSequence(p, e[p], b, d))
      return a
    },
    parseAnimation: function (a, b) {
      if (!a)
        return (
          console.error('THREE.AnimationClip: No animation in JSONLoader data.'),
          null
        )
      for (
        var d = function (a, b, d, e, h) {
            if (0 !== d.length) {
              var f = [],
                l = []
              xa.flattenJSON(d, f, l, e)
              0 !== f.length && h.push(new a(b, f, l))
            }
          },
          e = [],
          h = a.name || 'default',
          f = a.fps || 30,
          g = a.blendMode,
          k = a.length || -1,
          m = a.hierarchy || [],
          n = 0;
        n < m.length;
        n++
      ) {
        var p = m[n].keys
        if (p && 0 !== p.length)
          if (p[0].morphTargets) {
            for (var k = {}, r = void 0, r = 0; r < p.length; r++)
              if (p[r].morphTargets)
                for (var u = 0; u < p[r].morphTargets.length; u++)
                  k[p[r].morphTargets[u]] = -1
            for (var w in k) {
              for (
                var u = [], v = [], z = 0;
                z !== p[r].morphTargets.length;
                ++z
              ) {
                var y = p[r]
                u.push(y.time)
                v.push(y.morphTarget === w ? 1 : 0)
              }
              e.push(new sd('.morphTargetInfluence[' + w + ']', u, v))
            }
            k = k.length * (f || 1)
          } else
            (r = '.bones[' + b[n].name + ']'),
              d(td, r + '.position', p, 'pos', e),
              d(we, r + '.quaternion', p, 'rot', e),
              d(td, r + '.scale', p, 'scl', e)
      }
      return 0 === e.length ? null : new mb(h, k, e, g)
    },
  })
  Object.assign(mb.prototype, {
    resetDuration: function () {
      for (var a = 0, b = 0, d = this.tracks.length; b !== d; ++b)
        var e = this.tracks[b], a = Math.max(a, e.times[e.times.length - 1])
      this.duration = a
      return this
    },
    trim: function () {
      for (var a = 0; a < this.tracks.length; a++)
        this.tracks[a].trim(0, this.duration)
      return this
    },
    validate: function () {
      for (var a = !0, b = 0; b < this.tracks.length; b++)
        a = a && this.tracks[b].validate()
      return a
    },
    optimize: function () {
      for (var a = 0; a < this.tracks.length; a++) this.tracks[a].optimize()
      return this
    },
    clone: function () {
      for (var a = [], b = 0; b < this.tracks.length; b++)
        a.push(this.tracks[b].clone())
      return new mb(this.name, this.duration, a, this.blendMode)
    },
  })
  var Oc = {
      enabled: !1,
      files: {},
      add: function (a, b) {
        !1 !== this.enabled && (this.files[a] = b)
      },
      get: function (a) {
        if (!1 !== this.enabled) return this.files[a]
      },
      remove: function (a) {
        delete this.files[a]
      },
      clear: function () {
        this.files = {}
      },
    },
    ci = new zg()
  Object.assign(oa.prototype, {
    load: function () {},
    loadAsync: function (a, b) {
      var d = this
      return new Promise(function (e, h) {
        d.load(a, e, b, h)
      })
    },
    parse: function () {},
    setCrossOrigin: function (a) {
      this.crossOrigin = a
      return this
    },
    setPath: function (a) {
      this.path = a
      return this
    },
    setResourcePath: function (a) {
      this.resourcePath = a
      return this
    },
    setRequestHeader: function (a) {
      this.requestHeader = a
      return this
    },
  })
  var zb = {}
  nb.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: nb,
    load: function (a, b, d, e) {
      void 0 === a && (a = '')
      void 0 !== this.path && (a = this.path + a)
      a = this.manager.resolveURL(a)
      var h = this,
        f = Oc.get(a)
      if (void 0 !== f)
        return (
          h.manager.itemStart(a),
          setTimeout(function () {
            b && b(f)
            h.manager.itemEnd(a)
          }, 0),
          f
        )
      if (void 0 !== zb[a]) zb[a].push({ onLoad: b, onProgress: d, onError: e })
      else {
        var g = a.match(/^data:(.*?)(;base64)?,(.*)$/),
          k
        if (g) {
          d = g[1]
          var m = !!g[2],
            g = g[3],
            g = decodeURIComponent(g)
          m && (g = atob(g))
          try {
            var n,
              p = (this.responseType || '').toLowerCase()
            switch (p) {
              case 'arraybuffer':
              case 'blob':
                for (var r = new Uint8Array(g.length), m = 0; m < g.length; m++)
                  r[m] = g.charCodeAt(m)
                n = 'blob' === p ? new Blob([r.buffer], { type: d }) : r.buffer
                break
              case 'document':
                n = new DOMParser().parseFromString(g, d)
                break
              case 'json':
                n = JSON.parse(g)
                break
              default:
                n = g
            }
            setTimeout(function () {
              b && b(n)
              h.manager.itemEnd(a)
            }, 0)
          } catch (J) {
            setTimeout(function () {
              e && e(J)
              h.manager.itemError(a)
              h.manager.itemEnd(a)
            }, 0)
          }
        } else {
          zb[a] = []
          zb[a].push({ onLoad: b, onProgress: d, onError: e })
          k = new XMLHttpRequest()
          k.open('GET', a, !0)
          k.addEventListener(
            'load',
            function (b) {
              var d = this.response,
                e = zb[a]
              delete zb[a]
              if (200 === this.status || 0 === this.status) {
                0 === this.status &&
                  console.warn('THREE.FileLoader: HTTP Status 0 received.')
                Oc.add(a, d)
                b = 0
                for (var f = e.length; b < f; b++) {
                  var l = e[b]
                  if (l.onLoad) l.onLoad(d)
                }
              } else {
                d = 0
                for (f = e.length; d < f; d++)
                  if (((l = e[d]), l.onError)) l.onError(b)
                h.manager.itemError(a)
              }
              h.manager.itemEnd(a)
            },
            !1
          )
          k.addEventListener(
            'progress',
            function (b) {
              for (var d = zb[a], e = 0, h = d.length; e < h; e++) {
                var f = d[e]
                if (f.onProgress) f.onProgress(b)
              }
            },
            !1
          )
          k.addEventListener(
            'error',
            function (b) {
              var d = zb[a]
              delete zb[a]
              for (var e = 0, f = d.length; e < f; e++) {
                var l = d[e]
                if (l.onError) l.onError(b)
              }
              h.manager.itemError(a)
              h.manager.itemEnd(a)
            },
            !1
          )
          k.addEventListener(
            'abort',
            function (b) {
              var d = zb[a]
              delete zb[a]
              for (var e = 0, f = d.length; e < f; e++) {
                var l = d[e]
                if (l.onError) l.onError(b)
              }
              h.manager.itemError(a)
              h.manager.itemEnd(a)
            },
            !1
          )
          void 0 !== this.responseType && (k.responseType = this.responseType)
          void 0 !== this.withCredentials &&
            (k.withCredentials = this.withCredentials)
          k.overrideMimeType &&
            k.overrideMimeType(
              void 0 !== this.mimeType ? this.mimeType : 'text/plain'
            )
          for (m in this.requestHeader)
            k.setRequestHeader(m, this.requestHeader[m])
          k.send(null)
        }
        h.manager.itemStart(a)
        return k
      }
    },
    setResponseType: function (a) {
      this.responseType = a
      return this
    },
    setWithCredentials: function (a) {
      this.withCredentials = a
      return this
    },
    setMimeType: function (a) {
      this.mimeType = a
      return this
    },
  })
  Ag.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Ag,
    load: function (a, b, d, e) {
      var h = this,
        f = new nb(h.manager)
      f.setPath(h.path)
      f.setRequestHeader(h.requestHeader)
      f.load(
        a,
        function (d) {
          try {
            b(h.parse(JSON.parse(d)))
          } catch (t) {
            e ? e(t) : console.error(t), h.manager.itemError(a)
          }
        },
        d,
        e
      )
    },
    parse: function (a) {
      for (var b = [], d = 0; d < a.length; d++) {
        var e = mb.parse(a[d])
        b.push(e)
      }
      return b
    },
  })
  Bg.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Bg,
    load: function (a, b, d, e) {
      function h(h) {
        m.load(
          a[h],
          function (a) {
            a = f.parse(a, !0)
            g[h] = {
              width: a.width,
              height: a.height,
              format: a.format,
              mipmaps: a.mipmaps,
            }
            n += 1
            6 === n &&
              (1 === a.mipmapCount && (k.minFilter = 1006),
              (k.format = a.format),
              (k.needsUpdate = !0),
              b && b(k))
          },
          d,
          e
        )
      }
      var f = this,
        g = [],
        k = new ed()
      k.image = g
      var m = new nb(this.manager)
      m.setPath(this.path)
      m.setResponseType('arraybuffer')
      m.setRequestHeader(this.requestHeader)
      var n = 0
      if (Array.isArray(a)) for (var p = 0, r = a.length; p < r; ++p) h(p)
      else
        m.load(
          a,
          function (a) {
            a = f.parse(a, !0)
            if (a.isCubemap)
              for (
                var d = a.mipmaps.length / a.mipmapCount, e = 0;
                e < d;
                e++
              ) {
                g[e] = { mipmaps: [] }
                for (var h = 0; h < a.mipmapCount; h++)
                  g[e].mipmaps.push(a.mipmaps[e * a.mipmapCount + h]),
                    (g[e].format = a.format),
                    (g[e].width = a.width),
                    (g[e].height = a.height)
              }
            else
              (k.image.width = a.width),
                (k.image.height = a.height),
                (k.mipmaps = a.mipmaps)
            1 === a.mipmapCount && (k.minFilter = 1006)
            k.format = a.format
            k.needsUpdate = !0
            b && b(k)
          },
          d,
          e
        )
      return k
    },
  })
  ud.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: ud,
    load: function (a, b, d, e) {
      function h() {
        m.removeEventListener('load', h, !1)
        m.removeEventListener('error', f, !1)
        Oc.add(a, this)
        b && b(this)
        g.manager.itemEnd(a)
      }
      function f(b) {
        m.removeEventListener('load', h, !1)
        m.removeEventListener('error', f, !1)
        e && e(b)
        g.manager.itemError(a)
        g.manager.itemEnd(a)
      }
      void 0 !== this.path && (a = this.path + a)
      a = this.manager.resolveURL(a)
      var g = this,
        k = Oc.get(a)
      if (void 0 !== k)
        return (
          g.manager.itemStart(a),
          setTimeout(function () {
            b && b(k)
            g.manager.itemEnd(a)
          }, 0),
          k
        )
      var m = document.createElementNS('http://www.w3.org/1999/xhtml', 'img')
      m.addEventListener('load', h, !1)
      m.addEventListener('error', f, !1)
      'data:' !== a.substr(0, 5) &&
        void 0 !== this.crossOrigin &&
        (m.crossOrigin = this.crossOrigin)
      g.manager.itemStart(a)
      m.src = a
      return m
    },
  })
  qf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: qf,
    load: function (a, b, d, e) {
      function h(d) {
        g.load(
          a[d],
          function (a) {
            f.images[d] = a
            k++
            6 === k && ((f.needsUpdate = !0), b && b(f))
          },
          void 0,
          e
        )
      }
      var f = new Mb(),
        g = new ud(this.manager)
      g.setCrossOrigin(this.crossOrigin)
      g.setPath(this.path)
      var k = 0
      for (d = 0; d < a.length; ++d) h(d)
      return f
    },
  })
  rf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: rf,
    load: function (a, b, d, e) {
      var f = this,
        l = new Za(),
        g = new nb(this.manager)
      g.setResponseType('arraybuffer')
      g.setRequestHeader(this.requestHeader)
      g.setPath(this.path)
      g.load(
        a,
        function (a) {
          if ((a = f.parse(a)))
            void 0 !== a.image
              ? (l.image = a.image)
              : void 0 !== a.data &&
                ((l.image.width = a.width),
                (l.image.height = a.height),
                (l.image.data = a.data)),
              (l.wrapS = void 0 !== a.wrapS ? a.wrapS : 1001),
              (l.wrapT = void 0 !== a.wrapT ? a.wrapT : 1001),
              (l.magFilter = void 0 !== a.magFilter ? a.magFilter : 1006),
              (l.minFilter = void 0 !== a.minFilter ? a.minFilter : 1006),
              (l.anisotropy = void 0 !== a.anisotropy ? a.anisotropy : 1),
              void 0 !== a.format && (l.format = a.format),
              void 0 !== a.type && (l.type = a.type),
              void 0 !== a.mipmaps &&
                ((l.mipmaps = a.mipmaps), (l.minFilter = 1008)),
              1 === a.mipmapCount && (l.minFilter = 1006),
              (l.needsUpdate = !0),
              b && b(l, a)
        },
        d,
        e
      )
      return l
    },
  })
  sf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: sf,
    load: function (a, b, d, e) {
      var f = new g(),
        l = new ud(this.manager)
      l.setCrossOrigin(this.crossOrigin)
      l.setPath(this.path)
      l.load(
        a,
        function (d) {
          f.image = d
          d =
            0 < a.search(/\.jpe?g($|\?)/i) ||
            0 === a.search(/^data\:image\/jpeg/)
          f.format = d ? 1022 : 1023
          f.needsUpdate = !0
          void 0 !== b && b(f)
        },
        d,
        e
      )
      return f
    },
  })
  Object.assign(T.prototype, {
    getPoint: function () {
      console.warn('THREE.Curve: .getPoint() not implemented.')
      return null
    },
    getPointAt: function (a, b) {
      var d = this.getUtoTmapping(a)
      return this.getPoint(d, b)
    },
    getPoints: function (a) {
      void 0 === a && (a = 5)
      for (var b = [], d = 0; d <= a; d++) b.push(this.getPoint(d / a))
      return b
    },
    getSpacedPoints: function (a) {
      void 0 === a && (a = 5)
      for (var b = [], d = 0; d <= a; d++) b.push(this.getPointAt(d / a))
      return b
    },
    getLength: function () {
      var a = this.getLengths()
      return a[a.length - 1]
    },
    getLengths: function (a) {
      void 0 === a && (a = this.arcLengthDivisions)
      if (
        this.cacheArcLengths &&
        this.cacheArcLengths.length === a + 1 &&
        !this.needsUpdate
      )
        return this.cacheArcLengths
      this.needsUpdate = !1
      var b = [],
        d,
        e = this.getPoint(0),
        f = 0
      b.push(0)
      for (var l = 1; l <= a; l++)
        (d = this.getPoint(l / a)), (f += d.distanceTo(e)), b.push(f), (e = d)
      return (this.cacheArcLengths = b)
    },
    updateArcLengths: function () {
      this.needsUpdate = !0
      this.getLengths()
    },
    getUtoTmapping: function (a, b) {
      var d = this.getLengths(),
        e,
        f = d.length,
        l
      l = b ? b : a * d[f - 1]
      for (var g = 0, k = f - 1, m; g <= k; )
        if (((e = Math.floor(g + (k - g) / 2)), (m = d[e] - l), 0 > m))
          g = e + 1
        else if (0 < m) k = e - 1
        else {
          k = e
          break
        }
      e = k
      if (d[e] === l) return e / (f - 1)
      g = d[e]
      return (e + (l - g) / (d[e + 1] - g)) / (f - 1)
    },
    getTangent: function (a, b) {
      var d = a - 1e-4,
        e = a + 1e-4
      0 > d && (d = 0)
      1 < e && (e = 1)
      var d = this.getPoint(d),
        e = this.getPoint(e),
        f = b || (d.isvt2 ? new B() : new p())
      f.copy(e).sub(d).normalize()
      return f
    },
    getTangentAt: function (a, b) {
      var d = this.getUtoTmapping(a)
      return this.getTangent(d, b)
    },
    computeFrenetFrames: function (a, b) {
      for (
        var d = new p(),
          e = [],
          f = [],
          l = [],
          g = new p(),
          k = new O(),
          m = 0;
        m <= a;
        m++
      )
        (e[m] = this.getTangentAt(m / a, new p())), e[m].normalize()
      f[0] = new p()
      l[0] = new p()
      var m = Number.MAX_VALUE,
        n = Math.abs(e[0].x),
        r = Math.abs(e[0].y),
        u = Math.abs(e[0].z)
      n <= m && ((m = n), d.set(1, 0, 0))
      r <= m && ((m = r), d.set(0, 1, 0))
      u <= m && d.set(0, 0, 1)
      g.crossVectors(e[0], d).normalize()
      f[0].crossVectors(e[0], g)
      l[0].crossVectors(e[0], f[0])
      for (d = 1; d <= a; d++)
        (f[d] = f[d - 1].clone()),
          (l[d] = l[d - 1].clone()),
          g.crossVectors(e[d - 1], e[d]),
          g.length() > Number.EPSILON &&
            (g.normalize(),
            (m = Math.acos(ea.clamp(e[d - 1].dot(e[d]), -1, 1))),
            f[d].applyMatrix4(k.makeRotationAxis(g, m))),
          l[d].crossVectors(e[d], f[d])
      if (!0 === b)
        for (
          d = Math.acos(ea.clamp(f[0].dot(f[a]), -1, 1)),
            d /= a,
            0 < e[0].dot(g.crossVectors(f[0], f[a])) && (d = -d),
            g = 1;
          g <= a;
          g++
        )
          f[g].applyMatrix4(k.makeRotationAxis(e[g], d * g)),
            l[g].crossVectors(e[g], f[g])
      return { tangents: e, normals: f, binormals: l }
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    copy: function (a) {
      this.arcLengthDivisions = a.arcLengthDivisions
      return this
    },
    toJSON: function () {
      var a = {
        metadata: { version: 4.5, type: 'Curve', generator: 'Curve.toJSON' },
      }
      a.arcLengthDivisions = this.arcLengthDivisions
      a.type = this.type
      return a
    },
    fromJSON: function (a) {
      this.arcLengthDivisions = a.arcLengthDivisions
      return this
    },
  })
  jb.prototype = Object.create(T.prototype)
  jb.prototype.constructor = jb
  jb.prototype.isEllipseCurve = !0
  jb.prototype.getPoint = function (a, b) {
    for (
      var d = b || new B(),
        e = 2 * Math.PI,
        f = this.aEndAngle - this.aStartAngle,
        l = Math.abs(f) < Number.EPSILON;
      0 > f;

    )
      f += e
    for (; f > e; ) f -= e
    f < Number.EPSILON && (f = l ? 0 : e)
    !0 !== this.aClockwise || l || (f = f === e ? -e : f - e)
    var f = this.aStartAngle + a * f,
      e = this.aX + this.xRadius * Math.cos(f),
      g = this.aY + this.yRadius * Math.sin(f)
    if (0 !== this.aRotation)
      var f = Math.cos(this.aRotation),
        l = Math.sin(this.aRotation),
        k = e - this.aX,
        g = g - this.aY,
        e = k * f - g * l + this.aX,
        g = k * l + g * f + this.aY
    return d.set(e, g)
  }
  jb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.aX = a.aX
    this.aY = a.aY
    this.xRadius = a.xRadius
    this.yRadius = a.yRadius
    this.aStartAngle = a.aStartAngle
    this.aEndAngle = a.aEndAngle
    this.aClockwise = a.aClockwise
    this.aRotation = a.aRotation
    return this
  }
  jb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.aX = this.aX
    a.aY = this.aY
    a.xRadius = this.xRadius
    a.yRadius = this.yRadius
    a.aStartAngle = this.aStartAngle
    a.aEndAngle = this.aEndAngle
    a.aClockwise = this.aClockwise
    a.aRotation = this.aRotation
    return a
  }
  jb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.aX = a.aX
    this.aY = a.aY
    this.xRadius = a.xRadius
    this.yRadius = a.yRadius
    this.aStartAngle = a.aStartAngle
    this.aEndAngle = a.aEndAngle
    this.aClockwise = a.aClockwise
    this.aRotation = a.aRotation
    return this
  }
  vd.prototype = Object.create(jb.prototype)
  vd.prototype.constructor = vd
  vd.prototype.isArcCurve = !0
  var ag = new p(),
    lh = new Cg(),
    mh = new Cg(),
    nh = new Cg()
  Sa.prototype = Object.create(T.prototype)
  Sa.prototype.constructor = Sa
  Sa.prototype.isCatmullRomCurve3 = !0
  Sa.prototype.getPoint = function (a, b) {
    var d = b || new p(),
      e = this.points,
      f = e.length,
      l = (f - (this.closed ? 0 : 1)) * a,
      g = Math.floor(l),
      l = l - g
    this.closed
      ? (g += 0 < g ? 0 : (Math.floor(Math.abs(g) / f) + 1) * f)
      : 0 === l && g === f - 1 && ((g = f - 2), (l = 1))
    var k
    this.closed || 0 < g
      ? (k = e[(g - 1) % f])
      : (ag.subVectors(e[0], e[1]).add(e[0]), (k = ag))
    var m = e[g % f],
      n = e[(g + 1) % f]
    this.closed || g + 2 < f
      ? (e = e[(g + 2) % f])
      : (ag.subVectors(e[f - 1], e[f - 2]).add(e[f - 1]), (e = ag))
    if ('centripetal' === this.curveType || 'chordal' === this.curveType) {
      var r = 'chordal' === this.curveType ? 0.5 : 0.25,
        f = Math.pow(k.distanceToSquared(m), r),
        g = Math.pow(m.distanceToSquared(n), r),
        r = Math.pow(n.distanceToSquared(e), r)
      1e-4 > g && (g = 1)
      1e-4 > f && (f = g)
      1e-4 > r && (r = g)
      lh.initNonuniformCatmullRom(k.x, m.x, n.x, e.x, f, g, r)
      mh.initNonuniformCatmullRom(k.y, m.y, n.y, e.y, f, g, r)
      nh.initNonuniformCatmullRom(k.z, m.z, n.z, e.z, f, g, r)
    } else
      'catmullrom' === this.curveType &&
        (lh.initCatmullRom(k.x, m.x, n.x, e.x, this.tension),
        mh.initCatmullRom(k.y, m.y, n.y, e.y, this.tension),
        nh.initCatmullRom(k.z, m.z, n.z, e.z, this.tension))
    d.set(lh.calc(l), mh.calc(l), nh.calc(l))
    return d
  }
  Sa.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.points = []
    for (var b = 0, d = a.points.length; b < d; b++)
      this.points.push(a.points[b].clone())
    this.closed = a.closed
    this.curveType = a.curveType
    this.tension = a.tension
    return this
  }
  Sa.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.points = []
    for (var b = 0, d = this.points.length; b < d; b++)
      a.points.push(this.points[b].toArray())
    a.closed = this.closed
    a.curveType = this.curveType
    a.tension = this.tension
    return a
  }
  Sa.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.points = []
    for (var b = 0, d = a.points.length; b < d; b++) {
      var e = a.points[b]
      this.points.push(new p().fromArray(e))
    }
    this.closed = a.closed
    this.curveType = a.curveType
    this.tension = a.tension
    return this
  }
  sb.prototype = Object.create(T.prototype)
  sb.prototype.constructor = sb
  sb.prototype.isCubicBezierCurve = !0
  sb.prototype.getPoint = function (a, b) {
    var d = b || new B(),
      e = this.v0,
      f = this.v1,
      g = this.v2,
      k = this.v3
    d.set(ye(a, e.x, f.x, g.x, k.x), ye(a, e.y, f.y, g.y, k.y))
    return d
  }
  sb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v0.copy(a.v0)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    this.v3.copy(a.v3)
    return this
  }
  sb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v0 = this.v0.toArray()
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    a.v3 = this.v3.toArray()
    return a
  }
  sb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v0.fromArray(a.v0)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    this.v3.fromArray(a.v3)
    return this
  }
  Db.prototype = Object.create(T.prototype)
  Db.prototype.constructor = Db
  Db.prototype.isCubicBezierCurve3 = !0
  Db.prototype.getPoint = function (a, b) {
    var d = b || new p(),
      e = this.v0,
      f = this.v1,
      g = this.v2,
      k = this.v3
    d.set(
      ye(a, e.x, f.x, g.x, k.x),
      ye(a, e.y, f.y, g.y, k.y),
      ye(a, e.z, f.z, g.z, k.z)
    )
    return d
  }
  Db.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v0.copy(a.v0)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    this.v3.copy(a.v3)
    return this
  }
  Db.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v0 = this.v0.toArray()
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    a.v3 = this.v3.toArray()
    return a
  }
  Db.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v0.fromArray(a.v0)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    this.v3.fromArray(a.v3)
    return this
  }
  cb.prototype = Object.create(T.prototype)
  cb.prototype.constructor = cb
  cb.prototype.isLineCurve = !0
  cb.prototype.getPoint = function (a, b) {
    var d = b || new B()
    1 === a
      ? d.copy(this.v2)
      : (d.copy(this.v2).sub(this.v1), d.multiplyScalar(a).add(this.v1))
    return d
  }
  cb.prototype.getPointAt = function (a, b) {
    return this.getPoint(a, b)
  }
  cb.prototype.getTangent = function (a, b) {
    var d = b || new B()
    d.copy(this.v2).sub(this.v1).normalize()
    return d
  }
  cb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    return this
  }
  cb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    return a
  }
  cb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    return this
  }
  tb.prototype = Object.create(T.prototype)
  tb.prototype.constructor = tb
  tb.prototype.isLineCurve3 = !0
  tb.prototype.getPoint = function (a, b) {
    var d = b || new p()
    1 === a
      ? d.copy(this.v2)
      : (d.copy(this.v2).sub(this.v1), d.multiplyScalar(a).add(this.v1))
    return d
  }
  tb.prototype.getPointAt = function (a, b) {
    return this.getPoint(a, b)
  }
  tb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    return this
  }
  tb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    return a
  }
  tb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    return this
  }
  ub.prototype = Object.create(T.prototype)
  ub.prototype.constructor = ub
  ub.prototype.isQuadraticBezierCurve = !0
  ub.prototype.getPoint = function (a, b) {
    var d = b || new B(),
      e = this.v0,
      f = this.v1,
      g = this.v2
    d.set(xe(a, e.x, f.x, g.x), xe(a, e.y, f.y, g.y))
    return d
  }
  ub.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v0.copy(a.v0)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    return this
  }
  ub.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v0 = this.v0.toArray()
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    return a
  }
  ub.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v0.fromArray(a.v0)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    return this
  }
  Eb.prototype = Object.create(T.prototype)
  Eb.prototype.constructor = Eb
  Eb.prototype.isQuadraticBezierCurve3 = !0
  Eb.prototype.getPoint = function (a, b) {
    var d = b || new p(),
      e = this.v0,
      f = this.v1,
      g = this.v2
    d.set(xe(a, e.x, f.x, g.x), xe(a, e.y, f.y, g.y), xe(a, e.z, f.z, g.z))
    return d
  }
  Eb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.v0.copy(a.v0)
    this.v1.copy(a.v1)
    this.v2.copy(a.v2)
    return this
  }
  Eb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.v0 = this.v0.toArray()
    a.v1 = this.v1.toArray()
    a.v2 = this.v2.toArray()
    return a
  }
  Eb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.v0.fromArray(a.v0)
    this.v1.fromArray(a.v1)
    this.v2.fromArray(a.v2)
    return this
  }
  vb.prototype = Object.create(T.prototype)
  vb.prototype.constructor = vb
  vb.prototype.isSplineCurve = !0
  vb.prototype.getPoint = function (a, b) {
    var d = b || new B(),
      e = this.points,
      f = (e.length - 1) * a,
      g = Math.floor(f),
      f = f - g,
      k = e[0 === g ? g : g - 1],
      m = e[g],
      n = e[g > e.length - 2 ? e.length - 1 : g + 1],
      e = e[g > e.length - 3 ? e.length - 1 : g + 2]
    d.set(di(f, k.x, m.x, n.x, e.x), di(f, k.y, m.y, n.y, e.y))
    return d
  }
  vb.prototype.copy = function (a) {
    T.prototype.copy.call(this, a)
    this.points = []
    for (var b = 0, d = a.points.length; b < d; b++)
      this.points.push(a.points[b].clone())
    return this
  }
  vb.prototype.toJSON = function () {
    var a = T.prototype.toJSON.call(this)
    a.points = []
    for (var b = 0, d = this.points.length; b < d; b++)
      a.points.push(this.points[b].toArray())
    return a
  }
  vb.prototype.fromJSON = function (a) {
    T.prototype.fromJSON.call(this, a)
    this.points = []
    for (var b = 0, d = a.points.length; b < d; b++) {
      var e = a.points[b]
      this.points.push(new B().fromArray(e))
    }
    return this
  }
  var oh = Object.freeze({
    __proto__: null,
    ArcCurve: vd,
    CatmullRomCurve3: Sa,
    CubicBezierCurve: sb,
    CubicBezierCurve3: Db,
    EllipseCurve: jb,
    LineCurve: cb,
    LineCurve3: tb,
    QuadraticBezierCurve: ub,
    QuadraticBezierCurve3: Eb,
    SplineCurve: vb,
  })
  Qb.prototype = Object.assign(Object.create(T.prototype), {
    constructor: Qb,
    add: function (a) {
      this.curves.push(a)
    },
    closePath: function () {
      var a = this.curves[0].getPoint(0),
        b = this.curves[this.curves.length - 1].getPoint(1)
      a.equals(b) || this.curves.push(new cb(b, a))
    },
    getPoint: function (a) {
      var b = a * this.getLength(),
        d = this.getCurveLengths()
      for (a = 0; a < d.length; ) {
        if (d[a] >= b)
          return (
            (b = d[a] - b),
            (a = this.curves[a]),
            (d = a.getLength()),
            a.getPointAt(0 === d ? 0 : 1 - b / d)
          )
        a++
      }
      return null
    },
    getLength: function () {
      var a = this.getCurveLengths()
      return a[a.length - 1]
    },
    updateArcLengths: function () {
      this.needsUpdate = !0
      this.cacheLengths = null
      this.getCurveLengths()
    },
    getCurveLengths: function () {
      if (this.cacheLengths && this.cacheLengths.length === this.curves.length)
        return this.cacheLengths
      for (var a = [], b = 0, d = 0, e = this.curves.length; d < e; d++)
        (b += this.curves[d].getLength()), a.push(b)
      return (this.cacheLengths = a)
    },
    getSpacedPoints: function (a) {
      void 0 === a && (a = 40)
      for (var b = [], d = 0; d <= a; d++) b.push(this.getPoint(d / a))
      this.autoClose && b.push(b[0])
      return b
    },
    getPoints: function (a) {
      a = a || 12
      for (var b = [], d, e = 0, f = this.curves; e < f.length; e++)
        for (
          var g = f[e],
            g = g.getPoints(
              g && g.isEllipseCurve
                ? 2 * a
                : g && (g.isLineCurve || g.isLineCurve3)
                ? 1
                : g && g.isSplineCurve
                ? a * g.points.length
                : a
            ),
            k = 0;
          k < g.length;
          k++
        ) {
          var m = g[k]
          ;(d && d.equals(m)) || (b.push(m), (d = m))
        }
      this.autoClose &&
        1 < b.length &&
        !b[b.length - 1].equals(b[0]) &&
        b.push(b[0])
      return b
    },
    copy: function (a) {
      T.prototype.copy.call(this, a)
      this.curves = []
      for (var b = 0, d = a.curves.length; b < d; b++)
        this.curves.push(a.curves[b].clone())
      this.autoClose = a.autoClose
      return this
    },
    toJSON: function () {
      var a = T.prototype.toJSON.call(this)
      a.autoClose = this.autoClose
      a.curves = []
      for (var b = 0, d = this.curves.length; b < d; b++)
        a.curves.push(this.curves[b].toJSON())
      return a
    },
    fromJSON: function (a) {
      T.prototype.fromJSON.call(this, a)
      this.autoClose = a.autoClose
      this.curves = []
      for (var b = 0, d = a.curves.length; b < d; b++) {
        var e = a.curves[b]
        this.curves.push(new oh[e.type]().fromJSON(e))
      }
      return this
    },
  })
  wb.prototype = Object.assign(Object.create(Qb.prototype), {
    constructor: wb,
    setFromPoints: function (a) {
      this.moveTo(a[0].x, a[0].y)
      for (var b = 1, d = a.length; b < d; b++) this.lineTo(a[b].x, a[b].y)
      return this
    },
    moveTo: function (a, b) {
      this.currentPoint.set(a, b)
      return this
    },
    lineTo: function (a, b) {
      var d = new cb(this.currentPoint.clone(), new B(a, b))
      this.curves.push(d)
      this.currentPoint.set(a, b)
      return this
    },
    quadraticCurveTo: function (a, b, d, e) {
      a = new ub(this.currentPoint.clone(), new B(a, b), new B(d, e))
      this.curves.push(a)
      this.currentPoint.set(d, e)
      return this
    },
    bezierCurveTo: function (a, b, d, e, f, g) {
      a = new sb(
        this.currentPoint.clone(),
        new B(a, b),
        new B(d, e),
        new B(f, g)
      )
      this.curves.push(a)
      this.currentPoint.set(f, g)
      return this
    },
    splineThru: function (a) {
      var b = [this.currentPoint.clone()].concat(a),
        b = new vb(b)
      this.curves.push(b)
      this.currentPoint.copy(a[a.length - 1])
      return this
    },
    arc: function (a, b, d, e, f, g) {
      this.absarc(a + this.currentPoint.x, b + this.currentPoint.y, d, e, f, g)
      return this
    },
    absarc: function (a, b, d, e, f, g) {
      this.absellipse(a, b, d, d, e, f, g)
      return this
    },
    ellipse: function (a, b, d, e, f, g, k, m) {
      this.absellipse(
        a + this.currentPoint.x,
        b + this.currentPoint.y,
        d,
        e,
        f,
        g,
        k,
        m
      )
      return this
    },
    absellipse: function (a, b, d, e, f, g, k, m) {
      a = new jb(a, b, d, e, f, g, k, m)
      0 < this.curves.length &&
        ((b = a.getPoint(0)),
        b.equals(this.currentPoint) || this.lineTo(b.x, b.y))
      this.curves.push(a)
      a = a.getPoint(1)
      this.currentPoint.copy(a)
      return this
    },
    copy: function (a) {
      Qb.prototype.copy.call(this, a)
      this.currentPoint.copy(a.currentPoint)
      return this
    },
    toJSON: function () {
      var a = Qb.prototype.toJSON.call(this)
      a.currentPoint = this.currentPoint.toArray()
      return a
    },
    fromJSON: function (a) {
      Qb.prototype.fromJSON.call(this, a)
      this.currentPoint.fromArray(a.currentPoint)
      return this
    },
  })
  lc.prototype = Object.assign(Object.create(wb.prototype), {
    constructor: lc,
    getPointsHoles: function (a) {
      for (var b = [], d = 0, e = this.holes.length; d < e; d++)
        b[d] = this.holes[d].getPoints(a)
      return b
    },
    extractPoints: function (a) {
      return { shape: this.getPoints(a), holes: this.getPointsHoles(a) }
    },
    copy: function (a) {
      wb.prototype.copy.call(this, a)
      this.holes = []
      for (var b = 0, d = a.holes.length; b < d; b++)
        this.holes.push(a.holes[b].clone())
      return this
    },
    toJSON: function () {
      var a = wb.prototype.toJSON.call(this)
      a.uuid = this.uuid
      a.holes = []
      for (var b = 0, d = this.holes.length; b < d; b++)
        a.holes.push(this.holes[b].toJSON())
      return a
    },
    fromJSON: function (a) {
      wb.prototype.fromJSON.call(this, a)
      this.uuid = a.uuid
      this.holes = []
      for (var b = 0, d = a.holes.length; b < d; b++) {
        var e = a.holes[b]
        this.holes.push(new wb().fromJSON(e))
      }
      return this
    },
  })
  ra.prototype = Object.assign(Object.create(n.prototype), {
    constructor: ra,
    isLight: !0,
    copy: function (a) {
      n.prototype.copy.call(this, a)
      this.color.copy(a.color)
      this.intensity = a.intensity
      return this
    },
    toJSON: function (a) {
      a = n.prototype.toJSON.call(this, a)
      a.object.color = this.color.getHex()
      a.object.intensity = this.intensity
      void 0 !== this.groundColor &&
        (a.object.groundColor = this.groundColor.getHex())
      void 0 !== this.distance && (a.object.distance = this.distance)
      void 0 !== this.angle && (a.object.angle = this.angle)
      void 0 !== this.decay && (a.object.decay = this.decay)
      void 0 !== this.penumbra && (a.object.penumbra = this.penumbra)
      void 0 !== this.shadow && (a.object.shadow = this.shadow.toJSON())
      return a
    },
  })
  tf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: tf,
    isHemisphereLight: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.groundColor.copy(a.groundColor)
      return this
    },
  })
  Object.assign(Fb.prototype, {
    _projScreenMatrix: new O(),
    _lightPositionWorld: new p(),
    _lookTarget: new p(),
    getViewportCount: function () {
      return this._viewportCount
    },
    getFrustum: function () {
      return this._frustum
    },
    updateMatrices: function (a) {
      var b = this.camera,
        d = this.matrix,
        e = this._projScreenMatrix,
        f = this._lookTarget,
        g = this._lightPositionWorld
      g.setFromMatrixPosition(a.matrixWorld)
      b.position.copy(g)
      f.setFromMatrixPosition(a.target.matrixWorld)
      b.lookAt(f)
      b.updateMatrixWorld()
      e.multiplyMatrices(b.projectionMatrix, b.matrixWorldInverse)
      this._frustum.setFromProjectionMatrix(e)
      d.set(0.5, 0, 0, 0.5, 0, 0.5, 0, 0.5, 0, 0, 0.5, 0.5, 0, 0, 0, 1)
      d.multiply(b.projectionMatrix)
      d.multiply(b.matrixWorldInverse)
    },
    getViewport: function (a) {
      return this._viewports[a]
    },
    getFrameExtents: function () {
      return this._frameExtents
    },
    copy: function (a) {
      this.camera = a.camera.clone()
      this.bias = a.bias
      this.radius = a.radius
      this.mapSize.copy(a.mapSize)
      return this
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    toJSON: function () {
      var a = {}
      0 !== this.bias && (a.bias = this.bias)
      0 !== this.normalBias && (a.normalBias = this.normalBias)
      1 !== this.radius && (a.radius = this.radius)
      if (512 !== this.mapSize.x || 512 !== this.mapSize.y)
        a.mapSize = this.mapSize.toArray()
      a.camera = this.camera.toJSON(!1).object
      delete a.camera.matrix
      return a
    },
  })
  Dg.prototype = Object.assign(Object.create(Fb.prototype), {
    constructor: Dg,
    isSpotLightShadow: !0,
    updateMatrices: function (a) {
      var b = this.camera,
        d = 2 * ea.RAD2DEG * a.angle,
        e = this.mapSize.width / this.mapSize.height,
        f = a.distance || b.far
      if (d !== b.fov || e !== b.aspect || f !== b.far)
        (b.fov = d), (b.aspect = e), (b.far = f), b.updateProjectionMatrix()
      Fb.prototype.updateMatrices.call(this, a)
    },
  })
  uf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: uf,
    isSpotLight: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.distance = a.distance
      this.angle = a.angle
      this.penumbra = a.penumbra
      this.decay = a.decay
      this.target = a.target.clone()
      this.shadow = a.shadow.clone()
      return this
    },
  })
  Eg.prototype = Object.assign(Object.create(Fb.prototype), {
    constructor: Eg,
    isPointLightShadow: !0,
    updateMatrices: function (a, b) {
      void 0 === b && (b = 0)
      var d = this.camera,
        e = this.matrix,
        f = this._lightPositionWorld,
        g = this._lookTarget,
        k = this._projScreenMatrix
      f.setFromMatrixPosition(a.matrixWorld)
      d.position.copy(f)
      g.copy(d.position)
      g.add(this._cubeDirections[b])
      d.up.copy(this._cubeUps[b])
      d.lookAt(g)
      d.updateMatrixWorld()
      e.makeTranslation(-f.x, -f.y, -f.z)
      k.multiplyMatrices(d.projectionMatrix, d.matrixWorldInverse)
      this._frustum.setFromProjectionMatrix(k)
    },
  })
  vf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: vf,
    isPointLight: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.distance = a.distance
      this.decay = a.decay
      this.shadow = a.shadow.clone()
      return this
    },
  })
  wd.prototype = Object.assign(Object.create(ua.prototype), {
    constructor: wd,
    isOrthographicCamera: !0,
    copy: function (a, b) {
      ua.prototype.copy.call(this, a, b)
      this.left = a.left
      this.right = a.right
      this.top = a.top
      this.bottom = a.bottom
      this.near = a.near
      this.far = a.far
      this.zoom = a.zoom
      this.view = null === a.view ? null : Object.assign({}, a.view)
      return this
    },
    setViewOffset: function (a, b, d, e, f, g) {
      null === this.view &&
        (this.view = {
          enabled: !0,
          fullWidth: 1,
          fullHeight: 1,
          offsetX: 0,
          offsetY: 0,
          width: 1,
          height: 1,
        })
      this.view.enabled = !0
      this.view.fullWidth = a
      this.view.fullHeight = b
      this.view.offsetX = d
      this.view.offsetY = e
      this.view.width = f
      this.view.height = g
      this.updateProjectionMatrix()
    },
    clearViewOffset: function () {
      null !== this.view && (this.view.enabled = !1)
      this.updateProjectionMatrix()
    },
    updateProjectionMatrix: function () {
      var a = (this.right - this.left) / (2 * this.zoom),
        b = (this.top - this.bottom) / (2 * this.zoom),
        d = (this.right + this.left) / 2,
        e = (this.top + this.bottom) / 2,
        f = d - a,
        d = d + a,
        a = e + b,
        b = e - b
      null !== this.view &&
        this.view.enabled &&
        ((e = (this.right - this.left) / this.view.fullWidth / this.zoom),
        (b = (this.top - this.bottom) / this.view.fullHeight / this.zoom),
        (f += e * this.view.offsetX),
        (d = f + e * this.view.width),
        (a -= b * this.view.offsetY),
        (b = a - b * this.view.height))
      this.projectionMatrix.makeOrthographic(f, d, a, b, this.near, this.far)
      this.projectionMatrixInverse.getInverse(this.projectionMatrix)
    },
    toJSON: function (a) {
      a = n.prototype.toJSON.call(this, a)
      a.object.zoom = this.zoom
      a.object.left = this.left
      a.object.right = this.right
      a.object.top = this.top
      a.object.bottom = this.bottom
      a.object.near = this.near
      a.object.far = this.far
      null !== this.view && (a.object.view = Object.assign({}, this.view))
      return a
    },
  })
  Fg.prototype = Object.assign(Object.create(Fb.prototype), {
    constructor: Fg,
    isq9Shadow: !0,
    updateMatrices: function (a) {
      Fb.prototype.updateMatrices.call(this, a)
    },
  })
  wf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: wf,
    isq9: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.target = a.target.clone()
      this.shadow = a.shadow.clone()
      return this
    },
  })
  xf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: xf,
    isq10: !0,
  })
  yf.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: yf,
    isRectAreaLight: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.width = a.width
      this.height = a.height
      return this
    },
    toJSON: function (a) {
      a = ra.prototype.toJSON.call(this, a)
      a.object.width = this.width
      a.object.height = this.height
      return a
    },
  })
  var Ta = function () {
    Object.defineProperty(this, 'isb6Harmonics3', { value: !0 })
    this.coefficients = []
    for (var a = 0; 9 > a; a++) this.coefficients.push(new p())
  }
  Ta.prototype.set = function (a) {
    for (var b = 0; 9 > b; b++) this.coefficients[b].copy(a[b])
    return this
  }
  Ta.prototype.zero = function () {
    for (var a = 0; 9 > a; a++) this.coefficients[a].set(0, 0, 0)
    return this
  }
  Ta.prototype.getAt = function (a, b) {
    var d = a.x,
      e = a.y,
      f = a.z,
      g = this.coefficients
    b.copy(g[0]).multiplyScalar(0.282095)
    b.addScaledVector(g[1], 0.488603 * e)
    b.addScaledVector(g[2], 0.488603 * f)
    b.addScaledVector(g[3], 0.488603 * d)
    b.addScaledVector(g[4], 1.092548 * d * e)
    b.addScaledVector(g[5], 1.092548 * e * f)
    b.addScaledVector(g[6], 0.315392 * (3 * f * f - 1))
    b.addScaledVector(g[7], 1.092548 * d * f)
    b.addScaledVector(g[8], 0.546274 * (d * d - e * e))
    return b
  }
  Ta.prototype.getIrradianceAt = function (a, b) {
    var d = a.x,
      e = a.y,
      f = a.z,
      g = this.coefficients
    b.copy(g[0]).multiplyScalar(0.886227)
    b.addScaledVector(g[1], 1.023328 * e)
    b.addScaledVector(g[2], 1.023328 * f)
    b.addScaledVector(g[3], 1.023328 * d)
    b.addScaledVector(g[4], 0.858086 * d * e)
    b.addScaledVector(g[5], 0.858086 * e * f)
    b.addScaledVector(g[6], 0.743125 * f * f - 0.247708)
    b.addScaledVector(g[7], 0.858086 * d * f)
    b.addScaledVector(g[8], 0.429043 * (d * d - e * e))
    return b
  }
  Ta.prototype.add = function (a) {
    for (var b = 0; 9 > b; b++) this.coefficients[b].add(a.coefficients[b])
    return this
  }
  Ta.prototype.addScaledSH = function (a, b) {
    for (var d = 0; 9 > d; d++)
      this.coefficients[d].addScaledVector(a.coefficients[d], b)
    return this
  }
  Ta.prototype.scale = function (a) {
    for (var b = 0; 9 > b; b++) this.coefficients[b].multiplyScalar(a)
    return this
  }
  Ta.prototype.lerp = function (a, b) {
    for (var d = 0; 9 > d; d++) this.coefficients[d].lerp(a.coefficients[d], b)
    return this
  }
  Ta.prototype.equals = function (a) {
    for (var b = 0; 9 > b; b++)
      if (!this.coefficients[b].equals(a.coefficients[b])) return !1
    return !0
  }
  Ta.prototype.copy = function (a) {
    return this.set(a.coefficients)
  }
  Ta.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  Ta.prototype.fromArray = function (a, b) {
    void 0 === b && (b = 0)
    for (var d = this.coefficients, e = 0; 9 > e; e++)
      d[e].fromArray(a, b + 3 * e)
    return this
  }
  Ta.prototype.toArray = function (a, b) {
    void 0 === a && (a = [])
    void 0 === b && (b = 0)
    for (var d = this.coefficients, e = 0; 9 > e; e++)
      d[e].toArray(a, b + 3 * e)
    return a
  }
  Ta.getBasisAt = function (a, b) {
    var d = a.x,
      e = a.y,
      f = a.z
    b[0] = 0.282095
    b[1] = 0.488603 * e
    b[2] = 0.488603 * f
    b[3] = 0.488603 * d
    b[4] = 1.092548 * d * e
    b[5] = 1.092548 * e * f
    b[6] = 0.315392 * (3 * f * f - 1)
    b[7] = 1.092548 * d * f
    b[8] = 0.546274 * (d * d - e * e)
  }
  ob.prototype = Object.assign(Object.create(ra.prototype), {
    constructor: ob,
    isLightProbe: !0,
    copy: function (a) {
      ra.prototype.copy.call(this, a)
      this.sh.copy(a.sh)
      return this
    },
    fromJSON: function (a) {
      this.intensity = a.intensity
      this.sh.fromArray(a.sh)
      return this
    },
    toJSON: function (a) {
      a = ra.prototype.toJSON.call(this, a)
      a.object.sh = this.sh.toArray()
      return a
    },
  })
  zf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: zf,
    load: function (a, b, d, e) {
      var f = this,
        g = new nb(f.manager)
      g.setPath(f.path)
      g.setRequestHeader(f.requestHeader)
      g.load(
        a,
        function (d) {
          try {
            b(f.parse(JSON.parse(d)))
          } catch (t) {
            e ? e(t) : console.error(t), f.manager.itemError(a)
          }
        },
        d,
        e
      )
    },
    parse: function (a) {
      function b(a) {
        void 0 === d[a] &&
          console.warn('THREE.MaterialLoader: Undefined texture', a)
        return d[a]
      }
      var d = this.textures,
        e = new Tk[a.type]()
      void 0 !== a.uuid && (e.uuid = a.uuid)
      void 0 !== a.name && (e.name = a.name)
      void 0 !== a.color && e.color.setHex(a.color)
      void 0 !== a.roughness && (e.roughness = a.roughness)
      void 0 !== a.metalness && (e.metalness = a.metalness)
      void 0 !== a.sheen && (e.sheen = new H().setHex(a.sheen))
      void 0 !== a.emissive && e.emissive.setHex(a.emissive)
      void 0 !== a.specular && e.specular.setHex(a.specular)
      void 0 !== a.shininess && (e.shininess = a.shininess)
      void 0 !== a.clearcoat && (e.clearcoat = a.clearcoat)
      void 0 !== a.clearcoatRoughness &&
        (e.clearcoatRoughness = a.clearcoatRoughness)
      void 0 !== a.fog && (e.fog = a.fog)
      void 0 !== a.flatShading && (e.flatShading = a.flatShading)
      void 0 !== a.blending && (e.blending = a.blending)
      void 0 !== a.combine && (e.combine = a.combine)
      void 0 !== a.side && (e.side = a.side)
      void 0 !== a.opacity && (e.opacity = a.opacity)
      void 0 !== a.transparent && (e.transparent = a.transparent)
      void 0 !== a.alphaTest && (e.alphaTest = a.alphaTest)
      void 0 !== a.depthTest && (e.depthTest = a.depthTest)
      void 0 !== a.depthWrite && (e.depthWrite = a.depthWrite)
      void 0 !== a.colorWrite && (e.colorWrite = a.colorWrite)
      void 0 !== a.stencilWrite && (e.stencilWrite = a.stencilWrite)
      void 0 !== a.stencilWriteMask && (e.stencilWriteMask = a.stencilWriteMask)
      void 0 !== a.stencilFunc && (e.stencilFunc = a.stencilFunc)
      void 0 !== a.stencilRef && (e.stencilRef = a.stencilRef)
      void 0 !== a.stencilFuncMask && (e.stencilFuncMask = a.stencilFuncMask)
      void 0 !== a.stencilFail && (e.stencilFail = a.stencilFail)
      void 0 !== a.stencilZFail && (e.stencilZFail = a.stencilZFail)
      void 0 !== a.stencilZPass && (e.stencilZPass = a.stencilZPass)
      void 0 !== a.wireframe && (e.wireframe = a.wireframe)
      void 0 !== a.wireframeLinewidth &&
        (e.wireframeLinewidth = a.wireframeLinewidth)
      void 0 !== a.wireframeLinecap && (e.wireframeLinecap = a.wireframeLinecap)
      void 0 !== a.wireframeLinejoin &&
        (e.wireframeLinejoin = a.wireframeLinejoin)
      void 0 !== a.rotation && (e.rotation = a.rotation)
      1 !== a.linewidth && (e.linewidth = a.linewidth)
      void 0 !== a.dashSize && (e.dashSize = a.dashSize)
      void 0 !== a.gapSize && (e.gapSize = a.gapSize)
      void 0 !== a.scale && (e.scale = a.scale)
      void 0 !== a.polygonOffset && (e.polygonOffset = a.polygonOffset)
      void 0 !== a.polygonOffsetFactor &&
        (e.polygonOffsetFactor = a.polygonOffsetFactor)
      void 0 !== a.polygonOffsetUnits &&
        (e.polygonOffsetUnits = a.polygonOffsetUnits)
      void 0 !== a.skinning && (e.skinning = a.skinning)
      void 0 !== a.morphTargets && (e.morphTargets = a.morphTargets)
      void 0 !== a.morphNormals && (e.morphNormals = a.morphNormals)
      void 0 !== a.dithering && (e.dithering = a.dithering)
      void 0 !== a.vertexTangents && (e.vertexTangents = a.vertexTangents)
      void 0 !== a.visible && (e.visible = a.visible)
      void 0 !== a.toneMapped && (e.toneMapped = a.toneMapped)
      void 0 !== a.userData && (e.userData = a.userData)
      void 0 !== a.vertexColors &&
        (e.vertexColors =
          'number' === typeof a.vertexColors
            ? 0 < a.vertexColors
              ? !0
              : !1
            : a.vertexColors)
      if (void 0 !== a.uniforms)
        for (var f in a.uniforms) {
          var g = a.uniforms[f]
          e.uniforms[f] = {}
          switch (g.type) {
            case 't':
              e.uniforms[f].value = b(g.value)
              break
            case 'c':
              e.uniforms[f].value = new H().setHex(g.value)
              break
            case 'v2':
              e.uniforms[f].value = new B().fromArray(g.value)
              break
            case 'v3':
              e.uniforms[f].value = new p().fromArray(g.value)
              break
            case 'v4':
              e.uniforms[f].value = new P().fromArray(g.value)
              break
            case 'm3':
              e.uniforms[f].value = new ha().fromArray(g.value)
              break
            case 'm4':
              e.uniforms[f].value = new O().fromArray(g.value)
              break
            default:
              e.uniforms[f].value = g.value
          }
        }
      void 0 !== a.defines && (e.defines = a.defines)
      void 0 !== a.vertexShader && (e.vertexShader = a.vertexShader)
      void 0 !== a.fragmentShader && (e.fragmentShader = a.fragmentShader)
      if (void 0 !== a.extensions)
        for (var k in a.extensions) e.extensions[k] = a.extensions[k]
      void 0 !== a.shading && (e.flatShading = 1 === a.shading)
      void 0 !== a.size && (e.size = a.size)
      void 0 !== a.sizeAttenuation && (e.sizeAttenuation = a.sizeAttenuation)
      void 0 !== a.map && (e.map = b(a.map))
      void 0 !== a.matcap && (e.matcap = b(a.matcap))
      void 0 !== a.alphaMap && (e.alphaMap = b(a.alphaMap))
      void 0 !== a.bumpMap && (e.bumpMap = b(a.bumpMap))
      void 0 !== a.bumpScale && (e.bumpScale = a.bumpScale)
      void 0 !== a.normalMap && (e.normalMap = b(a.normalMap))
      void 0 !== a.normalMapType && (e.normalMapType = a.normalMapType)
      void 0 !== a.normalScale &&
        ((f = a.normalScale),
        !1 === Array.isArray(f) && (f = [f, f]),
        (e.normalScale = new B().fromArray(f)))
      void 0 !== a.displacementMap && (e.displacementMap = b(a.displacementMap))
      void 0 !== a.displacementScale &&
        (e.displacementScale = a.displacementScale)
      void 0 !== a.displacementBias && (e.displacementBias = a.displacementBias)
      void 0 !== a.roughnessMap && (e.roughnessMap = b(a.roughnessMap))
      void 0 !== a.metalnessMap && (e.metalnessMap = b(a.metalnessMap))
      void 0 !== a.emissiveMap && (e.emissiveMap = b(a.emissiveMap))
      void 0 !== a.emissiveIntensity &&
        (e.emissiveIntensity = a.emissiveIntensity)
      void 0 !== a.specularMap && (e.specularMap = b(a.specularMap))
      void 0 !== a.envMap && (e.envMap = b(a.envMap))
      void 0 !== a.envMapIntensity && (e.envMapIntensity = a.envMapIntensity)
      void 0 !== a.reflectivity && (e.reflectivity = a.reflectivity)
      void 0 !== a.refractionRatio && (e.refractionRatio = a.refractionRatio)
      void 0 !== a.lightMap && (e.lightMap = b(a.lightMap))
      void 0 !== a.lightMapIntensity &&
        (e.lightMapIntensity = a.lightMapIntensity)
      void 0 !== a.aoMap && (e.aoMap = b(a.aoMap))
      void 0 !== a.aoMapIntensity && (e.aoMapIntensity = a.aoMapIntensity)
      void 0 !== a.gradientMap && (e.gradientMap = b(a.gradientMap))
      void 0 !== a.clearcoatMap && (e.clearcoatMap = b(a.clearcoatMap))
      void 0 !== a.clearcoatRoughnessMap &&
        (e.clearcoatRoughnessMap = b(a.clearcoatRoughnessMap))
      void 0 !== a.clearcoatNormalMap &&
        (e.clearcoatNormalMap = b(a.clearcoatNormalMap))
      void 0 !== a.clearcoatNormalScale &&
        (e.clearcoatNormalScale = new B().fromArray(a.clearcoatNormalScale))
      void 0 !== a.transmission && (e.transmission = a.transmission)
      void 0 !== a.transmissionMap && (e.transmissionMap = b(a.transmissionMap))
      return e
    },
    setTextures: function (a) {
      this.textures = a
      return this
    },
  })
  var ph = {
    decodeText: function (a) {
      if ('undefined' !== typeof TextDecoder) return new TextDecoder().decode(a)
      for (var b = '', d = 0, e = a.length; d < e; d++)
        b += String.fromCharCode(a[d])
      try {
        return decodeURIComponent(escape(b))
      } catch (h) {
        return b
      }
    },
    extractUrlBase: function (a) {
      var b = a.lastIndexOf('/')
      return -1 === b ? './' : a.substr(0, b + 1)
    },
  }
  ze.prototype = Object.assign(Object.create(I.prototype), {
    constructor: ze,
    isInstanced_0x2: !0,
    copy: function (a) {
      I.prototype.copy.call(this, a)
      this.instanceCount = a.instanceCount
      return this
    },
    clone: function () {
      return new this.constructor().copy(this)
    },
    toJSON: function () {
      var a = I.prototype.toJSON.call(this)
      a.instanceCount = this.instanceCount
      a.isInstanced_0x2 = !0
      return a
    },
  })
  Af.prototype = Object.assign(Object.create(C.prototype), {
    constructor: Af,
    isInstanced_0x3: !0,
    copy: function (a) {
      C.prototype.copy.call(this, a)
      this.meshPerAttribute = a.meshPerAttribute
      return this
    },
    toJSON: function () {
      var a = C.prototype.toJSON.call(this)
      a.meshPerAttribute = this.meshPerAttribute
      a.isInstanced_0x3 = !0
      return a
    },
  })
  Bf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Bf,
    load: function (a, b, d, e) {
      var f = this,
        g = new nb(f.manager)
      g.setPath(f.path)
      g.setRequestHeader(f.requestHeader)
      g.load(
        a,
        function (d) {
          try {
            b(f.parse(JSON.parse(d)))
          } catch (t) {
            e ? e(t) : console.error(t), f.manager.itemError(a)
          }
        },
        d,
        e
      )
    },
    parse: function (a) {
      function b(a, b) {
        if (void 0 !== d[b]) return d[b]
        var f = a.interleavedBuffers[b],
          h
        h = f.buffer
        if (void 0 !== e[h]) h = e[h]
        else {
          var g = new Uint32Array(a.arrayBuffers[h]).buffer
          h = e[h] = g
        }
        h = new bg[f.type](h)
        h = new hb(h, f.stride)
        h.uuid = f.uuid
        return (d[b] = h)
      }
      var d = {},
        e = {},
        f = a.isInstanced_0x2 ? new ze() : new I(),
        g = a.data.index
      void 0 !== g && ((g = new bg[g.type](g.array)), f.setIndex(new C(g, 1)))
      var g = a.data.attributes,
        k
      for (k in g) {
        var m = g[k],
          n = void 0
        m.isInterleaved_0x3
          ? ((n = b(a.data, m.data)),
            (n = new gc(n, m.itemSize, m.offset, m.normalized)))
          : ((n = new bg[m.type](m.array)),
            (n = new (m.isInstanced_0x3 ? Af : C)(n, m.itemSize, m.normalized)))
        void 0 !== m.name && (n.name = m.name)
        f.setAttribute(k, n)
      }
      if ((k = a.data.morphAttributes))
        for (var r in k) {
          for (var g = k[r], m = [], n = 0, u = g.length; n < u; n++) {
            var w = g[n],
              v = void 0
            w.isInterleaved_0x3
              ? ((v = b(a.data, w.data)),
                (v = new gc(v, w.itemSize, w.offset, w.normalized)))
              : ((v = new bg[w.type](w.array)),
                (v = new C(v, w.itemSize, w.normalized)))
            void 0 !== w.name && (v.name = w.name)
            m.push(v)
          }
          f.morphAttributes[r] = m
        }
      a.data.morphTargetsRelative && (f.morphTargetsRelative = !0)
      r = a.data.groups || a.data.drawcalls || a.data.offsets
      if (void 0 !== r)
        for (k = 0, g = r.length; k !== g; ++k)
          (m = r[k]), f.addGroup(m.start, m.count, m.materialIndex)
      r = a.data.boundingSphere
      void 0 !== r &&
        ((k = new p()),
        void 0 !== r.center && k.fromArray(r.center),
        (f.boundingSphere = new ta(k, r.radius)))
      a.name && (f.name = a.name)
      a.userData && (f.userData = a.userData)
      return f
    },
  })
  var bg = {
    Int8Array: Int8Array,
    Uint8Array: Uint8Array,
    Uint8ClampedArray:
      'undefined' !== typeof Uint8ClampedArray ? Uint8ClampedArray : Uint8Array,
    Int16Array: Int16Array,
    Uint16Array: Uint16Array,
    Int32Array: Int32Array,
    Uint32Array: Uint32Array,
    Float32Array: Float32Array,
    Float64Array: Float64Array,
  }
  Cf.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Cf,
    load: function (a, b, d, e) {
      var f = this,
        g = '' === this.path ? ph.extractUrlBase(a) : this.path
      this.resourcePath = this.resourcePath || g
      g = new nb(f.manager)
      g.setPath(this.path)
      g.setRequestHeader(this.requestHeader)
      g.load(
        a,
        function (d) {
          var h = null
          try {
            h = JSON.parse(d)
          } catch (A) {
            void 0 !== e && e(A)
            console.error(
              "THREE:ObjectLoader: Can't parse " + a + '.',
              A.message
            )
            return
          }
          d = h.metadata
          void 0 === d ||
          void 0 === d.type ||
          'geometry' === d.type.toLowerCase()
            ? console.error("THREE.ObjectLoader: Can't load " + a)
            : f.parse(h, b)
        },
        d,
        e
      )
    },
    parse: function (a, b) {
      var d = this.parseShape(a.shapes),
        d = this.parseGeometries(a.geometries, d),
        e = this.parseImages(a.images, function () {
          void 0 !== b && b(f)
        }),
        e = this.parseTextures(a.textures, e),
        e = this.parseMaterials(a.materials, e),
        f = this.parseObject(a.object, d, e)
      a.animations && (f.animations = this.parseAnimations(a.animations))
      ;(void 0 !== a.images && 0 !== a.images.length) || void 0 === b || b(f)
      return f
    },
    parseShape: function (a) {
      var b = {}
      if (void 0 !== a)
        for (var d = 0, e = a.length; d < e; d++) {
          var f = new lc().fromJSON(a[d])
          b[f.uuid] = f
        }
      return b
    },
    parseGeometries: function (a, b) {
      var d = {},
        e
      if (void 0 !== a)
        for (var f = new Bf(), g = 0, k = a.length; g < k; g++) {
          e = void 0
          var m = a[g]
          switch (m.type) {
            case 'pl_0x6':
            case 'pl_0x2':
              e = new Ya[m.type](
                m.width,
                m.height,
                m.widthSegments,
                m.heightSegments
              )
              break
            case 'Box_0x6':
            case 'Box_0x2':
            case 'Cube_0x6':
              e = new Ya[m.type](
                m.width,
                m.height,
                m.depth,
                m.widthSegments,
                m.heightSegments,
                m.depthSegments
              )
              break
            case 'Circle_0x6':
            case 'Circle_0x2':
              e = new Ya[m.type](
                m.radius,
                m.segments,
                m.thetaStart,
                m.thetaLength
              )
              break
            case 'Cylinder_0x6':
            case 'Cylinder_0x2':
              e = new Ya[m.type](
                m.radiusTop,
                m.radiusBottom,
                m.height,
                m.radialSegments,
                m.heightSegments,
                m.openEnded,
                m.thetaStart,
                m.thetaLength
              )
              break
            case 'Cone_0x6':
            case 'Cone_0x2':
              e = new Ya[m.type](
                m.radius,
                m.height,
                m.radialSegments,
                m.heightSegments,
                m.openEnded,
                m.thetaStart,
                m.thetaLength
              )
              break
            case 'Sphere_0x6':
            case 'Sphere_0x2':
              e = new Ya[m.type](
                m.radius,
                m.widthSegments,
                m.heightSegments,
                m.phiStart,
                m.phiLength,
                m.thetaStart,
                m.thetaLength
              )
              break
            case 'Dodecahedron_0x6':
            case 'Dodecahedron_0x2':
            case 'Icosahedron_0x6':
            case 'Icosahedron_0x2':
            case 'Octahedron_0x6':
            case 'Octahedron_0x2':
            case 'Tetrahedron_0x6':
            case 'Tetrahedron_0x2':
              e = new Ya[m.type](m.radius, m.detail)
              break
            case 'Ring_0x6':
            case 'Ring_0x2':
              e = new Ya[m.type](
                m.innerRadius,
                m.outerRadius,
                m.thetaSegments,
                m.phiSegments,
                m.thetaStart,
                m.thetaLength
              )
              break
            case 'Torus_0x6':
            case 'Torus_0x2':
              e = new Ya[m.type](
                m.radius,
                m.tube,
                m.radialSegments,
                m.tubularSegments,
                m.arc
              )
              break
            case 'TorusKnot_0x6':
            case 'TorusKnot_0x2':
              e = new Ya[m.type](
                m.radius,
                m.tube,
                m.tubularSegments,
                m.radialSegments,
                m.p,
                m.q
              )
              break
            case 'Tube_0x6':
            case 'Tube_0x2':
              e = new Ya[m.type](
                new oh[m.path.type]().fromJSON(m.path),
                m.tubularSegments,
                m.radius,
                m.radialSegments,
                m.closed
              )
              break
            case 'Lathe_0x6':
            case 'Lathe_0x2':
              e = new Ya[m.type](m.points, m.segments, m.phiStart, m.phiLength)
              break
            case 'Polyhedron_0x6':
            case 'Polyhedron_0x2':
              e = new Ya[m.type](m.vertices, m.indices, m.radius, m.details)
              break
            case 'Shape_0x6':
            case 'Shape_0x2':
              e = []
              for (var n = 0, p = m.shapes.length; n < p; n++)
                e.push(b[m.shapes[n]])
              e = new Ya[m.type](e, m.curveSegments)
              break
            case 'Extrude_0x6':
            case 'Extrude_0x2':
              e = []
              n = 0
              for (p = m.shapes.length; n < p; n++) e.push(b[m.shapes[n]])
              n = m.options.extrudePath
              void 0 !== n &&
                (m.options.extrudePath = new oh[n.type]().fromJSON(n))
              e = new Ya[m.type](e, m.options)
              break
            case '_0x2':
            case 'Instanced_0x2':
              e = f.parse(m)
              break
            case '_0x6':
              console.error(
                'THREE.ObjectLoader: Loading "_0x6" is not supported anymore.'
              )
              break
            default:
              console.warn(
                'THREE.ObjectLoader: Unsupported geometry type "' + m.type + '"'
              )
              continue
          }
          e.uuid = m.uuid
          void 0 !== m.name && (e.name = m.name)
          !0 === e.is_0x2 && void 0 !== m.userData && (e.userData = m.userData)
          d[m.uuid] = e
        }
      return d
    },
    parseMaterials: function (a, b) {
      var d = {},
        e = {}
      if (void 0 !== a) {
        var f = new zf()
        f.setTextures(b)
        for (var g = 0, k = a.length; g < k; g++) {
          var m = a[g]
          if ('MultiMaterial' === m.type) {
            for (var n = [], p = 0; p < m.materials.length; p++) {
              var r = m.materials[p]
              void 0 === d[r.uuid] && (d[r.uuid] = f.parse(r))
              n.push(d[r.uuid])
            }
            e[m.uuid] = n
          } else
            void 0 === d[m.uuid] && (d[m.uuid] = f.parse(m)),
              (e[m.uuid] = d[m.uuid])
        }
      }
      return e
    },
    parseAnimations: function (a) {
      for (var b = [], d = 0; d < a.length; d++) {
        var e = a[d],
          f = mb.parse(e)
        void 0 !== e.uuid && (f.uuid = e.uuid)
        b.push(f)
      }
      return b
    },
    parseImages: function (a, b) {
      function d(a) {
        e.manager.itemStart(a)
        return g.load(
          a,
          function () {
            e.manager.itemEnd(a)
          },
          void 0,
          function () {
            e.manager.itemError(a)
            e.manager.itemEnd(a)
          }
        )
      }
      var e = this,
        f = {},
        g
      if (void 0 !== a && 0 < a.length) {
        var k = new zg(b)
        g = new ud(k)
        g.setCrossOrigin(this.crossOrigin)
        for (var k = 0, m = a.length; k < m; k++) {
          var n = a[k],
            p = n.url
          if (Array.isArray(p)) {
            f[n.uuid] = []
            for (var r = 0, u = p.length; r < u; r++) {
              var w = p[r],
                w = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(w) ? w : e.resourcePath + w
              f[n.uuid].push(d(w))
            }
          } else
            (p = /^(\/\/)|([a-z]+:(\/\/)?)/i.test(n.url)
              ? n.url
              : e.resourcePath + n.url),
              (f[n.uuid] = d(p))
        }
      }
      return f
    },
    parseTextures: function (a, b) {
      function d(a, b) {
        if ('number' === typeof a) return a
        console.warn(
          'THREE.ObjectLoader.parseTexture: Constant should be in numeric form.',
          a
        )
        return b[a]
      }
      var e = {}
      if (void 0 !== a)
        for (var f = 0, l = a.length; f < l; f++) {
          var k = a[f]
          void 0 === k.image &&
            console.warn('THREE.ObjectLoader: No "image" specified for', k.uuid)
          void 0 === b[k.image] &&
            console.warn('THREE.ObjectLoader: Undefined image', k.image)
          var m = void 0,
            m = Array.isArray(b[k.image])
              ? new Mb(b[k.image])
              : new g(b[k.image])
          m.needsUpdate = !0
          m.uuid = k.uuid
          void 0 !== k.name && (m.name = k.name)
          void 0 !== k.mapping && (m.mapping = d(k.mapping, Uk))
          void 0 !== k.offset && m.offset.fromArray(k.offset)
          void 0 !== k.repeat && m.repeat.fromArray(k.repeat)
          void 0 !== k.center && m.center.fromArray(k.center)
          void 0 !== k.rotation && (m.rotation = k.rotation)
          void 0 !== k.wrap &&
            ((m.wrapS = d(k.wrap[0], Ii)), (m.wrapT = d(k.wrap[1], Ii)))
          void 0 !== k.format && (m.format = k.format)
          void 0 !== k.type && (m.type = k.type)
          void 0 !== k.encoding && (m.encoding = k.encoding)
          void 0 !== k.minFilter && (m.minFilter = d(k.minFilter, Ji))
          void 0 !== k.magFilter && (m.magFilter = d(k.magFilter, Ji))
          void 0 !== k.anisotropy && (m.anisotropy = k.anisotropy)
          void 0 !== k.flipY && (m.flipY = k.flipY)
          void 0 !== k.premultiplyAlpha &&
            (m.premultiplyAlpha = k.premultiplyAlpha)
          void 0 !== k.unpackAlignment &&
            (m.unpackAlignment = k.unpackAlignment)
          e[k.uuid] = m
        }
      return e
    },
    parseObject: function (a, b, d) {
      function e(a) {
        void 0 === b[a] &&
          console.warn('THREE.ObjectLoader: Undefined geometry', a)
        return b[a]
      }
      function f(a) {
        if (void 0 !== a) {
          if (Array.isArray(a)) {
            for (var b = [], e = 0, f = a.length; e < f; e++) {
              var h = a[e]
              void 0 === d[h] &&
                console.warn('THREE.ObjectLoader: Undefined material', h)
              b.push(d[h])
            }
            return b
          }
          void 0 === d[a] &&
            console.warn('THREE.ObjectLoader: Undefined material', a)
          return d[a]
        }
      }
      var g, k
      switch (a.type) {
        case 'ss':
          g = new fc()
          void 0 !== a.background &&
            Number.isInteger(a.background) &&
            (g.background = new H(a.background))
          void 0 !== a.fog &&
            ('Fog' === a.fog.type
              ? (g.fog = new Oe(a.fog.color, a.fog.near, a.fog.far))
              : 'FogExp2' === a.fog.type &&
                (g.fog = new Ne(a.fog.color, a.fog.density)))
          break
        case 'q4':
          g = new la(a.fov, a.aspect, a.near, a.far)
          void 0 !== a.focus && (g.focus = a.focus)
          void 0 !== a.zoom && (g.zoom = a.zoom)
          void 0 !== a.filmGauge && (g.filmGauge = a.filmGauge)
          void 0 !== a.filmOffset && (g.filmOffset = a.filmOffset)
          void 0 !== a.view && (g.view = Object.assign({}, a.view))
          break
        case 'OrthographicCamera':
          g = new wd(a.left, a.right, a.top, a.bottom, a.near, a.far)
          void 0 !== a.zoom && (g.zoom = a.zoom)
          void 0 !== a.view && (g.view = Object.assign({}, a.view))
          break
        case 'q10':
          g = new xf(a.color, a.intensity)
          break
        case 'q9':
          g = new wf(a.color, a.intensity)
          break
        case 'PointLight':
          g = new vf(a.color, a.intensity, a.distance, a.decay)
          break
        case 'RectAreaLight':
          g = new yf(a.color, a.intensity, a.width, a.height)
          break
        case 'SpotLight':
          g = new uf(
            a.color,
            a.intensity,
            a.distance,
            a.angle,
            a.penumbra,
            a.decay
          )
          break
        case 'HemisphereLight':
          g = new tf(a.color, a.groundColor, a.intensity)
          break
        case 'LightProbe':
          g = new ob().fromJSON(a)
          break
        case 'Skinnedna':
          console.warn(
            'THREE.ObjectLoader.parseObject() does not support Skinnedna yet.'
          )
        case 'na':
          g = e(a.geometry)
          k = f(a.material)
          g = new ca(g, k)
          break
        case 'Instancedna':
          g = e(a.geometry)
          k = f(a.material)
          var m = a.instanceMatrix
          g = new $d(g, k, a.count)
          g.instanceMatrix = new C(new Float32Array(m.array), 16)
          break
        case 'LOD':
          g = new Zd()
          break
        case 'Line':
          g = new ab(e(a.geometry), f(a.material), a.mode)
          break
        case 'LineLoop':
          g = new ff(e(a.geometry), f(a.material))
          break
        case 'b2':
          g = new qa(e(a.geometry), f(a.material))
          break
        case 'PointCloud':
        case 'Points':
          g = new dd(e(a.geometry), f(a.material))
          break
        case 'Sprite':
          g = new Xd(f(a.material))
          break
        case 'Group':
          g = new dc()
          break
        default:
          g = new n()
      }
      g.uuid = a.uuid
      void 0 !== a.name && (g.name = a.name)
      void 0 !== a.matrix
        ? (g.matrix.fromArray(a.matrix),
          void 0 !== a.matrixAutoUpdate &&
            (g.matrixAutoUpdate = a.matrixAutoUpdate),
          g.matrixAutoUpdate &&
            g.matrix.decompose(g.position, g.quaternion, g.scale))
        : (void 0 !== a.position && g.position.fromArray(a.position),
          void 0 !== a.rotation && g.rotation.fromArray(a.rotation),
          void 0 !== a.quaternion && g.quaternion.fromArray(a.quaternion),
          void 0 !== a.scale && g.scale.fromArray(a.scale))
      void 0 !== a.castShadow && (g.castShadow = a.castShadow)
      void 0 !== a.receiveShadow && (g.receiveShadow = a.receiveShadow)
      a.shadow &&
        (void 0 !== a.shadow.bias && (g.shadow.bias = a.shadow.bias),
        void 0 !== a.shadow.normalBias &&
          (g.shadow.normalBias = a.shadow.normalBias),
        void 0 !== a.shadow.radius && (g.shadow.radius = a.shadow.radius),
        void 0 !== a.shadow.mapSize &&
          g.shadow.mapSize.fromArray(a.shadow.mapSize),
        void 0 !== a.shadow.camera &&
          (g.shadow.camera = this.parseObject(a.shadow.camera)))
      void 0 !== a.visible && (g.visible = a.visible)
      void 0 !== a.frustumCulled && (g.frustumCulled = a.frustumCulled)
      void 0 !== a.renderOrder && (g.renderOrder = a.renderOrder)
      void 0 !== a.userData && (g.userData = a.userData)
      void 0 !== a.layers && (g.layers.mask = a.layers)
      if (void 0 !== a.children)
        for (m = a.children, k = 0; k < m.length; k++)
          g.add(this.parseObject(m[k], b, d))
      if ('LOD' === a.type)
        for (
          void 0 !== a.autoUpdate && (g.autoUpdate = a.autoUpdate),
            a = a.levels,
            m = 0;
          m < a.length;
          m++
        ) {
          k = a[m]
          var p = g.getObjectByProperty('uuid', k.object)
          void 0 !== p && g.addLevel(p, k.distance)
        }
      return g
    },
  })
  var Uk = {
      UVMapping: 300,
      CubeReflectionMapping: 301,
      CubeRefractionMapping: 302,
      EquirectangularReflectionMapping: 303,
      EquirectangularRefractionMapping: 304,
      CubeUVReflectionMapping: 306,
      CubeUVRefractionMapping: 307,
    },
    Ii = {
      RepeatWrapping: 1e3,
      ClampToEdgeWrapping: 1001,
      MirroredRepeatWrapping: 1002,
    },
    Ji = {
      NearestFilter: 1003,
      NearestMipmapNearestFilter: 1004,
      NearestMipmapLinearFilter: 1005,
      LinearFilter: 1006,
      LinearMipmapNearestFilter: 1007,
      LinearMipmapLinearFilter: 1008,
    }
  Gg.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Gg,
    isImageBitmapLoader: !0,
    setOptions: function (a) {
      this.options = a
      return this
    },
    load: function (a, b, d, e) {
      void 0 === a && (a = '')
      void 0 !== this.path && (a = this.path + a)
      a = this.manager.resolveURL(a)
      var f = this,
        g = Oc.get(a)
      if (void 0 !== g)
        return (
          f.manager.itemStart(a),
          setTimeout(function () {
            b && b(g)
            f.manager.itemEnd(a)
          }, 0),
          g
        )
      fetch(a)
        .then(function (a) {
          return a.blob()
        })
        .then(function (a) {
          return createImageBitmap(a, f.options)
        })
        .then(function (d) {
          Oc.add(a, d)
          b && b(d)
          f.manager.itemEnd(a)
        })
        ['catch'](function (b) {
          e && e(b)
          f.manager.itemError(a)
          f.manager.itemEnd(a)
        })
      f.manager.itemStart(a)
    },
  })
  Object.assign(Hg.prototype, {
    moveTo: function (a, b) {
      this.currentPath = new wb()
      this.subPaths.push(this.currentPath)
      this.currentPath.moveTo(a, b)
      return this
    },
    lineTo: function (a, b) {
      this.currentPath.lineTo(a, b)
      return this
    },
    quadraticCurveTo: function (a, b, d, e) {
      this.currentPath.quadraticCurveTo(a, b, d, e)
      return this
    },
    bezierCurveTo: function (a, b, d, e, f, g) {
      this.currentPath.bezierCurveTo(a, b, d, e, f, g)
      return this
    },
    splineThru: function (a) {
      this.currentPath.splineThru(a)
      return this
    },
    toShapes: function (a, b) {
      function d(a) {
        for (var b = [], d = 0, e = a.length; d < e; d++) {
          var f = a[d],
            h = new lc()
          h.curves = f.curves
          b.push(h)
        }
        return b
      }
      function e(a, b) {
        for (var d = b.length, e = !1, f = d - 1, h = 0; h < d; f = h++) {
          var g = b[f],
            l = b[h],
            k = l.x - g.x,
            m = l.y - g.y
          if (Math.abs(m) > Number.EPSILON) {
            if (
              (0 > m && ((g = b[h]), (k = -k), (l = b[f]), (m = -m)),
              !(a.y < g.y || a.y > l.y))
            )
              if (a.y === g.y) {
                if (a.x === g.x) return !0
              } else {
                f = m * (a.x - g.x) - k * (a.y - g.y)
                if (0 === f) return !0
                0 > f || (e = !e)
              }
          } else if (
            a.y === g.y &&
            ((l.x <= a.x && a.x <= g.x) || (g.x <= a.x && a.x <= l.x))
          )
            return !0
        }
        return e
      }
      var f = Nb.isClockWise,
        g = this.subPaths
      if (0 === g.length) return []
      if (!0 === b) return d(g)
      var k,
        m,
        n,
        p = []
      if (1 === g.length)
        return (m = g[0]), (n = new lc()), (n.curves = m.curves), p.push(n), p
      var r = !f(g[0].getPoints()),
        r = a ? !r : r
      n = []
      var u = [],
        w = [],
        v = 0,
        z
      u[v] = void 0
      w[v] = []
      for (var y = 0, x = g.length; y < x; y++)
        (m = g[y]),
          (z = m.getPoints()),
          (k = f(z)),
          (k = a ? !k : k)
            ? (!r && u[v] && v++,
              (u[v] = { s: new lc(), p: z }),
              (u[v].s.curves = m.curves),
              r && v++,
              (w[v] = []))
            : w[v].push({ h: m, p: z[0] })
      if (!u[0]) return d(g)
      if (1 < u.length) {
        m = !1
        f = []
        g = 0
        for (k = u.length; g < k; g++) n[g] = []
        g = 0
        for (k = u.length; g < k; g++)
          for (r = w[g], v = 0; v < r.length; v++) {
            z = r[v]
            y = !0
            for (x = 0; x < u.length; x++)
              e(z.p, u[x].p) &&
                (g !== x && f.push({ froms: g, tos: x, hole: v }),
                y ? ((y = !1), n[x].push(z)) : (m = !0))
            y && n[g].push(z)
          }
        0 < f.length && (m || (w = n))
      }
      f = 0
      for (g = u.length; f < g; f++)
        for (n = u[f].s, p.push(n), m = w[f], k = 0, r = m.length; k < r; k++)
          n.holes.push(m[k].h)
      return p
    },
  })
  Object.assign(Ig.prototype, {
    isFont: !0,
    generateShapes: function (a, b) {
      void 0 === b && (b = 100)
      for (
        var d = [],
          e = b,
          f = this.data,
          g = Array.from ? Array.from(a) : String(a).split(''),
          k = e / f.resolution,
          m =
            (f.boundingBox.yMax - f.boundingBox.yMin + f.underlineThickness) *
            k,
          e = [],
          n = 0,
          p = 0,
          r = 0;
        r < g.length;
        r++
      ) {
        var u = g[r]
        if ('\n' === u) (n = 0), (p -= m)
        else {
          var w = u,
            u = k,
            v = n,
            z = p,
            y = f,
            x = y.glyphs[w] || y.glyphs['?']
          if (x) {
            var w = new Hg(),
              C,
              B,
              E,
              L,
              G,
              H
            if (x.o)
              for (
                var y = x._cachedOutline || (x._cachedOutline = x.o.split(' ')),
                  Q = 0,
                  za = y.length;
                Q < za;

              )
                switch (y[Q++]) {
                  case 'm':
                    C = y[Q++] * u + v
                    B = y[Q++] * u + z
                    w.moveTo(C, B)
                    break
                  case 'l':
                    C = y[Q++] * u + v
                    B = y[Q++] * u + z
                    w.lineTo(C, B)
                    break
                  case 'q':
                    C = y[Q++] * u + v
                    B = y[Q++] * u + z
                    E = y[Q++] * u + v
                    L = y[Q++] * u + z
                    w.quadraticCurveTo(E, L, C, B)
                    break
                  case 'b':
                    ;(C = y[Q++] * u + v),
                      (B = y[Q++] * u + z),
                      (E = y[Q++] * u + v),
                      (L = y[Q++] * u + z),
                      (G = y[Q++] * u + v),
                      (H = y[Q++] * u + z),
                      w.bezierCurveTo(E, L, G, H, C, B)
                }
            u = { offsetX: x.ha * u, path: w }
          } else
            console.error(
              'THREE.Font: character "' +
                w +
                '" does not exists in font family ' +
                y.familyName +
                '.'
            ),
              (u = void 0)
          n += u.offsetX
          e.push(u.path)
        }
      }
      f = 0
      for (g = e.length; f < g; f++)
        Array.prototype.push.apply(d, e[f].toShapes())
      return d
    },
  })
  Jg.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Jg,
    load: function (a, b, d, e) {
      var f = this,
        g = new nb(this.manager)
      g.setPath(this.path)
      g.setRequestHeader(this.requestHeader)
      g.load(
        a,
        function (a) {
          var d
          try {
            d = JSON.parse(a)
          } catch (A) {
            console.warn(
              'THREE.FontLoader: typeface.js support is being deprecated. Use typeface.json instead.'
            ),
              (d = JSON.parse(a.substring(65, a.length - 2)))
          }
          a = f.parse(d)
          b && b(a)
        },
        d,
        e
      )
    },
    parse: function (a) {
      return new Ig(a)
    },
  })
  var cg,
    Mg = {
      getContext: function () {
        void 0 === cg &&
          (cg = new (window.AudioContext || window.webkitAudioContext)())
        return cg
      },
      setContext: function (a) {
        cg = a
      },
    }
  Df.prototype = Object.assign(Object.create(oa.prototype), {
    constructor: Df,
    load: function (a, b, d, e) {
      var f = this,
        g = new nb(f.manager)
      g.setResponseType('arraybuffer')
      g.setPath(f.path)
      g.setRequestHeader(f.requestHeader)
      g.load(
        a,
        function (d) {
          try {
            var g = d.slice(0)
            Mg.getContext().decodeAudioData(g, function (a) {
              b(a)
            })
          } catch (A) {
            e ? e(A) : console.error(A), f.manager.itemError(a)
          }
        },
        d,
        e
      )
    },
  })
  Kg.prototype = Object.assign(Object.create(ob.prototype), {
    constructor: Kg,
    isHemisphereLightProbe: !0,
    copy: function (a) {
      ob.prototype.copy.call(this, a)
      return this
    },
    toJSON: function (a) {
      return ob.prototype.toJSON.call(this, a)
    },
  })
  Lg.prototype = Object.assign(Object.create(ob.prototype), {
    constructor: Lg,
    isq10Probe: !0,
    copy: function (a) {
      ob.prototype.copy.call(this, a)
      return this
    },
    toJSON: function (a) {
      return ob.prototype.toJSON.call(this, a)
    },
  })
  var Ki = new O(),
    Li = new O()
  Object.assign(ei.prototype, {
    update: function (a) {
      var b = this._cache
      if (
        b.focus !== a.focus ||
        b.fov !== a.fov ||
        b.aspect !== a.aspect * this.aspect ||
        b.near !== a.near ||
        b.far !== a.far ||
        b.zoom !== a.zoom ||
        b.eyeSep !== this.eyeSep
      ) {
        b.focus = a.focus
        b.fov = a.fov
        b.aspect = a.aspect * this.aspect
        b.near = a.near
        b.far = a.far
        b.zoom = a.zoom
        b.eyeSep = this.eyeSep
        var d = a.projectionMatrix.clone(),
          e = b.eyeSep / 2,
          f = (e * b.near) / b.focus,
          g = (b.near * Math.tan(ea.DEG2RAD * b.fov * 0.5)) / b.zoom,
          k
        Li.elements[12] = -e
        Ki.elements[12] = e
        e = -g * b.aspect + f
        k = g * b.aspect + f
        d.elements[0] = (2 * b.near) / (k - e)
        d.elements[8] = (k + e) / (k - e)
        this.cameraL.projectionMatrix.copy(d)
        e = -g * b.aspect - f
        k = g * b.aspect - f
        d.elements[0] = (2 * b.near) / (k - e)
        d.elements[8] = (k + e) / (k - e)
        this.cameraR.projectionMatrix.copy(d)
      }
      this.cameraL.matrixWorld.copy(a.matrixWorld).multiply(Li)
      this.cameraR.matrixWorld.copy(a.matrixWorld).multiply(Ki)
    },
  })
  var xd = function (a) {
    this.autoStart = void 0 !== a ? a : !0
    this.elapsedTime = this.oldTime = this.startTime = 0
    this.running = !1
  }
  xd.prototype.start = function () {
    this.oldTime = this.startTime = ('undefined' === typeof performance
      ? Date
      : performance
    ).now()
    this.elapsedTime = 0
    this.running = !0
  }
  xd.prototype.stop = function () {
    this.getElapsedTime()
    this.autoStart = this.running = !1
  }
  xd.prototype.getElapsedTime = function () {
    this.getDelta()
    return this.elapsedTime
  }
  xd.prototype.getDelta = function () {
    var a = 0
    if (this.autoStart && !this.running) return this.start(), 0
    if (this.running) {
      var b = ('undefined' === typeof performance ? Date : performance).now(),
        a = (b - this.oldTime) / 1e3
      this.oldTime = b
      this.elapsedTime += a
    }
    return a
  }
  var Pc = new p(),
    Mi = new Z(),
    Vk = new p(),
    Qc = new p()
  xb.prototype = Object.create(n.prototype)
  xb.prototype.constructor = xb
  xb.prototype.getInput = function () {
    return this.gain
  }
  xb.prototype.removeFilter = function () {
    null !== this.filter &&
      (this.gain.disconnect(this.filter),
      this.filter.disconnect(this.context.destination),
      this.gain.connect(this.context.destination),
      (this.filter = null))
    return this
  }
  xb.prototype.getFilter = function () {
    return this.filter
  }
  xb.prototype.setFilter = function (a) {
    null !== this.filter
      ? (this.gain.disconnect(this.filter),
        this.filter.disconnect(this.context.destination))
      : this.gain.disconnect(this.context.destination)
    this.filter = a
    this.gain.connect(this.filter)
    this.filter.connect(this.context.destination)
    return this
  }
  xb.prototype.getMasterVolume = function () {
    return this.gain.gain.value
  }
  xb.prototype.setMasterVolume = function (a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, 0.01)
    return this
  }
  xb.prototype.updateMatrixWorld = function (a) {
    n.prototype.updateMatrixWorld.call(this, a)
    a = this.context.listener
    var b = this.up
    this.timeDelta = this._clock.getDelta()
    this.matrixWorld.decompose(Pc, Mi, Vk)
    Qc.set(0, 0, -1).applyQuaternion(Mi)
    if (a.positionX) {
      var d = this.context.currentTime + this.timeDelta
      a.positionX.linearRampToValueAtTime(Pc.x, d)
      a.positionY.linearRampToValueAtTime(Pc.y, d)
      a.positionZ.linearRampToValueAtTime(Pc.z, d)
      a.forwardX.linearRampToValueAtTime(Qc.x, d)
      a.forwardY.linearRampToValueAtTime(Qc.y, d)
      a.forwardZ.linearRampToValueAtTime(Qc.z, d)
      a.upX.linearRampToValueAtTime(b.x, d)
      a.upY.linearRampToValueAtTime(b.y, d)
      a.upZ.linearRampToValueAtTime(b.z, d)
    } else
      a.setPosition(Pc.x, Pc.y, Pc.z),
        a.setOrientation(Qc.x, Qc.y, Qc.z, b.x, b.y, b.z)
  }
  ja.prototype = Object.create(n.prototype)
  ja.prototype.constructor = ja
  ja.prototype.getOutput = function () {
    return this.gain
  }
  ja.prototype.setNodeSource = function (a) {
    this.hasPlaybackControl = !1
    this.sourceType = 'audioNode'
    this.source = a
    this.connect()
    return this
  }
  ja.prototype.setMediaElementSource = function (a) {
    this.hasPlaybackControl = !1
    this.sourceType = 'mediaNode'
    this.source = this.context.createMediaElementSource(a)
    this.connect()
    return this
  }
  ja.prototype.setMediaStreamSource = function (a) {
    this.hasPlaybackControl = !1
    this.sourceType = 'mediaStreamNode'
    this.source = this.context.createMediaStreamSource(a)
    this.connect()
    return this
  }
  ja.prototype.setBuffer = function (a) {
    this.buffer = a
    this.sourceType = 'buffer'
    this.autoplay && this.play()
    return this
  }
  ja.prototype.play = function (a) {
    void 0 === a && (a = 0)
    if (!0 === this.isPlaying)
      console.warn('THREE.Audio: Audio is already playing.')
    else if (!1 === this.hasPlaybackControl)
      console.warn('THREE.Audio: this Audio has no playback control.')
    else
      return (
        (this._startedAt = this.context.currentTime + a),
        (a = this.context.createBufferSource()),
        (a.buffer = this.buffer),
        (a.loop = this.loop),
        (a.loopStart = this.loopStart),
        (a.loopEnd = this.loopEnd),
        (a.onended = this.onEnded.bind(this)),
        a.start(this._startedAt, this._progress + this.offset, this.duration),
        (this.isPlaying = !0),
        (this.source = a),
        this.setDetune(this.detune),
        this.setPlaybackRate(this.playbackRate),
        this.connect()
      )
  }
  ja.prototype.pause = function () {
    if (!1 === this.hasPlaybackControl)
      console.warn('THREE.Audio: this Audio has no playback control.')
    else
      return (
        !0 === this.isPlaying &&
          ((this._progress +=
            Math.max(this.context.currentTime - this._startedAt, 0) *
            this.playbackRate),
          !0 === this.loop &&
            (this._progress %= this.duration || this.buffer.duration),
          this.source.stop(),
          (this.source.onended = null),
          (this.isPlaying = !1)),
        this
      )
  }
  ja.prototype.stop = function () {
    if (!1 === this.hasPlaybackControl)
      console.warn('THREE.Audio: this Audio has no playback control.')
    else
      return (
        (this._progress = 0),
        this.source.stop(),
        (this.source.onended = null),
        (this.isPlaying = !1),
        this
      )
  }
  ja.prototype.connect = function () {
    if (0 < this.filters.length) {
      this.source.connect(this.filters[0])
      for (var a = 1, b = this.filters.length; a < b; a++)
        this.filters[a - 1].connect(this.filters[a])
      this.filters[this.filters.length - 1].connect(this.getOutput())
    } else this.source.connect(this.getOutput())
    this._connected = !0
    return this
  }
  ja.prototype.disconnect = function () {
    if (0 < this.filters.length) {
      this.source.disconnect(this.filters[0])
      for (var a = 1, b = this.filters.length; a < b; a++)
        this.filters[a - 1].disconnect(this.filters[a])
      this.filters[this.filters.length - 1].disconnect(this.getOutput())
    } else this.source.disconnect(this.getOutput())
    this._connected = !1
    return this
  }
  ja.prototype.getFilters = function () {
    return this.filters
  }
  ja.prototype.setFilters = function (a) {
    a || (a = [])
    !0 === this._connected
      ? (this.disconnect(), (this.filters = a), this.connect())
      : (this.filters = a)
    return this
  }
  ja.prototype.setDetune = function (a) {
    this.detune = a
    if (void 0 !== this.source.detune)
      return (
        !0 === this.isPlaying &&
          this.source.detune.setTargetAtTime(
            this.detune,
            this.context.currentTime,
            0.01
          ),
        this
      )
  }
  ja.prototype.getDetune = function () {
    return this.detune
  }
  ja.prototype.getFilter = function () {
    return this.getFilters()[0]
  }
  ja.prototype.setFilter = function (a) {
    return this.setFilters(a ? [a] : [])
  }
  ja.prototype.setPlaybackRate = function (a) {
    if (!1 === this.hasPlaybackControl)
      console.warn('THREE.Audio: this Audio has no playback control.')
    else
      return (
        (this.playbackRate = a),
        !0 === this.isPlaying &&
          this.source.playbackRate.setTargetAtTime(
            this.playbackRate,
            this.context.currentTime,
            0.01
          ),
        this
      )
  }
  ja.prototype.getPlaybackRate = function () {
    return this.playbackRate
  }
  ja.prototype.onEnded = function () {
    this.isPlaying = !1
  }
  ja.prototype.getLoop = function () {
    return !1 === this.hasPlaybackControl
      ? (console.warn('THREE.Audio: this Audio has no playback control.'), !1)
      : this.loop
  }
  ja.prototype.setLoop = function (a) {
    if (!1 === this.hasPlaybackControl)
      console.warn('THREE.Audio: this Audio has no playback control.')
    else
      return (
        (this.loop = a),
        !0 === this.isPlaying && (this.source.loop = this.loop),
        this
      )
  }
  ja.prototype.setLoopStart = function (a) {
    this.loopStart = a
    return this
  }
  ja.prototype.setLoopEnd = function (a) {
    this.loopEnd = a
    return this
  }
  ja.prototype.getVolume = function () {
    return this.gain.gain.value
  }
  ja.prototype.setVolume = function (a) {
    this.gain.gain.setTargetAtTime(a, this.context.currentTime, 0.01)
    return this
  }
  var Rc = new p(),
    Ni = new Z(),
    Wk = new p(),
    Sc = new p()
  Wa.prototype = Object.create(ja.prototype)
  Wa.prototype.constructor = Wa
  Wa.prototype.getOutput = function () {
    return this.panner
  }
  Wa.prototype.getRefDistance = function () {
    return this.panner.refDistance
  }
  Wa.prototype.setRefDistance = function (a) {
    this.panner.refDistance = a
    return this
  }
  Wa.prototype.getRolloffFactor = function () {
    return this.panner.rolloffFactor
  }
  Wa.prototype.setRolloffFactor = function (a) {
    this.panner.rolloffFactor = a
    return this
  }
  Wa.prototype.getDistanceModel = function () {
    return this.panner.distanceModel
  }
  Wa.prototype.setDistanceModel = function (a) {
    this.panner.distanceModel = a
    return this
  }
  Wa.prototype.getMaxDistance = function () {
    return this.panner.maxDistance
  }
  Wa.prototype.setMaxDistance = function (a) {
    this.panner.maxDistance = a
    return this
  }
  Wa.prototype.setDirectionalCone = function (a, b, d) {
    this.panner.coneInnerAngle = a
    this.panner.coneOuterAngle = b
    this.panner.coneOuterGain = d
    return this
  }
  Wa.prototype.updateMatrixWorld = function (a) {
    ja.prototype.updateMatrixWorld.call(this, a)
    if (!0 !== this.hasPlaybackControl || !1 !== this.isPlaying)
      if (
        (this.matrixWorld.decompose(Rc, Ni, Wk),
        Sc.set(0, 0, 1).applyQuaternion(Ni),
        (a = this.panner),
        a.positionX)
      ) {
        var b = this.context.currentTime + this.listener.timeDelta
        a.positionX.linearRampToValueAtTime(Rc.x, b)
        a.positionY.linearRampToValueAtTime(Rc.y, b)
        a.positionZ.linearRampToValueAtTime(Rc.z, b)
        a.orientationX.linearRampToValueAtTime(Sc.x, b)
        a.orientationY.linearRampToValueAtTime(Sc.y, b)
        a.orientationZ.linearRampToValueAtTime(Sc.z, b)
      } else a.setPosition(Rc.x, Rc.y, Rc.z), a.setOrientation(Sc.x, Sc.y, Sc.z)
  }
  var dg = function (a, b) {
    this.analyser = a.context.createAnalyser()
    this.analyser.fftSize = void 0 !== b ? b : 2048
    this.data = new Uint8Array(this.analyser.frequencyBinCount)
    a.getOutput().connect(this.analyser)
  }
  dg.prototype.getFrequencyData = function () {
    this.analyser.getByteFrequencyData(this.data)
    return this.data
  }
  dg.prototype.getAverageFrequency = function () {
    for (var a = 0, b = this.getFrequencyData(), d = 0; d < b.length; d++)
      a += b[d]
    return a / b.length
  }
  Object.assign(Ng.prototype, {
    accumulate: function (a, b) {
      var d = this.buffer,
        e = this.valueSize,
        f = a * e + e,
        g = this.cumulativeWeight
      if (0 === g) {
        for (g = 0; g !== e; ++g) d[f + g] = d[g]
        g = b
      } else (g += b), this._mixBufferRegion(d, f, 0, b / g, e)
      this.cumulativeWeight = g
    },
    accumulateAdditive: function (a) {
      var b = this.buffer,
        d = this.valueSize,
        e = d * this._addIndex
      0 === this.cumulativeWeightAdditive && this._setIdentity()
      this._mixBufferRegionAdditive(b, e, 0, a, d)
      this.cumulativeWeightAdditive += a
    },
    apply: function (a) {
      var b = this.valueSize,
        d = this.buffer
      a = a * b + b
      var e = this.cumulativeWeight,
        f = this.cumulativeWeightAdditive,
        g = this.binding
      this.cumulativeWeightAdditive = this.cumulativeWeight = 0
      1 > e && this._mixBufferRegion(d, a, b * this._origIndex, 1 - e, b)
      0 < f && this._mixBufferRegionAdditive(d, a, this._addIndex * b, 1, b)
      e = b
      for (f = b + b; e !== f; ++e)
        if (d[e] !== d[e + b]) {
          g.setValue(d, a)
          break
        }
    },
    saveOriginalState: function () {
      var a = this.buffer,
        b = this.valueSize,
        d = b * this._origIndex
      this.binding.getValue(a, d)
      for (var e = b; e !== d; ++e) a[e] = a[d + (e % b)]
      this._setIdentity()
      this.cumulativeWeightAdditive = this.cumulativeWeight = 0
    },
    restoreOriginalState: function () {
      this.binding.setValue(this.buffer, 3 * this.valueSize)
    },
    _setAdditiveIdentityNumeric: function () {
      for (
        var a = this._addIndex * this.valueSize, b = a + this.valueSize;
        a < b;
        a++
      )
        this.buffer[a] = 0
    },
    _setAdditiveIdentityQuaternion: function () {
      this._setAdditiveIdentityNumeric()
      this.buffer[this._addIndex * this.valueSize + 3] = 1
    },
    _setAdditiveIdentityOther: function () {
      for (
        var a = this._origIndex * this.valueSize,
          b = this._addIndex * this.valueSize,
          d = 0;
        d < this.valueSize;
        d++
      )
        this.buffer[b + d] = this.buffer[a + d]
    },
    _select: function (a, b, d, e, f) {
      if (0.5 <= e) for (e = 0; e !== f; ++e) a[b + e] = a[d + e]
    },
    _slerp: function (a, b, d, e) {
      Z.slerpFlat(a, b, a, b, a, d, e)
    },
    _slerpAdditive: function (a, b, d, e, f) {
      f *= this._workIndex
      Z.multiplyQuaternionsFlat(a, f, a, b, a, d)
      Z.slerpFlat(a, b, a, b, a, f, e)
    },
    _lerp: function (a, b, d, e, f) {
      for (var g = 1 - e, h = 0; h !== f; ++h) {
        var k = b + h
        a[k] = a[k] * g + a[d + h] * e
      }
    },
    _lerpAdditive: function (a, b, d, e, f) {
      for (var g = 0; g !== f; ++g) {
        var h = b + g
        a[h] += a[d + g] * e
      }
    },
  })
  var Xk = RegExp('[\\[\\]\\.:\\/]', 'g'),
    Yk = '[^' + '\\[\\]\\.:\\/'.replace('\\.', '') + ']',
    Zk = /((?:WC+[\/:])*)/.source.replace('WC', '[^\\[\\]\\.:\\/]'),
    $k = /(WCOD+)?/.source.replace('WCOD', Yk),
    al = /(?:\.(WC+)(?:\[(.+)\])?)?/.source.replace('WC', '[^\\[\\]\\.:\\/]'),
    bl = /\.(WC+)(?:\[(.+)\])?/.source.replace('WC', '[^\\[\\]\\.:\\/]'),
    cl = new RegExp('^' + Zk + $k + al + bl + '$'),
    dl = ['material', 'materials', 'bones']
  Object.assign(fi.prototype, {
    getValue: function (a, b) {
      this.bind()
      var d = this._bindings[this._targetGroup.nCachedObjects_]
      void 0 !== d && d.getValue(a, b)
    },
    setValue: function (a, b) {
      for (
        var d = this._bindings,
          e = this._targetGroup.nCachedObjects_,
          f = d.length;
        e !== f;
        ++e
      )
        d[e].setValue(a, b)
    },
    bind: function () {
      for (
        var a = this._bindings,
          b = this._targetGroup.nCachedObjects_,
          d = a.length;
        b !== d;
        ++b
      )
        a[b].bind()
    },
    unbind: function () {
      for (
        var a = this._bindings,
          b = this._targetGroup.nCachedObjects_,
          d = a.length;
        b !== d;
        ++b
      )
        a[b].unbind()
    },
  })
  Object.assign(Ua, {
    Composite: fi,
    create: function (a, b, d) {
      return a && a.isAnimationObjectGroup
        ? new Ua.Composite(a, b, d)
        : new Ua(a, b, d)
    },
    sanitizeNodeName: function (a) {
      return a.replace(/\s/g, '_').replace(Xk, '')
    },
    parseTrackName: function (a) {
      var b = cl.exec(a)
      if (!b) throw Error('PropertyBinding: Cannot parse trackName: ' + a)
      var b = {
          nodeName: b[2],
          objectName: b[3],
          objectIndex: b[4],
          propertyName: b[5],
          propertyIndex: b[6],
        },
        d = b.nodeName && b.nodeName.lastIndexOf('.')
      if (void 0 !== d && -1 !== d) {
        var e = b.nodeName.substring(d + 1)
        ;-1 !== dl.indexOf(e) &&
          ((b.nodeName = b.nodeName.substring(0, d)), (b.objectName = e))
      }
      if (null === b.propertyName || 0 === b.propertyName.length)
        throw Error(
          'PropertyBinding: can not parse propertyName from trackName: ' + a
        )
      return b
    },
    findNode: function (a, b) {
      if (
        !b ||
        '' === b ||
        '.' === b ||
        -1 === b ||
        b === a.name ||
        b === a.uuid
      )
        return a
      if (a.skeleton) {
        var d = a.skeleton.getBoneByName(b)
        if (void 0 !== d) return d
      }
      if (a.children) {
        var e = function (a) {
          for (var d = 0; d < a.length; d++) {
            var f = a[d]
            if (f.name === b || f.uuid === b || (f = e(f.children))) return f
          }
          return null
        }
        if ((d = e(a.children))) return d
      }
      return null
    },
  })
  Object.assign(Ua.prototype, {
    _getValue_unavailable: function () {},
    _setValue_unavailable: function () {},
    BindingType: {
      Direct: 0,
      EntireArray: 1,
      ArrayElement: 2,
      HasFromToArray: 3,
    },
    Versioning: { None: 0, NeedsUpdate: 1, MatrixWorldNeedsUpdate: 2 },
    GetterByBindingType: [
      function (a, b) {
        a[b] = this.node[this.propertyName]
      },
      function (a, b) {
        for (var d = this.resolvedProperty, e = 0, f = d.length; e !== f; ++e)
          a[b++] = d[e]
      },
      function (a, b) {
        a[b] = this.resolvedProperty[this.propertyIndex]
      },
      function (a, b) {
        this.resolvedProperty.toArray(a, b)
      },
    ],
    SetterByBindingTypeAndVersioning: [
      [
        function (a, b) {
          this.targetObject[this.propertyName] = a[b]
        },
        function (a, b) {
          this.targetObject[this.propertyName] = a[b]
          this.targetObject.needsUpdate = !0
        },
        function (a, b) {
          this.targetObject[this.propertyName] = a[b]
          this.targetObject.matrixWorldNeedsUpdate = !0
        },
      ],
      [
        function (a, b) {
          for (var d = this.resolvedProperty, e = 0, f = d.length; e !== f; ++e)
            d[e] = a[b++]
        },
        function (a, b) {
          for (var d = this.resolvedProperty, e = 0, f = d.length; e !== f; ++e)
            d[e] = a[b++]
          this.targetObject.needsUpdate = !0
        },
        function (a, b) {
          for (var d = this.resolvedProperty, e = 0, f = d.length; e !== f; ++e)
            d[e] = a[b++]
          this.targetObject.matrixWorldNeedsUpdate = !0
        },
      ],
      [
        function (a, b) {
          this.resolvedProperty[this.propertyIndex] = a[b]
        },
        function (a, b) {
          this.resolvedProperty[this.propertyIndex] = a[b]
          this.targetObject.needsUpdate = !0
        },
        function (a, b) {
          this.resolvedProperty[this.propertyIndex] = a[b]
          this.targetObject.matrixWorldNeedsUpdate = !0
        },
      ],
      [
        function (a, b) {
          this.resolvedProperty.fromArray(a, b)
        },
        function (a, b) {
          this.resolvedProperty.fromArray(a, b)
          this.targetObject.needsUpdate = !0
        },
        function (a, b) {
          this.resolvedProperty.fromArray(a, b)
          this.targetObject.matrixWorldNeedsUpdate = !0
        },
      ],
    ],
    getValue: function (a, b) {
      this.bind()
      this.getValue(a, b)
    },
    setValue: function (a, b) {
      this.bind()
      this.setValue(a, b)
    },
    bind: function () {
      var a = this.node,
        b = this.parsedPath,
        d = b.objectName,
        e = b.propertyName,
        f = b.propertyIndex
      a ||
        (this.node = a =
          Ua.findNode(this.rootNode, b.nodeName) || this.rootNode)
      this.getValue = this._getValue_unavailable
      this.setValue = this._setValue_unavailable
      if (a) {
        if (d) {
          var g = b.objectIndex
          switch (d) {
            case 'materials':
              if (!a.material) {
                console.error(
                  'THREE.PropertyBinding: Can not bind to material as node does not have a material.',
                  this
                )
                return
              }
              if (!a.material.materials) {
                console.error(
                  'THREE.PropertyBinding: Can not bind to material.materials as node.material does not have a materials array.',
                  this
                )
                return
              }
              a = a.material.materials
              break
            case 'bones':
              if (!a.skeleton) {
                console.error(
                  'THREE.PropertyBinding: Can not bind to bones as node does not have a skeleton.',
                  this
                )
                return
              }
              a = a.skeleton.bones
              for (d = 0; d < a.length; d++)
                if (a[d].name === g) {
                  g = d
                  break
                }
              break
            default:
              if (void 0 === a[d]) {
                console.error(
                  'THREE.PropertyBinding: Can not bind to objectName of node undefined.',
                  this
                )
                return
              }
              a = a[d]
          }
          if (void 0 !== g) {
            if (void 0 === a[g]) {
              console.error(
                'THREE.PropertyBinding: Trying to bind to objectIndex of objectName, but is undefined.',
                this,
                a
              )
              return
            }
            a = a[g]
          }
        }
        g = a[e]
        if (void 0 === g)
          console.error(
            'THREE.PropertyBinding: Trying to update property for track: ' +
              b.nodeName +
              '.' +
              e +
              " but it wasn't found.",
            a
          )
        else {
          b = this.Versioning.None
          this.targetObject = a
          void 0 !== a.needsUpdate
            ? (b = this.Versioning.NeedsUpdate)
            : void 0 !== a.matrixWorldNeedsUpdate &&
              (b = this.Versioning.MatrixWorldNeedsUpdate)
          d = this.BindingType.Direct
          if (void 0 !== f) {
            if ('morphTargetInfluences' === e) {
              if (!a.geometry) {
                console.error(
                  'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.',
                  this
                )
                return
              }
              if (a.geometry.is_0x2) {
                if (!a.geometry.morphAttributes) {
                  console.error(
                    'THREE.PropertyBinding: Can not bind to morphTargetInfluences because node does not have a geometry.morphAttributes.',
                    this
                  )
                  return
                }
                void 0 !== a.morphTargetDictionary[f] &&
                  (f = a.morphTargetDictionary[f])
              } else {
                console.error(
                  'THREE.PropertyBinding: Can not bind to morphTargetInfluences on THREE._0x6. Use THREE._0x2 instead.',
                  this
                )
                return
              }
            }
            d = this.BindingType.ArrayElement
            this.resolvedProperty = g
            this.propertyIndex = f
          } else
            void 0 !== g.fromArray && void 0 !== g.toArray
              ? ((d = this.BindingType.HasFromToArray),
                (this.resolvedProperty = g))
              : Array.isArray(g)
              ? ((d = this.BindingType.EntireArray),
                (this.resolvedProperty = g))
              : (this.propertyName = e)
          this.getValue = this.GetterByBindingType[d]
          this.setValue = this.SetterByBindingTypeAndVersioning[d][b]
        }
      } else
        console.error(
          'THREE.PropertyBinding: Trying to update node for track: ' +
            this.path +
            " but it wasn't found."
        )
    },
    unbind: function () {
      this.node = null
      this.getValue = this._getValue_unbound
      this.setValue = this._setValue_unbound
    },
  })
  Object.assign(Ua.prototype, {
    _getValue_unbound: Ua.prototype.getValue,
    _setValue_unbound: Ua.prototype.setValue,
  })
  Object.assign(gi.prototype, {
    isAnimationObjectGroup: !0,
    add: function () {
      for (
        var a = this._objects,
          b = this._indicesByUUID,
          d = this._paths,
          e = this._parsedPaths,
          f = this._bindings,
          g = f.length,
          k = void 0,
          m = a.length,
          n = this.nCachedObjects_,
          p = 0,
          r = arguments.length;
        p !== r;
        ++p
      ) {
        var u = arguments[p],
          w = u.uuid,
          v = b[w]
        if (void 0 === v) {
          v = m++
          b[w] = v
          a.push(u)
          for (var v = 0, z = g; v !== z; ++v) f[v].push(new Ua(u, d[v], e[v]))
        } else if (v < n) {
          var k = a[v],
            z = --n,
            y = a[z]
          b[y.uuid] = v
          a[v] = y
          b[w] = z
          a[z] = u
          w = 0
          for (y = g; w !== y; ++w) {
            var x = f[w],
              C = x[v]
            x[v] = x[z]
            void 0 === C && (C = new Ua(u, d[w], e[w]))
            x[z] = C
          }
        } else
          a[v] !== k &&
            console.error(
              'THREE.AnimationObjectGroup: Different objects with the same UUID detected. Clean the caches or recreate your infrastructure when reloading scenes.'
            )
      }
      this.nCachedObjects_ = n
    },
    remove: function () {
      for (
        var a = this._objects,
          b = this._indicesByUUID,
          d = this._bindings,
          e = d.length,
          f = this.nCachedObjects_,
          g = 0,
          k = arguments.length;
        g !== k;
        ++g
      ) {
        var m = arguments[g],
          n = m.uuid,
          p = b[n]
        if (void 0 !== p && p >= f) {
          var r = f++,
            u = a[r]
          b[u.uuid] = p
          a[p] = u
          b[n] = r
          a[r] = m
          m = 0
          for (n = e; m !== n; ++m) {
            var u = d[m],
              w = u[p]
            u[p] = u[r]
            u[r] = w
          }
        }
      }
      this.nCachedObjects_ = f
    },
    uncache: function () {
      for (
        var a = this._objects,
          b = this._indicesByUUID,
          d = this._bindings,
          e = d.length,
          f = this.nCachedObjects_,
          g = a.length,
          k = 0,
          m = arguments.length;
        k !== m;
        ++k
      ) {
        var n = arguments[k].uuid,
          p = b[n]
        if (void 0 !== p)
          if ((delete b[n], p < f)) {
            var n = --f,
              r = a[n],
              u = --g,
              w = a[u]
            b[r.uuid] = p
            a[p] = r
            b[w.uuid] = n
            a[n] = w
            a.pop()
            r = 0
            for (w = e; r !== w; ++r) {
              var v = d[r],
                z = v[u]
              v[p] = v[n]
              v[n] = z
              v.pop()
            }
          } else
            for (
              n = --g, u = a[n], b[u.uuid] = p, a[p] = u, a.pop(), u = 0, r = e;
              u !== r;
              ++u
            )
              (w = d[u]), (w[p] = w[n]), w.pop()
      }
      this.nCachedObjects_ = f
    },
    subscribe_: function (a, b) {
      var d = this._bindingsIndicesByPath,
        e = d[a],
        f = this._bindings
      if (void 0 !== e) return f[e]
      var g = this._paths,
        k = this._parsedPaths,
        m = this._objects,
        n = this.nCachedObjects_,
        p = Array(m.length),
        e = f.length
      d[a] = e
      g.push(a)
      k.push(b)
      f.push(p)
      d = n
      for (e = m.length; d !== e; ++d) p[d] = new Ua(m[d], a, b)
      return p
    },
    unsubscribe_: function (a) {
      var b = this._bindingsIndicesByPath,
        d = b[a]
      if (void 0 !== d) {
        var e = this._paths,
          f = this._parsedPaths,
          g = this._bindings,
          k = g.length - 1,
          m = g[k]
        b[a[k]] = d
        g[d] = m
        g.pop()
        f[d] = f[k]
        f.pop()
        e[d] = e[k]
        e.pop()
      }
    },
  })
  var na = function (a, b, d, e) {
    this._mixer = a
    this._clip = b
    this._localRoot = d || null
    this.blendMode = e || b.blendMode
    a = b.tracks
    b = a.length
    d = Array(b)
    e = { endingStart: 2400, endingEnd: 2400 }
    for (var f = 0; f !== b; ++f) {
      var g = a[f].createInterpolant(null)
      d[f] = g
      g.settings = e
    }
    this._interpolantSettings = e
    this._interpolants = d
    this._propertyBindings = Array(b)
    this._weightInterpolant = this._timeScaleInterpolant = this._byClipCacheIndex = this._cacheIndex = null
    this.loop = 2201
    this._loopCount = -1
    this._startTime = null
    this.time = 0
    this._effectiveWeight = this.weight = this._effectiveTimeScale = this.timeScale = 1
    this.repetitions = Infinity
    this.paused = !1
    this.enabled = !0
    this.clampWhenFinished = !1
    this.zeroSlopeAtEnd = this.zeroSlopeAtStart = !0
  }
  na.prototype.play = function () {
    this._mixer._activateAction(this)
    return this
  }
  na.prototype.stop = function () {
    this._mixer._deactivateAction(this)
    return this.reset()
  }
  na.prototype.reset = function () {
    this.paused = !1
    this.enabled = !0
    this.time = 0
    this._loopCount = -1
    this._startTime = null
    return this.stopFading().stopWarping()
  }
  na.prototype.isRunning = function () {
    return (
      this.enabled &&
      !this.paused &&
      0 !== this.timeScale &&
      null === this._startTime &&
      this._mixer._isActiveAction(this)
    )
  }
  na.prototype.isScheduled = function () {
    return this._mixer._isActiveAction(this)
  }
  na.prototype.startAt = function (a) {
    this._startTime = a
    return this
  }
  na.prototype.setLoop = function (a, b) {
    this.loop = a
    this.repetitions = b
    return this
  }
  na.prototype.setEffectiveWeight = function (a) {
    this.weight = a
    this._effectiveWeight = this.enabled ? a : 0
    return this.stopFading()
  }
  na.prototype.getEffectiveWeight = function () {
    return this._effectiveWeight
  }
  na.prototype.fadeIn = function (a) {
    return this._scheduleFading(a, 0, 1)
  }
  na.prototype.fadeOut = function (a) {
    return this._scheduleFading(a, 1, 0)
  }
  na.prototype.crossFadeFrom = function (a, b, d) {
    a.fadeOut(b)
    this.fadeIn(b)
    if (d) {
      d = this._clip.duration
      var e = a._clip.duration,
        f = d / e
      a.warp(1, e / d, b)
      this.warp(f, 1, b)
    }
    return this
  }
  na.prototype.crossFadeTo = function (a, b, d) {
    return a.crossFadeFrom(this, b, d)
  }
  na.prototype.stopFading = function () {
    var a = this._weightInterpolant
    null !== a &&
      ((this._weightInterpolant = null),
      this._mixer._takeBackControlInterpolant(a))
    return this
  }
  na.prototype.setEffectiveTimeScale = function (a) {
    this.timeScale = a
    this._effectiveTimeScale = this.paused ? 0 : a
    return this.stopWarping()
  }
  na.prototype.getEffectiveTimeScale = function () {
    return this._effectiveTimeScale
  }
  na.prototype.setDuration = function (a) {
    this.timeScale = this._clip.duration / a
    return this.stopWarping()
  }
  na.prototype.syncWith = function (a) {
    this.time = a.time
    this.timeScale = a.timeScale
    return this.stopWarping()
  }
  na.prototype.halt = function (a) {
    return this.warp(this._effectiveTimeScale, 0, a)
  }
  na.prototype.warp = function (a, b, d) {
    var e = this._mixer,
      f = e.time,
      g = this.timeScale,
      k = this._timeScaleInterpolant
    null === k && (this._timeScaleInterpolant = k = e._lendControlInterpolant())
    e = k.parameterPositions
    k = k.sampleValues
    e[0] = f
    e[1] = f + d
    k[0] = a / g
    k[1] = b / g
    return this
  }
  na.prototype.stopWarping = function () {
    var a = this._timeScaleInterpolant
    null !== a &&
      ((this._timeScaleInterpolant = null),
      this._mixer._takeBackControlInterpolant(a))
    return this
  }
  na.prototype.getMixer = function () {
    return this._mixer
  }
  na.prototype.getClip = function () {
    return this._clip
  }
  na.prototype.getRoot = function () {
    return this._localRoot || this._mixer._root
  }
  na.prototype._update = function (a, b, d, e) {
    if (this.enabled) {
      var f = this._startTime
      if (null !== f) {
        b = (a - f) * d
        if (0 > b || 0 === d) return
        this._startTime = null
        b *= d
      }
      b *= this._updateTimeScale(a)
      d = this._updateTime(b)
      a = this._updateWeight(a)
      if (0 < a)
        switch (
          ((b = this._interpolants),
          (f = this._propertyBindings),
          this.blendMode)
        ) {
          case 2501:
            e = 0
            for (var g = b.length; e !== g; ++e)
              b[e].evaluate(d), f[e].accumulateAdditive(a)
            break
          default:
            for (var g = 0, k = b.length; g !== k; ++g)
              b[g].evaluate(d), f[g].accumulate(e, a)
        }
    } else this._updateWeight(a)
  }
  na.prototype._updateWeight = function (a) {
    var b = 0
    if (this.enabled) {
      var b = this.weight,
        d = this._weightInterpolant
      if (null !== d) {
        var e = d.evaluate(a)[0],
          b = b * e
        a > d.parameterPositions[1] &&
          (this.stopFading(), 0 === e && (this.enabled = !1))
      }
    }
    return (this._effectiveWeight = b)
  }
  na.prototype._updateTimeScale = function (a) {
    var b = 0
    if (!this.paused) {
      var b = this.timeScale,
        d = this._timeScaleInterpolant
      if (null !== d) {
        var e = d.evaluate(a)[0],
          b = b * e
        a > d.parameterPositions[1] &&
          (this.stopWarping(),
          0 === b ? (this.paused = !0) : (this.timeScale = b))
      }
    }
    return (this._effectiveTimeScale = b)
  }
  na.prototype._updateTime = function (a) {
    var b = this._clip.duration,
      d = this.loop,
      e = this.time + a,
      f = this._loopCount,
      g = 2202 === d
    if (0 === a) return -1 === f ? e : g && 1 === (f & 1) ? b - e : e
    if (2200 === d)
      a: {
        if (
          (-1 === f && ((this._loopCount = 0), this._setEndings(!0, !0, !1)),
          e >= b)
        )
          e = b
        else if (0 > e) e = 0
        else {
          this.time = e
          break a
        }
        this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1)
        this.time = e
        this._mixer.dispatchEvent({
          type: 'finished',
          action: this,
          direction: 0 > a ? -1 : 1,
        })
      }
    else {
      ;-1 === f &&
        (0 <= a
          ? ((f = 0), this._setEndings(!0, 0 === this.repetitions, g))
          : this._setEndings(0 === this.repetitions, !0, g))
      if (e >= b || 0 > e) {
        var d = Math.floor(e / b),
          e = e - b * d,
          f = f + Math.abs(d),
          k = this.repetitions - f
        0 >= k
          ? (this.clampWhenFinished ? (this.paused = !0) : (this.enabled = !1),
            (this.time = e = 0 < a ? b : 0),
            this._mixer.dispatchEvent({
              type: 'finished',
              action: this,
              direction: 0 < a ? 1 : -1,
            }))
          : (1 === k
              ? ((a = 0 > a), this._setEndings(a, !a, g))
              : this._setEndings(!1, !1, g),
            (this._loopCount = f),
            (this.time = e),
            this._mixer.dispatchEvent({
              type: 'loop',
              action: this,
              loopDelta: d,
            }))
      } else this.time = e
      if (g && 1 === (f & 1)) return b - e
    }
    return e
  }
  na.prototype._setEndings = function (a, b, d) {
    var e = this._interpolantSettings
    d
      ? ((e.endingStart = 2401), (e.endingEnd = 2401))
      : ((e.endingStart = a ? (this.zeroSlopeAtStart ? 2401 : 2400) : 2402),
        (e.endingEnd = b ? (this.zeroSlopeAtEnd ? 2401 : 2400) : 2402))
  }
  na.prototype._scheduleFading = function (a, b, d) {
    var e = this._mixer,
      f = e.time,
      g = this._weightInterpolant
    null === g && (this._weightInterpolant = g = e._lendControlInterpolant())
    e = g.parameterPositions
    g = g.sampleValues
    e[0] = f
    g[0] = b
    e[1] = f + a
    g[1] = d
    return this
  }
  Og.prototype = Object.assign(Object.create(m.prototype), {
    constructor: Og,
    _bindAction: function (a, b) {
      var d = a._localRoot || this._root,
        e = a._clip.tracks,
        f = e.length,
        g = a._propertyBindings,
        k = a._interpolants,
        m = d.uuid,
        n = this._bindingsByRootAndName,
        p = n[m]
      void 0 === p && ((p = {}), (n[m] = p))
      for (n = 0; n !== f; ++n) {
        var r = e[n],
          u = r.name,
          w = p[u]
        if (void 0 === w) {
          w = g[n]
          if (void 0 !== w) {
            null === w._cacheIndex &&
              (++w.referenceCount, this._addInactiveBinding(w, m, u))
            continue
          }
          w = new Ng(
            Ua.create(d, u, b && b._propertyBindings[n].binding.parsedPath),
            r.ValueTypeName,
            r.getValueSize()
          )
          ++w.referenceCount
          this._addInactiveBinding(w, m, u)
        }
        g[n] = w
        k[n].resultBuffer = w.buffer
      }
    },
    _activateAction: function (a) {
      if (!this._isActiveAction(a)) {
        if (null === a._cacheIndex) {
          var b = (a._localRoot || this._root).uuid,
            d = a._clip.uuid,
            e = this._actionsByClip[d]
          this._bindAction(a, e && e.knownActions[0])
          this._addInactiveAction(a, d, b)
        }
        b = a._propertyBindings
        d = 0
        for (e = b.length; d !== e; ++d) {
          var f = b[d]
          0 === f.useCount++ && (this._lendBinding(f), f.saveOriginalState())
        }
        this._lendAction(a)
      }
    },
    _deactivateAction: function (a) {
      if (this._isActiveAction(a)) {
        for (var b = a._propertyBindings, d = 0, e = b.length; d !== e; ++d) {
          var f = b[d]
          0 === --f.useCount &&
            (f.restoreOriginalState(), this._takeBackBinding(f))
        }
        this._takeBackAction(a)
      }
    },
    _initMemoryManager: function () {
      this._actions = []
      this._nActiveActions = 0
      this._actionsByClip = {}
      this._bindings = []
      this._nActiveBindings = 0
      this._bindingsByRootAndName = {}
      this._controlInterpolants = []
      this._nActiveControlInterpolants = 0
      var a = this
      this.stats = {
        actions: {
          total: function () {
            return a._actions.length
          },
          inUse: function () {
            return a._nActiveActions
          },
        },
        bindings: {
          total: function () {
            return a._bindings.length
          },
          inUse: function () {
            return a._nActiveBindings
          },
        },
        controlInterpolants: {
          total: function () {
            return a._controlInterpolants.length
          },
          inUse: function () {
            return a._nActiveControlInterpolants
          },
        },
      }
    },
    _isActiveAction: function (a) {
      a = a._cacheIndex
      return null !== a && a < this._nActiveActions
    },
    _addInactiveAction: function (a, b, d) {
      var e = this._actions,
        f = this._actionsByClip,
        g = f[b]
      void 0 === g
        ? ((g = { knownActions: [a], actionByRoot: {} }),
          (a._byClipCacheIndex = 0),
          (f[b] = g))
        : ((b = g.knownActions), (a._byClipCacheIndex = b.length), b.push(a))
      a._cacheIndex = e.length
      e.push(a)
      g.actionByRoot[d] = a
    },
    _removeInactiveAction: function (a) {
      var b = this._actions,
        d = b[b.length - 1],
        e = a._cacheIndex
      d._cacheIndex = e
      b[e] = d
      b.pop()
      a._cacheIndex = null
      var b = a._clip.uuid,
        d = this._actionsByClip,
        e = d[b],
        f = e.knownActions,
        g = f[f.length - 1],
        k = a._byClipCacheIndex
      g._byClipCacheIndex = k
      f[k] = g
      f.pop()
      a._byClipCacheIndex = null
      delete e.actionByRoot[(a._localRoot || this._root).uuid]
      0 === f.length && delete d[b]
      this._removeInactiveBindingsForAction(a)
    },
    _removeInactiveBindingsForAction: function (a) {
      a = a._propertyBindings
      for (var b = 0, d = a.length; b !== d; ++b) {
        var e = a[b]
        0 === --e.referenceCount && this._removeInactiveBinding(e)
      }
    },
    _lendAction: function (a) {
      var b = this._actions,
        d = a._cacheIndex,
        e = this._nActiveActions++,
        f = b[e]
      a._cacheIndex = e
      b[e] = a
      f._cacheIndex = d
      b[d] = f
    },
    _takeBackAction: function (a) {
      var b = this._actions,
        d = a._cacheIndex,
        e = --this._nActiveActions,
        f = b[e]
      a._cacheIndex = e
      b[e] = a
      f._cacheIndex = d
      b[d] = f
    },
    _addInactiveBinding: function (a, b, d) {
      var e = this._bindingsByRootAndName,
        f = this._bindings,
        g = e[b]
      void 0 === g && ((g = {}), (e[b] = g))
      g[d] = a
      a._cacheIndex = f.length
      f.push(a)
    },
    _removeInactiveBinding: function (a) {
      var b = this._bindings,
        d = a.binding,
        e = d.rootNode.uuid,
        d = d.path,
        f = this._bindingsByRootAndName,
        g = f[e],
        k = b[b.length - 1]
      a = a._cacheIndex
      k._cacheIndex = a
      b[a] = k
      b.pop()
      delete g[d]
      0 === Object.keys(g).length && delete f[e]
    },
    _lendBinding: function (a) {
      var b = this._bindings,
        d = a._cacheIndex,
        e = this._nActiveBindings++,
        f = b[e]
      a._cacheIndex = e
      b[e] = a
      f._cacheIndex = d
      b[d] = f
    },
    _takeBackBinding: function (a) {
      var b = this._bindings,
        d = a._cacheIndex,
        e = --this._nActiveBindings,
        f = b[e]
      a._cacheIndex = e
      b[e] = a
      f._cacheIndex = d
      b[d] = f
    },
    _lendControlInterpolant: function () {
      var a = this._controlInterpolants,
        b = this._nActiveControlInterpolants++,
        d = a[b]
      void 0 === d &&
        ((d = new ve(
          new Float32Array(2),
          new Float32Array(2),
          1,
          this._controlInterpolantsResultBuffer
        )),
        (d.__cacheIndex = b),
        (a[b] = d))
      return d
    },
    _takeBackControlInterpolant: function (a) {
      var b = this._controlInterpolants,
        d = a.__cacheIndex,
        e = --this._nActiveControlInterpolants,
        f = b[e]
      a.__cacheIndex = e
      b[e] = a
      f.__cacheIndex = d
      b[d] = f
    },
    _controlInterpolantsResultBuffer: new Float32Array(1),
    clipAction: function (a, b, d) {
      var e = b || this._root,
        f = e.uuid,
        e = 'string' === typeof a ? mb.findByName(e, a) : a
      a = null !== e ? e.uuid : a
      var g = this._actionsByClip[a],
        k = null
      void 0 === d && (d = null !== e ? e.blendMode : 2500)
      if (void 0 !== g) {
        k = g.actionByRoot[f]
        if (void 0 !== k && k.blendMode === d) return k
        k = g.knownActions[0]
        null === e && (e = k._clip)
      }
      if (null === e) return null
      b = new na(this, e, b, d)
      this._bindAction(b, k)
      this._addInactiveAction(b, a, f)
      return b
    },
    existingAction: function (a, b) {
      var d = b || this._root,
        e = d.uuid,
        d = 'string' === typeof a ? mb.findByName(d, a) : a,
        d = this._actionsByClip[d ? d.uuid : a]
      return void 0 !== d ? d.actionByRoot[e] || null : null
    },
    stopAllAction: function () {
      for (var a = this._actions, b = this._nActiveActions - 1; 0 <= b; --b)
        a[b].stop()
      return this
    },
    update: function (a) {
      a *= this.timeScale
      for (
        var b = this._actions,
          d = this._nActiveActions,
          e = (this.time += a),
          f = Math.sign(a),
          g = (this._accuIndex ^= 1),
          k = 0;
        k !== d;
        ++k
      )
        b[k]._update(e, a, f, g)
      a = this._bindings
      b = this._nActiveBindings
      for (d = 0; d !== b; ++d) a[d].apply(g)
      return this
    },
    setTime: function (a) {
      for (var b = (this.time = 0); b < this._actions.length; b++)
        this._actions[b].time = 0
      return this.update(a)
    },
    getRoot: function () {
      return this._root
    },
    uncacheClip: function (a) {
      var b = this._actions
      a = a.uuid
      var d = this._actionsByClip,
        e = d[a]
      if (void 0 !== e) {
        for (var e = e.knownActions, f = 0, g = e.length; f !== g; ++f) {
          var k = e[f]
          this._deactivateAction(k)
          var m = k._cacheIndex,
            n = b[b.length - 1]
          k._cacheIndex = null
          k._byClipCacheIndex = null
          n._cacheIndex = m
          b[m] = n
          b.pop()
          this._removeInactiveBindingsForAction(k)
        }
        delete d[a]
      }
    },
    uncacheRoot: function (a) {
      a = a.uuid
      var b = this._actionsByClip,
        d
      for (d in b) {
        var e = b[d].actionByRoot[a]
        void 0 !== e &&
          (this._deactivateAction(e), this._removeInactiveAction(e))
      }
      d = this._bindingsByRootAndName[a]
      if (void 0 !== d)
        for (var f in d)
          (a = d[f]), a.restoreOriginalState(), this._removeInactiveBinding(a)
    },
    uncacheAction: function (a, b) {
      var d = this.existingAction(a, b)
      null !== d && (this._deactivateAction(d), this._removeInactiveAction(d))
    },
  })
  var eg = function (a, b) {
    'string' === typeof a &&
      (console.warn('THREE.Uniform: Type parameter is no longer needed.'),
      (a = b))
    this.value = a
  }
  eg.prototype.clone = function () {
    return new eg(void 0 === this.value.clone ? this.value : this.value.clone())
  }
  Pg.prototype = Object.assign(Object.create(hb.prototype), {
    constructor: Pg,
    isInstancedInterleavedBuffer: !0,
    copy: function (a) {
      hb.prototype.copy.call(this, a)
      this.meshPerAttribute = a.meshPerAttribute
      return this
    },
    clone: function (a) {
      a = hb.prototype.clone.call(this, a)
      a.meshPerAttribute = this.meshPerAttribute
      return a
    },
    toJSON: function (a) {
      a = hb.prototype.toJSON.call(this, a)
      a.isInstancedInterleavedBuffer = !0
      a.meshPerAttribute = this.meshPerAttribute
      return a
    },
  })
  Object.defineProperty(Qg.prototype, 'needsUpdate', {
    set: function (a) {
      !0 === a && this.version++
    },
  })
  Object.assign(Qg.prototype, {
    isGL_0x3: !0,
    setBuffer: function (a) {
      this.buffer = a
      return this
    },
    setType: function (a, b) {
      this.type = a
      this.elementSize = b
      return this
    },
    setItemSize: function (a) {
      this.itemSize = a
      return this
    },
    setCount: function (a) {
      this.count = a
      return this
    },
  })
  Object.assign(Rg.prototype, {
    set: function (a, b) {
      this.ray.set(a, b)
    },
    setFromCamera: function (a, b) {
      b && b.isq4
        ? (this.ray.origin.setFromMatrixPosition(b.matrixWorld),
          this.ray.direction
            .set(a.x, a.y, 0.5)
            .unproject(b)
            .sub(this.ray.origin)
            .normalize(),
          (this.camera = b))
        : b && b.isOrthographicCamera
        ? (this.ray.origin
            .set(a.x, a.y, (b.near + b.far) / (b.near - b.far))
            .unproject(b),
          this.ray.direction.set(0, 0, -1).transformDirection(b.matrixWorld),
          (this.camera = b))
        : console.error('THREE.rct: Unsupported camera type.')
    },
    intersectObject: function (a, b, d) {
      d = d || []
      Sg(a, this, d, b)
      d.sort(hi)
      return d
    },
    intersectObjects: function (a, b, d) {
      d = d || []
      if (!1 === Array.isArray(a))
        return (
          console.warn('THREE.rct.intersectObjects: objects is not an Array.'), d
        )
      for (var e = 0, f = a.length; e < f; e++) Sg(a[e], this, d, b)
      d.sort(hi)
      return d
    },
  })
  var Tc = function (a, b, d) {
    void 0 === a && (a = 1)
    void 0 === b && (b = 0)
    void 0 === d && (d = 0)
    this.radius = a
    this.phi = b
    this.theta = d
    return this
  }
  Tc.prototype.set = function (a, b, d) {
    this.radius = a
    this.phi = b
    this.theta = d
    return this
  }
  Tc.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  Tc.prototype.copy = function (a) {
    this.radius = a.radius
    this.phi = a.phi
    this.theta = a.theta
    return this
  }
  Tc.prototype.makeSafe = function () {
    this.phi = Math.max(1e-6, Math.min(Math.PI - 1e-6, this.phi))
    return this
  }
  Tc.prototype.setFrom_0x1 = function (a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z)
  }
  Tc.prototype.setFromCartesianCoords = function (a, b, d) {
    this.radius = Math.sqrt(a * a + b * b + d * d)
    0 === this.radius
      ? (this.phi = this.theta = 0)
      : ((this.theta = Math.atan2(a, d)),
        (this.phi = Math.acos(ea.clamp(b / this.radius, -1, 1))))
    return this
  }
  var Pd = function (a, b, d) {
    this.radius = void 0 !== a ? a : 1
    this.theta = void 0 !== b ? b : 0
    this.y = void 0 !== d ? d : 0
    return this
  }
  Pd.prototype.set = function (a, b, d) {
    this.radius = a
    this.theta = b
    this.y = d
    return this
  }
  Pd.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  Pd.prototype.copy = function (a) {
    this.radius = a.radius
    this.theta = a.theta
    this.y = a.y
    return this
  }
  Pd.prototype.setFrom_0x1 = function (a) {
    return this.setFromCartesianCoords(a.x, a.y, a.z)
  }
  Pd.prototype.setFromCartesianCoords = function (a, b, d) {
    this.radius = Math.sqrt(a * a + d * d)
    this.theta = Math.atan2(a, d)
    this.y = b
    return this
  }
  var Oi = new B(),
    Aa = function (a, b) {
      Object.defineProperty(this, 'isBox2', { value: !0 })
      this.min = void 0 !== a ? a : new B(Infinity, Infinity)
      this.max = void 0 !== b ? b : new B(-Infinity, -Infinity)
    }
  Aa.prototype.set = function (a, b) {
    this.min.copy(a)
    this.max.copy(b)
    return this
  }
  Aa.prototype.setFromPoints = function (a) {
    this.makeEmpty()
    for (var b = 0, d = a.length; b < d; b++) this.expandByPoint(a[b])
    return this
  }
  Aa.prototype.setFromCenterAndSize = function (a, b) {
    var d = Oi.copy(b).multiplyScalar(0.5)
    this.min.copy(a).sub(d)
    this.max.copy(a).add(d)
    return this
  }
  Aa.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  Aa.prototype.copy = function (a) {
    this.min.copy(a.min)
    this.max.copy(a.max)
    return this
  }
  Aa.prototype.makeEmpty = function () {
    this.min.x = this.min.y = Infinity
    this.max.x = this.max.y = -Infinity
    return this
  }
  Aa.prototype.isEmpty = function () {
    return this.max.x < this.min.x || this.max.y < this.min.y
  }
  Aa.prototype.getCenter = function (a) {
    void 0 === a &&
      (console.warn('THREE.Box2: .getCenter() target is now required'),
      (a = new B()))
    return this.isEmpty()
      ? a.set(0, 0)
      : a.addVectors(this.min, this.max).multiplyScalar(0.5)
  }
  Aa.prototype.getSize = function (a) {
    void 0 === a &&
      (console.warn('THREE.Box2: .getSize() target is now required'),
      (a = new B()))
    return this.isEmpty() ? a.set(0, 0) : a.subVectors(this.max, this.min)
  }
  Aa.prototype.expandByPoint = function (a) {
    this.min.min(a)
    this.max.max(a)
    return this
  }
  Aa.prototype.expandByVector = function (a) {
    this.min.sub(a)
    this.max.add(a)
    return this
  }
  Aa.prototype.expandByScalar = function (a) {
    this.min.addScalar(-a)
    this.max.addScalar(a)
    return this
  }
  Aa.prototype.containsPoint = function (a) {
    return a.x < this.min.x ||
      a.x > this.max.x ||
      a.y < this.min.y ||
      a.y > this.max.y
      ? !1
      : !0
  }
  Aa.prototype.containsBox = function (a) {
    return (
      this.min.x <= a.min.x &&
      a.max.x <= this.max.x &&
      this.min.y <= a.min.y &&
      a.max.y <= this.max.y
    )
  }
  Aa.prototype.getParameter = function (a, b) {
    void 0 === b &&
      (console.warn('THREE.Box2: .getParameter() target is now required'),
      (b = new B()))
    return b.set(
      (a.x - this.min.x) / (this.max.x - this.min.x),
      (a.y - this.min.y) / (this.max.y - this.min.y)
    )
  }
  Aa.prototype.intersectsBox = function (a) {
    return a.max.x < this.min.x ||
      a.min.x > this.max.x ||
      a.max.y < this.min.y ||
      a.min.y > this.max.y
      ? !1
      : !0
  }
  Aa.prototype.clampPoint = function (a, b) {
    void 0 === b &&
      (console.warn('THREE.Box2: .clampPoint() target is now required'),
      (b = new B()))
    return b.copy(a).clamp(this.min, this.max)
  }
  Aa.prototype.distanceToPoint = function (a) {
    return Oi.copy(a).clamp(this.min, this.max).sub(a).length()
  }
  Aa.prototype.intersect = function (a) {
    this.min.max(a.min)
    this.max.min(a.max)
    return this
  }
  Aa.prototype.union = function (a) {
    this.min.min(a.min)
    this.max.max(a.max)
    return this
  }
  Aa.prototype.translate = function (a) {
    this.min.add(a)
    this.max.add(a)
    return this
  }
  Aa.prototype.equals = function (a) {
    return a.min.equals(this.min) && a.max.equals(this.max)
  }
  var Pi = new p(),
    fg = new p(),
    eb = function (a, b) {
      this.start = void 0 !== a ? a : new p()
      this.end = void 0 !== b ? b : new p()
    }
  eb.prototype.set = function (a, b) {
    this.start.copy(a)
    this.end.copy(b)
    return this
  }
  eb.prototype.clone = function () {
    return new this.constructor().copy(this)
  }
  eb.prototype.copy = function (a) {
    this.start.copy(a.start)
    this.end.copy(a.end)
    return this
  }
  eb.prototype.getCenter = function (a) {
    void 0 === a &&
      (console.warn('THREE.Line3: .getCenter() target is now required'),
      (a = new p()))
    return a.addVectors(this.start, this.end).multiplyScalar(0.5)
  }
  eb.prototype.delta = function (a) {
    void 0 === a &&
      (console.warn('THREE.Line3: .delta() target is now required'),
      (a = new p()))
    return a.subVectors(this.end, this.start)
  }
  eb.prototype.distanceSq = function () {
    return this.start.distanceToSquared(this.end)
  }
  eb.prototype.distance = function () {
    return this.start.distanceTo(this.end)
  }
  eb.prototype.at = function (a, b) {
    void 0 === b &&
      (console.warn('THREE.Line3: .at() target is now required'), (b = new p()))
    return this.delta(b).multiplyScalar(a).add(this.start)
  }
  eb.prototype.closestPointToPointParameter = function (a, b) {
    Pi.subVectors(a, this.start)
    fg.subVectors(this.end, this.start)
    var d = fg.dot(fg),
      d = fg.dot(Pi) / d
    b && (d = ea.clamp(d, 0, 1))
    return d
  }
  eb.prototype.closestPointToPoint = function (a, b, d) {
    a = this.closestPointToPointParameter(a, b)
    void 0 === d &&
      (console.warn(
        'THREE.Line3: .closestPointToPoint() target is now required'
      ),
      (d = new p()))
    return this.delta(d).multiplyScalar(a).add(this.start)
  }
  eb.prototype.applyMatrix4 = function (a) {
    this.start.applyMatrix4(a)
    this.end.applyMatrix4(a)
    return this
  }
  eb.prototype.equals = function (a) {
    return a.start.equals(this.start) && a.end.equals(this.end)
  }
  Ae.prototype = Object.create(n.prototype)
  Ae.prototype.constructor = Ae
  Ae.prototype.isImmediateRenderObject = !0
  var Qi = new p()
  yd.prototype = Object.create(n.prototype)
  yd.prototype.constructor = yd
  yd.prototype.dispose = function () {
    this.cone.geometry.dispose()
    this.cone.material.dispose()
  }
  yd.prototype.update = function () {
    this.light.updateMatrixWorld()
    var a = this.light.distance ? this.light.distance : 1e3,
      b = a * Math.tan(this.light.angle)
    this.cone.scale.set(b, b, a)
    Qi.setFromMatrixPosition(this.light.target.matrixWorld)
    this.cone.lookAt(Qi)
    void 0 !== this.color
      ? this.cone.material.color.set(this.color)
      : this.cone.material.color.copy(this.light.color)
  }
  var tc = new p(),
    gg = new O(),
    qh = new O()
  zd.prototype = Object.create(qa.prototype)
  zd.prototype.constructor = zd
  zd.prototype.updateMatrixWorld = function (a) {
    var b = this.bones,
      d = this.geometry,
      e = d.getAttribute('position')
    qh.getInverse(this.root.matrixWorld)
    for (var f = 0, g = 0; f < b.length; f++) {
      var k = b[f]
      k.parent &&
        k.parent.isBone &&
        (gg.multiplyMatrices(qh, k.matrixWorld),
        tc.setFromMatrixPosition(gg),
        e.setXYZ(g, tc.x, tc.y, tc.z),
        gg.multiplyMatrices(qh, k.parent.matrixWorld),
        tc.setFromMatrixPosition(gg),
        e.setXYZ(g + 1, tc.x, tc.y, tc.z),
        (g += 2))
    }
    d.getAttribute('position').needsUpdate = !0
    qa.prototype.updateMatrixWorld.call(this, a)
  }
  Ad.prototype = Object.create(ca.prototype)
  Ad.prototype.constructor = Ad
  Ad.prototype.dispose = function () {
    this.geometry.dispose()
    this.material.dispose()
  }
  Ad.prototype.update = function () {
    void 0 !== this.color
      ? this.material.color.set(this.color)
      : this.material.color.copy(this.light.color)
  }
  var el = new p(),
    Ri = new H(),
    Si = new H()
  Bd.prototype = Object.create(n.prototype)
  Bd.prototype.constructor = Bd
  Bd.prototype.dispose = function () {
    this.children[0].geometry.dispose()
    this.children[0].material.dispose()
  }
  Bd.prototype.update = function () {
    var a = this.children[0]
    if (void 0 !== this.color) this.material.color.set(this.color)
    else {
      var b = a.geometry.getAttribute('color')
      Ri.copy(this.light.color)
      Si.copy(this.light.groundColor)
      for (var d = 0, e = b.count; d < e; d++) {
        var f = d < e / 2 ? Ri : Si
        b.setXYZ(d, f.r, f.g, f.b)
      }
      b.needsUpdate = !0
    }
    a.lookAt(el.setFromMatrixPosition(this.light.matrixWorld).negate())
  }
  Be.prototype = Object.create(qa.prototype)
  Be.prototype.constructor = Be
  Ef.prototype = Object.create(qa.prototype)
  Ef.prototype.constructor = Ef
  var Ti = new p(),
    hg = new p(),
    Ui = new p()
  Cd.prototype = Object.create(n.prototype)
  Cd.prototype.constructor = Cd
  Cd.prototype.dispose = function () {
    this.lightpl.geometry.dispose()
    this.lightpl.material.dispose()
    this.targetLine.geometry.dispose()
    this.targetLine.material.dispose()
  }
  Cd.prototype.update = function () {
    Ti.setFromMatrixPosition(this.light.matrixWorld)
    hg.setFromMatrixPosition(this.light.target.matrixWorld)
    Ui.subVectors(hg, Ti)
    this.lightpl.lookAt(hg)
    void 0 !== this.color
      ? (this.lightpl.material.color.set(this.color),
        this.targetLine.material.color.set(this.color))
      : (this.lightpl.material.color.copy(this.light.color),
        this.targetLine.material.color.copy(this.light.color))
    this.targetLine.lookAt(hg)
    this.targetLine.scale.z = Ui.length()
  }
  var Ff = new p(),
    Ea = new ua()
  Ce.prototype = Object.create(qa.prototype)
  Ce.prototype.constructor = Ce
  Ce.prototype.update = function () {
    var a = this.geometry,
      b = this.pointMap
    Ea.projectionMatrixInverse.copy(this.camera.projectionMatrixInverse)
    va('c', b, a, Ea, 0, 0, -1)
    va('t', b, a, Ea, 0, 0, 1)
    va('n1', b, a, Ea, -1, -1, -1)
    va('n2', b, a, Ea, 1, -1, -1)
    va('n3', b, a, Ea, -1, 1, -1)
    va('n4', b, a, Ea, 1, 1, -1)
    va('f1', b, a, Ea, -1, -1, 1)
    va('f2', b, a, Ea, 1, -1, 1)
    va('f3', b, a, Ea, -1, 1, 1)
    va('f4', b, a, Ea, 1, 1, 1)
    va('u1', b, a, Ea, 0.7, 1.1, -1)
    va('u2', b, a, Ea, -0.7, 1.1, -1)
    va('u3', b, a, Ea, 0, 2, -1)
    va('cf1', b, a, Ea, -1, 0, 1)
    va('cf2', b, a, Ea, 1, 0, 1)
    va('cf3', b, a, Ea, 0, -1, 1)
    va('cf4', b, a, Ea, 0, 1, 1)
    va('cn1', b, a, Ea, -1, 0, -1)
    va('cn2', b, a, Ea, 1, 0, -1)
    va('cn3', b, a, Ea, 0, -1, -1)
    va('cn4', b, a, Ea, 0, 1, -1)
    a.getAttribute('position').needsUpdate = !0
  }
  var ig = new ba()
  mc.prototype = Object.create(qa.prototype)
  mc.prototype.constructor = mc
  mc.prototype.update = function (a) {
    void 0 !== a &&
      console.warn('THREE.BoxHelper: .update() has no longer arguments.')
    void 0 !== this.object && ig.setFromObject(this.object)
    if (!ig.isEmpty()) {
      a = ig.min
      var b = ig.max,
        d = this.geometry.attributes.position,
        e = d.array
      e[0] = b.x
      e[1] = b.y
      e[2] = b.z
      e[3] = a.x
      e[4] = b.y
      e[5] = b.z
      e[6] = a.x
      e[7] = a.y
      e[8] = b.z
      e[9] = b.x
      e[10] = a.y
      e[11] = b.z
      e[12] = b.x
      e[13] = b.y
      e[14] = a.z
      e[15] = a.x
      e[16] = b.y
      e[17] = a.z
      e[18] = a.x
      e[19] = a.y
      e[20] = a.z
      e[21] = b.x
      e[22] = a.y
      e[23] = a.z
      d.needsUpdate = !0
      this.geometry.computeBoundingSphere()
    }
  }
  mc.prototype.setFromObject = function (a) {
    this.object = a
    this.update()
    return this
  }
  mc.prototype.copy = function (a) {
    qa.prototype.copy.call(this, a)
    this.object = a.object
    return this
  }
  De.prototype = Object.create(qa.prototype)
  De.prototype.constructor = De
  De.prototype.updateMatrixWorld = function (a) {
    var b = this.box
    b.isEmpty() ||
      (b.getCenter(this.position),
      b.getSize(this.scale),
      this.scale.multiplyScalar(0.5),
      qa.prototype.updateMatrixWorld.call(this, a))
  }
  Ee.prototype = Object.create(ab.prototype)
  Ee.prototype.constructor = Ee
  Ee.prototype.updateMatrixWorld = function (a) {
    var b = -this.plane.constant
    1e-8 > Math.abs(b) && (b = 1e-8)
    this.scale.set(0.5 * this.size, 0.5 * this.size, b)
    this.children[0].material.side = 0 > b ? 1 : 0
    this.lookAt(this.plane.normal)
    ab.prototype.updateMatrixWorld.call(this, a)
  }
  var Vi = new p(),
    Gf,
    Tg
  nc.prototype = Object.create(n.prototype)
  nc.prototype.constructor = nc
  nc.prototype.setDirection = function (a) {
    0.99999 < a.y
      ? this.quaternion.set(0, 0, 0, 1)
      : -0.99999 > a.y
      ? this.quaternion.set(1, 0, 0, 0)
      : (Vi.set(a.z, 0, -a.x).normalize(),
        this.quaternion.setFromAxisAngle(Vi, Math.acos(a.y)))
  }
  nc.prototype.setLength = function (a, b, d) {
    void 0 === b && (b = 0.2 * a)
    void 0 === d && (d = 0.2 * b)
    this.line.scale.set(1, Math.max(1e-4, a - b), 1)
    this.line.updateMatrix()
    this.cone.scale.set(d, b, d)
    this.cone.position.y = a
    this.cone.updateMatrix()
  }
  nc.prototype.setColor = function (a) {
    this.line.material.color.set(a)
    this.cone.material.color.set(a)
  }
  nc.prototype.copy = function (a) {
    n.prototype.copy.call(this, a, !1)
    this.line.copy(a.line)
    this.cone.copy(a.cone)
    return this
  }
  Fe.prototype = Object.create(qa.prototype)
  Fe.prototype.constructor = Fe
  var Gb = Math.pow(2, 8),
    Wi = [0.125, 0.215, 0.35, 0.446, 0.526, 0.582],
    Xi = 5 + Wi.length,
    Hb = { 3e3: 0, 3001: 1, 3002: 2, 3004: 3, 3005: 4, 3006: 5, 3007: 6 },
    rh = new wd(),
    sh = (function () {
      for (var a = [], b = [], d = [], e = 8, f = 0; f < Xi; f++) {
        var g = Math.pow(2, e)
        b.push(g)
        var k = 1 / g
        4 < f ? (k = Wi[f - 8 + 4 - 1]) : 0 == f && (k = 0)
        d.push(k)
        for (
          var k = 1 / (g - 1),
            g = -k / 2,
            k = 1 + k / 2,
            m = [g, g, k, g, k, k, g, g, k, k, g, k],
            g = new Float32Array(108),
            k = new Float32Array(72),
            n = new Float32Array(36),
            p = 0;
          6 > p;
          p++
        ) {
          var r = ((p % 3) * 2) / 3 - 1,
            u = 2 < p ? 0 : -1
          g.set(
            [
              r,
              u,
              0,
              r + 2 / 3,
              u,
              0,
              r + 2 / 3,
              u + 1,
              0,
              r,
              u,
              0,
              r + 2 / 3,
              u + 1,
              0,
              r,
              u + 1,
              0,
            ],
            18 * p
          )
          k.set(m, 12 * p)
          n.set([p, p, p, p, p, p], 6 * p)
        }
        m = new I()
        m.setAttribute('position', new C(g, 3))
        m.setAttribute('uv', new C(k, 2))
        m.setAttribute('faceIndex', new C(n, 1))
        a.push(m)
        4 < e && e--
      }
      return { _lodpls: a, _sizeLods: b, _sigmas: d }
    })(),
    Ue = sh._lodpls,
    Yi = sh._sizeLods,
    jg = sh._sigmas,
    th = null,
    Uc = (1 + Math.sqrt(5)) / 2,
    Qd = 1 / Uc,
    Zi = [
      new p(1, 1, 1),
      new p(-1, 1, 1),
      new p(1, 1, -1),
      new p(-1, 1, -1),
      new p(0, Uc, Qd),
      new p(0, Uc, -Qd),
      new p(Qd, 0, Uc),
      new p(-Qd, 0, Uc),
      new p(Uc, Qd, 0),
      new p(-Uc, Qd, 0),
    ],
    Va = function (a) {
      this._renderer = a
      this._pingPongRenderTarget = null
      a = new Float32Array(20)
      var b = new p(0, 1, 0)
      this._blurMaterial = new Pb({
        name: 'b6GaussianBlur',
        defines: { n: 20 },
        uniforms: {
          envMap: { value: null },
          samples: { value: 1 },
          weights: { value: a },
          latitudinal: { value: !1 },
          dTheta: { value: 0 },
          mipInt: { value: 0 },
          poleAxis: { value: b },
          inputEncoding: { value: Hb[3e3] },
          outputEncoding: { value: Hb[3e3] },
        },
        vertexShader: Ug(),
        fragmentShader:
          '\n\n\t\t\tprecision mediump float;\n\t\t\tprecision mediump int;\n\n\t\t\tvarying vec3 vOutputDirection;\n\n\t\t\tuniform sampler2D envMap;\n\t\t\tuniform int samples;\n\t\t\tuniform float weights[ n ];\n\t\t\tuniform bool latitudinal;\n\t\t\tuniform float dTheta;\n\t\t\tuniform float mipInt;\n\t\t\tuniform vec3 poleAxis;\n\n\t\t\t' +
          Vg() +
          "\n\n\t\t\t#define ENVMAP_TYPE_CUBE_UV\n\t\t\t#include \x3ccube_uv_reflection_fragment\x3e\n\n\t\t\tvec3 getSample( float theta, vec3 axis ) {\n\n\t\t\t\tfloat cosTheta \x3d cos( theta );\n\t\t\t\t// Rodrigues' axis-angle rotation\n\t\t\t\tvec3 sampleDirection \x3d vOutputDirection * cosTheta\n\t\t\t\t\t+ cross( axis, vOutputDirection ) * sin( theta )\n\t\t\t\t\t+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );\n\n\t\t\t\treturn bilinearCubeUV( envMap, sampleDirection, mipInt );\n\n\t\t\t}\n\n\t\t\tvoid main() {\n\n\t\t\t\tvec3 axis \x3d latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );\n\n\t\t\t\tif ( all( equal( axis, vec3( 0.0 ) ) ) ) {\n\n\t\t\t\t\taxis \x3d vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );\n\n\t\t\t\t}\n\n\t\t\t\taxis \x3d normalize( axis );\n\n\t\t\t\tgl_FragColor \x3d vec4( 0.0, 0.0, 0.0, 1.0 );\n\t\t\t\tgl_FragColor.rgb +\x3d weights[ 0 ] * getSample( 0.0, axis );\n\n\t\t\t\tfor ( int i \x3d 1; i \x3c n; i++ ) {\n\n\t\t\t\t\tif ( i \x3e\x3d samples ) {\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfloat theta \x3d dTheta * float( i );\n\t\t\t\t\tgl_FragColor.rgb +\x3d weights[ i ] * getSample( -1.0 * theta, axis );\n\t\t\t\t\tgl_FragColor.rgb +\x3d weights[ i ] * getSample( theta, axis );\n\n\t\t\t\t}\n\n\t\t\t\tgl_FragColor \x3d linearToOutputTexel( gl_FragColor );\n\n\t\t\t}\n\t\t",
        blending: 0,
        depthTest: !1,
        depthWrite: !1,
      })
      this._cubemapShader = this._equirectShader = null
      this._compileMaterial(this._blurMaterial)
    }
  Va.prototype.fromss = function (a, b, d, e) {
    void 0 === b && (b = 0)
    void 0 === d && (d = 0.1)
    void 0 === e && (e = 100)
    th = this._renderer.getRenderTarget()
    var f = this._allocateTargets()
    this._sceneToCubeUV(a, d, e, f)
    0 < b && this._blur(f, 0, 0, b)
    this._applyPMREM(f)
    this._cleanup(f)
    return f
  }
  Va.prototype.fromEquirectangular = function (a) {
    return this._fromTexture(a)
  }
  Va.prototype.fromCubemap = function (a) {
    return this._fromTexture(a)
  }
  Va.prototype.compileCubemapShader = function () {
    null === this._cubemapShader &&
      ((this._cubemapShader = li()), this._compileMaterial(this._cubemapShader))
  }
  Va.prototype.compileEquirectangularShader = function () {
    null === this._equirectShader &&
      ((this._equirectShader = ki()),
      this._compileMaterial(this._equirectShader))
  }
  Va.prototype.dispose = function () {
    this._blurMaterial.dispose()
    null !== this._cubemapShader && this._cubemapShader.dispose()
    null !== this._equirectShader && this._equirectShader.dispose()
    for (var a = 0; a < Ue.length; a++) Ue[a].dispose()
  }
  Va.prototype._cleanup = function (a) {
    this._pingPongRenderTarget.dispose()
    this._renderer.setRenderTarget(th)
    a.scissorTest = !1
    Hf(a, 0, 0, a.width, a.height)
  }
  Va.prototype._fromTexture = function (a) {
    th = this._renderer.getRenderTarget()
    var b = this._allocateTargets(a)
    this._textureToCubeUV(a, b)
    this._applyPMREM(b)
    this._cleanup(b)
    return b
  }
  Va.prototype._allocateTargets = function (a) {
    var b
    b =
      void 0 === a || 1009 !== a.type
        ? !1
        : 3e3 === a.encoding || 3001 === a.encoding || 3007 === a.encoding
    b = {
      magFilter: 1003,
      minFilter: 1003,
      generateMipmaps: !1,
      type: 1009,
      format: 1023,
      encoding: b ? a.encoding : 3002,
      depthBuffer: !1,
    }
    var d = ji(b)
    d.depthBuffer = a ? !1 : !0
    this._pingPongRenderTarget = ji(b)
    return d
  }
  Va.prototype._compileMaterial = function (a) {
    a = new ca(Ue[0], a)
    this._renderer.compile(a, rh)
  }
  Va.prototype._sceneToCubeUV = function (a, b, d, e) {
    b = new la(90, 1, b, d)
    d = [1, -1, 1, 1, 1, 1]
    var f = [1, 1, 1, -1, -1, -1],
      g = this._renderer,
      k = g.outputEncoding,
      m = g.toneMapping,
      n = g.getClearColor(),
      p = g.getClearAlpha()
    g.toneMapping = 0
    g.outputEncoding = 3e3
    var r = a.background
    if (r && r.isColor) {
      r.convertSRGBToLinear()
      var u = Math.min(
          Math.max(Math.ceil(Math.log2(Math.max(r.r, r.g, r.b))), -128),
          127
        ),
        r = r.multiplyScalar(Math.pow(2, -u))
      g.setClearColor(r, (u + 128) / 255)
      a.background = null
    }
    for (r = 0; 6 > r; r++)
      (u = r % 3),
        0 == u
          ? (b.up.set(0, d[r], 0), b.lookAt(f[r], 0, 0))
          : 1 == u
          ? (b.up.set(0, 0, d[r]), b.lookAt(0, f[r], 0))
          : (b.up.set(0, d[r], 0), b.lookAt(0, 0, f[r])),
        Hf(e, u * Gb, 2 < r ? Gb : 0, Gb, Gb),
        g.setRenderTarget(e),
        g.render(a, b)
    g.toneMapping = m
    g.outputEncoding = k
    g.setClearColor(n, p)
  }
  Va.prototype._textureToCubeUV = function (a, b) {
    var d = this._renderer
    a.isCubeTexture
      ? null == this._cubemapShader && (this._cubemapShader = li())
      : null == this._equirectShader && (this._equirectShader = ki())
    var e = a.isCubeTexture ? this._cubemapShader : this._equirectShader,
      f = new ca(Ue[0], e),
      e = e.uniforms
    e.envMap.value = a
    a.isCubeTexture ||
      e.texelSize.value.set(1 / a.image.width, 1 / a.image.height)
    e.inputEncoding.value = Hb[a.encoding]
    e.outputEncoding.value = Hb[b.texture.encoding]
    Hf(b, 0, 0, 3 * Gb, 2 * Gb)
    d.setRenderTarget(b)
    d.render(f, rh)
  }
  Va.prototype._applyPMREM = function (a) {
    var b = this._renderer,
      d = b.autoClear
    b.autoClear = !1
    for (var e = 1; e < Xi; e++)
      this._blur(
        a,
        e - 1,
        e,
        Math.sqrt(jg[e] * jg[e] - jg[e - 1] * jg[e - 1]),
        Zi[(e - 1) % Zi.length]
      )
    b.autoClear = d
  }
  Va.prototype._blur = function (a, b, d, e, f) {
    var g = this._pingPongRenderTarget
    this._halfBlur(a, g, b, d, e, 'latitudinal', f)
    this._halfBlur(g, a, d, d, e, 'longitudinal', f)
  }
  Va.prototype._halfBlur = function (a, b, d, e, f, g, k) {
    var h = this._renderer,
      l = this._blurMaterial
    'latitudinal' !== g &&
      'longitudinal' !== g &&
      console.error(
        'blur direction must be either latitudinal or longitudinal!'
      )
    var m = new ca(Ue[e], l),
      l = l.uniforms,
      n = Yi[d] - 1,
      n = isFinite(f) ? Math.PI / (2 * n) : (2 * Math.PI) / 39,
      p = f / n,
      q = isFinite(f) ? 1 + Math.floor(3 * p) : 20
    20 < q &&
      console.warn(
        'sigmaRadians, ' +
          f +
          ', is too large and will clip, as it requested ' +
          q +
          ' samples when the maximum is set to 20'
      )
    f = []
    for (var r = 0, u = 0; 20 > u; ++u) {
      var w = u / p,
        w = Math.exp((-w * w) / 2)
      f.push(w)
      0 == u ? (r += w) : u < q && (r += 2 * w)
    }
    for (p = 0; p < f.length; p++) f[p] /= r
    l.envMap.value = a.texture
    l.samples.value = q
    l.weights.value = f
    l.latitudinal.value = 'latitudinal' === g
    k && (l.poleAxis.value = k)
    l.dTheta.value = n
    l.mipInt.value = 8 - d
    l.inputEncoding.value = Hb[a.texture.encoding]
    l.outputEncoding.value = Hb[a.texture.encoding]
    a = Yi[e]
    Hf(
      b,
      3 * Math.max(0, Gb - 2 * a),
      (0 === e ? 0 : 2 * Gb) + 2 * a * (4 < e ? e - 8 + 4 : 0),
      3 * a,
      2 * a
    )
    h.setRenderTarget(b)
    h.render(m, rh)
  }
  T.create = function (a, b) {
    console.log('THREE.Curve.create() has been deprecated')
    a.prototype = Object.create(T.prototype)
    a.prototype.constructor = a
    a.prototype.getPoint = b
    return a
  }
  Object.assign(Qb.prototype, {
    createPoints_0x6: function (a) {
      console.warn(
        'THREE.CurvePath: .createPoints_0x6() has been removed. Use new THREE._0x6().setFromPoints( points ) instead.'
      )
      a = this.getPoints(a)
      return this.create_0x6(a)
    },
    createSpacedPoints_0x6: function (a) {
      console.warn(
        'THREE.CurvePath: .createSpacedPoints_0x6() has been removed. Use new THREE._0x6().setFromPoints( points ) instead.'
      )
      a = this.getSpacedPoints(a)
      return this.create_0x6(a)
    },
    create_0x6: function (a) {
      console.warn(
        'THREE.CurvePath: .create_0x6() has been removed. Use new THREE._0x6().setFromPoints( points ) instead.'
      )
      for (var b = new V(), d = 0, e = a.length; d < e; d++) {
        var f = a[d]
        b.vertices.push(new p(f.x, f.y, f.z || 0))
      }
      return b
    },
  })
  Object.assign(wb.prototype, {
    fromPoints: function (a) {
      console.warn(
        'THREE.Path: .fromPoints() has been renamed to .setFromPoints().'
      )
      return this.setFromPoints(a)
    },
  })
  mi.prototype = Object.create(Sa.prototype)
  ni.prototype = Object.create(Sa.prototype)
  Wg.prototype = Object.create(Sa.prototype)
  Object.assign(Wg.prototype, {
    initFromArray: function () {
      console.error('THREE.Spline: .initFromArray() has been removed.')
    },
    getControlPointsArray: function () {
      console.error('THREE.Spline: .getControlPointsArray() has been removed.')
    },
    reparametrizeByArcLength: function () {
      console.error(
        'THREE.Spline: .reparametrizeByArcLength() has been removed.'
      )
    },
  })
  Be.prototype.setColors = function () {
    console.error(
      'THREE.GridHelper: setColors() has been deprecated, pass them in the constructor instead.'
    )
  }
  zd.prototype.update = function () {
    console.error('THREE.SkeletonHelper: update() no longer needs to be called.')
  }
  Object.assign(oa.prototype, {
    extractUrlBase: function (a) {
      console.warn(
        'THREE.Loader: .extractUrlBase() has been deprecated. Use THREE.LoaderUtils.extractUrlBase() instead.'
      )
      return ph.extractUrlBase(a)
    },
  })
  oa.Handlers = {
    add: function () {
      console.error(
        'THREE.Loader: Handlers.add() has been removed. Use LoadingManager.addHandler() instead.'
      )
    },
    get: function () {
      console.error(
        'THREE.Loader: Handlers.get() has been removed. Use LoadingManager.getHandler() instead.'
      )
    },
  }
  Object.assign(Cf.prototype, {
    setTexturePath: function (a) {
      console.warn(
        'THREE.ObjectLoader: .setTexturePath() has been renamed to .setResourcePath().'
      )
      return this.setResourcePath(a)
    },
  })
  Object.assign(Aa.prototype, {
    center: function (a) {
      console.warn('THREE.Box2: .center() has been renamed to .getCenter().')
      return this.getCenter(a)
    },
    empty: function () {
      console.warn('THREE.Box2: .empty() has been renamed to .isEmpty().')
      return this.isEmpty()
    },
    isIntersectionBox: function (a) {
      console.warn(
        'THREE.Box2: .isIntersectionBox() has been renamed to .intersectsBox().'
      )
      return this.intersectsBox(a)
    },
    size: function (a) {
      console.warn('THREE.Box2: .size() has been renamed to .getSize().')
      return this.getSize(a)
    },
  })
  Object.assign(ba.prototype, {
    center: function (a) {
      console.warn('THREE.b7: .center() has been renamed to .getCenter().')
      return this.getCenter(a)
    },
    empty: function () {
      console.warn('THREE.b7: .empty() has been renamed to .isEmpty().')
      return this.isEmpty()
    },
    isIntersectionBox: function (a) {
      console.warn(
        'THREE.b7: .isIntersectionBox() has been renamed to .intersectsBox().'
      )
      return this.intersectsBox(a)
    },
    isIntersectionSphere: function (a) {
      console.warn(
        'THREE.b7: .isIntersectionSphere() has been renamed to .intersectsSphere().'
      )
      return this.intersectsSphere(a)
    },
    size: function (a) {
      console.warn('THREE.b7: .size() has been renamed to .getSize().')
      return this.getSize(a)
    },
  })
  Object.assign(ta.prototype, {
    empty: function () {
      console.warn('THREE.Sphere: .empty() has been renamed to .isEmpty().')
      return this.isEmpty()
    },
  })
  $a.prototype.setFromMatrix = function (a) {
    console.warn(
      'THREE.Frustum: .setFromMatrix() has been renamed to .setFromProjectionMatrix().'
    )
    return this.setFromProjectionMatrix(a)
  }
  eb.prototype.center = function (a) {
    console.warn('THREE.Line3: .center() has been renamed to .getCenter().')
    return this.getCenter(a)
  }
  Object.assign(ea, {
    random16: function () {
      console.warn(
        'THREE.Math: .random16() has been deprecated. Use Math.random() instead.'
      )
      return Math.random()
    },
    nearestPowerOfTwo: function (a) {
      console.warn(
        'THREE.Math: .nearestPowerOfTwo() has been renamed to .floorPowerOfTwo().'
      )
      return ea.floorPowerOfTwo(a)
    },
    nextPowerOfTwo: function (a) {
      console.warn(
        'THREE.Math: .nextPowerOfTwo() has been renamed to .ceilPowerOfTwo().'
      )
      return ea.ceilPowerOfTwo(a)
    },
  })
  Object.assign(ha.prototype, {
    flattenToArrayOffset: function (a, b) {
      console.warn(
        'THREE.Matrix3: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'
      )
      return this.toArray(a, b)
    },
    multiply_0x1: function (a) {
      console.warn(
        'THREE.Matrix3: .multiply_0x1() has been removed. Use vector.applyMatrix3( matrix ) instead.'
      )
      return a.applyMatrix3(this)
    },
    multiply_0x1Array: function () {
      console.error('THREE.Matrix3: .multiply_0x1Array() has been removed.')
    },
    applyTo_0x3: function (a) {
      console.warn(
        'THREE.Matrix3: .applyTo_0x3() has been removed. Use attribute.applyMatrix3( matrix ) instead.'
      )
      return a.applyMatrix3(this)
    },
    applyTo_0x1Array: function () {
      console.error('THREE.Matrix3: .applyTo_0x1Array() has been removed.')
    },
  })
  Object.assign(O.prototype, {
    extractPosition: function (a) {
      console.warn(
        'THREE.Matrix4: .extractPosition() has been renamed to .copyPosition().'
      )
      return this.copyPosition(a)
    },
    flattenToArrayOffset: function (a, b) {
      console.warn(
        'THREE.Matrix4: .flattenToArrayOffset() has been deprecated. Use .toArray() instead.'
      )
      return this.toArray(a, b)
    },
    getPosition: function () {
      console.warn(
        'THREE.Matrix4: .getPosition() has been removed. Use _0x1.setFromMatrixPosition( matrix ) instead.'
      )
      return new p().setFromMatrixColumn(this, 3)
    },
    setRotationFromQuaternion: function (a) {
      console.warn(
        'THREE.Matrix4: .setRotationFromQuaternion() has been renamed to .makeRotationFromQuaternion().'
      )
      return this.makeRotationFromQuaternion(a)
    },
    multiplyToArray: function () {
      console.warn('THREE.Matrix4: .multiplyToArray() has been removed.')
    },
    multiply_0x1: function (a) {
      console.warn(
        'THREE.Matrix4: .multiply_0x1() has been removed. Use vector.applyMatrix4( matrix ) instead.'
      )
      return a.applyMatrix4(this)
    },
    multiplyVector4: function (a) {
      console.warn(
        'THREE.Matrix4: .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.'
      )
      return a.applyMatrix4(this)
    },
    multiply_0x1Array: function () {
      console.error('THREE.Matrix4: .multiply_0x1Array() has been removed.')
    },
    rotateAxis: function (a) {
      console.warn(
        'THREE.Matrix4: .rotateAxis() has been removed. Use _0x1.transformDirection( matrix ) instead.'
      )
      a.transformDirection(this)
    },
    crossVector: function (a) {
      console.warn(
        'THREE.Matrix4: .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.'
      )
      return a.applyMatrix4(this)
    },
    translate: function () {
      console.error('THREE.Matrix4: .translate() has been removed.')
    },
    rotateX: function () {
      console.error('THREE.Matrix4: .rotateX() has been removed.')
    },
    rotateY: function () {
      console.error('THREE.Matrix4: .rotateY() has been removed.')
    },
    rotateZ: function () {
      console.error('THREE.Matrix4: .rotateZ() has been removed.')
    },
    rotateByAxis: function () {
      console.error('THREE.Matrix4: .rotateByAxis() has been removed.')
    },
    applyTo_0x3: function (a) {
      console.warn(
        'THREE.Matrix4: .applyTo_0x3() has been removed. Use attribute.applyMatrix4( matrix ) instead.'
      )
      return a.applyMatrix4(this)
    },
    applyTo_0x1Array: function () {
      console.error('THREE.Matrix4: .applyTo_0x1Array() has been removed.')
    },
    makeFrustum: function (a, b, d, e, f, g) {
      console.warn(
        'THREE.Matrix4: .makeFrustum() has been removed. Use .makePerspective( left, right, top, bottom, near, far ) instead.'
      )
      return this.makePerspective(a, b, e, d, f, g)
    },
  })
  da.prototype.isIntersectionLine = function (a) {
    console.warn(
      'THREE.pl: .isIntersectionLine() has been renamed to .intersectsLine().'
    )
    return this.intersectsLine(a)
  }
  Z.prototype.multiply_0x1 = function (a) {
    console.warn(
      'THREE.Quaternion: .multiply_0x1() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.'
    )
    return a.applyQuaternion(this)
  }
  Object.assign(pa.prototype, {
    isIntersectionBox: function (a) {
      console.warn(
        'THREE.Ray: .isIntersectionBox() has been renamed to .intersectsBox().'
      )
      return this.intersectsBox(a)
    },
    isIntersectionpl: function (a) {
      console.warn(
        'THREE.Ray: .isIntersectionpl() has been renamed to .intersectspl().'
      )
      return this.intersectspl(a)
    },
    isIntersectionSphere: function (a) {
      console.warn(
        'THREE.Ray: .isIntersectionSphere() has been renamed to .intersectsSphere().'
      )
      return this.intersectsSphere(a)
    },
  })
  Object.assign(fa.prototype, {
    area: function () {
      console.warn('THREE.Triangle: .area() has been renamed to .getArea().')
      return this.getArea()
    },
    barycoordFromPoint: function (a, b) {
      console.warn(
        'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().'
      )
      return this.getBarycoord(a, b)
    },
    midpoint: function (a) {
      console.warn(
        'THREE.Triangle: .midpoint() has been renamed to .getMidpoint().'
      )
      return this.getMidpoint(a)
    },
    normal: function (a) {
      console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().')
      return this.getNormal(a)
    },
    plane: function (a) {
      console.warn('THREE.Triangle: .plane() has been renamed to .getpl().')
      return this.getpl(a)
    },
  })
  Object.assign(fa, {
    barycoordFromPoint: function (a, b, d, e, f) {
      console.warn(
        'THREE.Triangle: .barycoordFromPoint() has been renamed to .getBarycoord().'
      )
      return fa.getBarycoord(a, b, d, e, f)
    },
    normal: function (a, b, d, e) {
      console.warn('THREE.Triangle: .normal() has been renamed to .getNormal().')
      return fa.getNormal(a, b, d, e)
    },
  })
  Object.assign(lc.prototype, {
    extractAllPoints: function (a) {
      console.warn(
        'THREE.Shape: .extractAllPoints() has been removed. Use .extractPoints() instead.'
      )
      return this.extractPoints(a)
    },
    extrude: function (a) {
      console.warn(
        'THREE.Shape: .extrude() has been removed. Use Extrude_0x6() instead.'
      )
      return new Ac(this, a)
    },
    make_0x6: function (a) {
      console.warn(
        'THREE.Shape: .make_0x6() has been removed. Use Shape_0x6() instead.'
      )
      return new Cc(this, a)
    },
  })
  Object.assign(B.prototype, {
    fromAttribute: function (a, b, d) {
      console.warn(
        'THREE.vt2: .fromAttribute() has been renamed to .from_0x3().'
      )
      return this.from_0x3(a, b, d)
    },
    distanceToManhattan: function (a) {
      console.warn(
        'THREE.vt2: .distanceToManhattan() has been renamed to .manhattanDistanceTo().'
      )
      return this.manhattanDistanceTo(a)
    },
    lengthManhattan: function () {
      console.warn(
        'THREE.vt2: .lengthManhattan() has been renamed to .manhattanLength().'
      )
      return this.manhattanLength()
    },
  })
  Object.assign(p.prototype, {
    setEulerFromRotationMatrix: function () {
      console.error(
        'THREE._0x1: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.'
      )
    },
    setEulerFromQuaternion: function () {
      console.error(
        'THREE._0x1: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.'
      )
    },
    getPositionFromMatrix: function (a) {
      console.warn(
        'THREE._0x1: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().'
      )
      return this.setFromMatrixPosition(a)
    },
    getScaleFromMatrix: function (a) {
      console.warn(
        'THREE._0x1: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().'
      )
      return this.setFromMatrixScale(a)
    },
    getColumnFromMatrix: function (a, b) {
      console.warn(
        'THREE._0x1: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().'
      )
      return this.setFromMatrixColumn(b, a)
    },
    applyProjection: function (a) {
      console.warn(
        'THREE._0x1: .applyProjection() has been removed. Use .applyMatrix4( m ) instead.'
      )
      return this.applyMatrix4(a)
    },
    fromAttribute: function (a, b, d) {
      console.warn(
        'THREE._0x1: .fromAttribute() has been renamed to .from_0x3().'
      )
      return this.from_0x3(a, b, d)
    },
    distanceToManhattan: function (a) {
      console.warn(
        'THREE._0x1: .distanceToManhattan() has been renamed to .manhattanDistanceTo().'
      )
      return this.manhattanDistanceTo(a)
    },
    lengthManhattan: function () {
      console.warn(
        'THREE._0x1: .lengthManhattan() has been renamed to .manhattanLength().'
      )
      return this.manhattanLength()
    },
  })
  Object.assign(P.prototype, {
    fromAttribute: function (a, b, d) {
      console.warn(
        'THREE.Vector4: .fromAttribute() has been renamed to .from_0x3().'
      )
      return this.from_0x3(a, b, d)
    },
    lengthManhattan: function () {
      console.warn(
        'THREE.Vector4: .lengthManhattan() has been renamed to .manhattanLength().'
      )
      return this.manhattanLength()
    },
  })
  Object.assign(V.prototype, {
    computeTangents: function () {
      console.error('THREE._0x6: .computeTangents() has been removed.')
    },
    computeLineDistances: function () {
      console.error(
        'THREE._0x6: .computeLineDistances() has been removed. Use THREE.Line.computeLineDistances() instead.'
      )
    },
    applyMatrix: function (a) {
      console.warn(
        'THREE._0x6: .applyMatrix() has been renamed to .applyMatrix4().'
      )
      return this.applyMatrix4(a)
    },
  })
  Object.assign(n.prototype, {
    getChildByName: function (a) {
      console.warn(
        'THREE.Object3D: .getChildByName() has been renamed to .getObjectByName().'
      )
      return this.getObjectByName(a)
    },
    renderDepth: function () {
      console.warn(
        'THREE.Object3D: .renderDepth has been removed. Use .renderOrder, instead.'
      )
    },
    translate: function (a, b) {
      console.warn(
        'THREE.Object3D: .translate() has been removed. Use .translateOnAxis( axis, distance ) instead.'
      )
      return this.translateOnAxis(b, a)
    },
    getWorldRotation: function () {
      console.error(
        'THREE.Object3D: .getWorldRotation() has been removed. Use THREE.Object3D.getWorldQuaternion( target ) instead.'
      )
    },
    applyMatrix: function (a) {
      console.warn(
        'THREE.Object3D: .applyMatrix() has been renamed to .applyMatrix4().'
      )
      return this.applyMatrix4(a)
    },
  })
  Object.defineProperties(n.prototype, {
    eulerOrder: {
      get: function () {
        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.')
        return this.rotation.order
      },
      set: function (a) {
        console.warn('THREE.Object3D: .eulerOrder is now .rotation.order.')
        this.rotation.order = a
      },
    },
    useQuaternion: {
      get: function () {
        console.warn(
          'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.'
        )
      },
      set: function () {
        console.warn(
          'THREE.Object3D: .useQuaternion has been removed. The library now uses quaternions by default.'
        )
      },
    },
  })
  Object.assign(ca.prototype, {
    setDrawMode: function () {
      console.error(
        'THREE.na: .setDrawMode() has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via _0x2Utils.toTrianglesDrawMode() if necessary.'
      )
    },
  })
  Object.defineProperties(ca.prototype, {
    drawMode: {
      get: function () {
        console.error(
          'THREE.na: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode.'
        )
        return 0
      },
      set: function () {
        console.error(
          'THREE.na: .drawMode has been removed. The renderer now always assumes THREE.TrianglesDrawMode. Transform your geometry via _0x2Utils.toTrianglesDrawMode() if necessary.'
        )
      },
    },
  })
  Object.defineProperties(Zd.prototype, {
    objects: {
      get: function () {
        console.warn('THREE.LOD: .objects has been renamed to .levels.')
        return this.levels
      },
    },
  })
  Object.defineProperty(ef.prototype, 'useVertexTexture', {
    get: function () {
      console.warn('THREE.Skeleton: useVertexTexture has been removed.')
    },
    set: function () {
      console.warn('THREE.Skeleton: useVertexTexture has been removed.')
    },
  })
  df.prototype.initBones = function () {
    console.error('THREE.Skinnedna: initBones() has been removed.')
  }
  Object.defineProperty(T.prototype, '__arcLengthDivisions', {
    get: function () {
      console.warn(
        'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'
      )
      return this.arcLengthDivisions
    },
    set: function (a) {
      console.warn(
        'THREE.Curve: .__arcLengthDivisions is now .arcLengthDivisions.'
      )
      this.arcLengthDivisions = a
    },
  })
  la.prototype.setLens = function (a, b) {
    console.warn(
      'THREE.q4.setLens is deprecated. Use .setFocalLength and .filmGauge for a photographic setup.'
    )
    void 0 !== b && (this.filmGauge = b)
    this.setFocalLength(a)
  }
  Object.defineProperties(ra.prototype, {
    onlyShadow: {
      set: function () {
        console.warn('THREE.Light: .onlyShadow has been removed.')
      },
    },
    shadowCameraFov: {
      set: function (a) {
        console.warn('THREE.Light: .shadowCameraFov is now .shadow.camera.fov.')
        this.shadow.camera.fov = a
      },
    },
    shadowCameraLeft: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowCameraLeft is now .shadow.camera.left.'
        )
        this.shadow.camera.left = a
      },
    },
    shadowCameraRight: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowCameraRight is now .shadow.camera.right.'
        )
        this.shadow.camera.right = a
      },
    },
    shadowCameraTop: {
      set: function (a) {
        console.warn('THREE.Light: .shadowCameraTop is now .shadow.camera.top.')
        this.shadow.camera.top = a
      },
    },
    shadowCameraBottom: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowCameraBottom is now .shadow.camera.bottom.'
        )
        this.shadow.camera.bottom = a
      },
    },
    shadowCameraNear: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowCameraNear is now .shadow.camera.near.'
        )
        this.shadow.camera.near = a
      },
    },
    shadowCameraFar: {
      set: function (a) {
        console.warn('THREE.Light: .shadowCameraFar is now .shadow.camera.far.')
        this.shadow.camera.far = a
      },
    },
    shadowCameraVisible: {
      set: function () {
        console.warn(
          'THREE.Light: .shadowCameraVisible has been removed. Use new THREE.CameraHelper( light.shadow.camera ) instead.'
        )
      },
    },
    shadowBias: {
      set: function (a) {
        console.warn('THREE.Light: .shadowBias is now .shadow.bias.')
        this.shadow.bias = a
      },
    },
    shadowDarkness: {
      set: function () {
        console.warn('THREE.Light: .shadowDarkness has been removed.')
      },
    },
    shadowMapWidth: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowMapWidth is now .shadow.mapSize.width.'
        )
        this.shadow.mapSize.width = a
      },
    },
    shadowMapHeight: {
      set: function (a) {
        console.warn(
          'THREE.Light: .shadowMapHeight is now .shadow.mapSize.height.'
        )
        this.shadow.mapSize.height = a
      },
    },
  })
  Object.defineProperties(C.prototype, {
    length: {
      get: function () {
        console.warn(
          'THREE._0x3: .length has been deprecated. Use .count instead.'
        )
        return this.array.length
      },
    },
    dynamic: {
      get: function () {
        console.warn(
          'THREE._0x3: .dynamic has been deprecated. Use .usage instead.'
        )
        return 35048 === this.usage
      },
      set: function () {
        console.warn(
          'THREE._0x3: .dynamic has been deprecated. Use .usage instead.'
        )
        this.setUsage(35048)
      },
    },
  })
  Object.assign(C.prototype, {
    setDynamic: function (a) {
      console.warn(
        'THREE._0x3: .setDynamic() has been deprecated. Use .setUsage() instead.'
      )
      this.setUsage(!0 === a ? 35048 : 35044)
      return this
    },
    copyIndicesArray: function () {
      console.error('THREE._0x3: .copyIndicesArray() has been removed.')
    },
    setArray: function () {
      console.error(
        'THREE._0x3: .setArray has been removed. Use _0x2 .setAttribute to replace/resize attribute buffers'
      )
    },
  })
  Object.assign(I.prototype, {
    addIndex: function (a) {
      console.warn('THREE._0x2: .addIndex() has been renamed to .setIndex().')
      this.setIndex(a)
    },
    addAttribute: function (a, b, d) {
      console.warn(
        'THREE._0x2: .addAttribute() has been renamed to .setAttribute().'
      )
      return (b && b.is_0x3) || (b && b.isInterleaved_0x3)
        ? 'index' === a
          ? (console.warn(
              'THREE._0x2.addAttribute: Use .setIndex() for index attribute.'
            ),
            this.setIndex(b),
            this)
          : this.setAttribute(a, b)
        : (console.warn(
            'THREE._0x2: .addAttribute() now expects ( name, attribute ).'
          ),
          this.setAttribute(a, new C(b, d)))
    },
    addDrawCall: function (a, b, d) {
      void 0 !== d &&
        console.warn(
          'THREE._0x2: .addDrawCall() no longer supports indexOffset.'
        )
      console.warn('THREE._0x2: .addDrawCall() is now .addGroup().')
      this.addGroup(a, b)
    },
    clearDrawCalls: function () {
      console.warn('THREE._0x2: .clearDrawCalls() is now .clearGroups().')
      this.clearGroups()
    },
    computeTangents: function () {
      console.warn('THREE._0x2: .computeTangents() has been removed.')
    },
    computeOffsets: function () {
      console.warn('THREE._0x2: .computeOffsets() has been removed.')
    },
    removeAttribute: function (a) {
      console.warn(
        'THREE._0x2: .removeAttribute() has been renamed to .deleteAttribute().'
      )
      return this.deleteAttribute(a)
    },
    applyMatrix: function (a) {
      console.warn(
        'THREE._0x2: .applyMatrix() has been renamed to .applyMatrix4().'
      )
      return this.applyMatrix4(a)
    },
  })
  Object.defineProperties(I.prototype, {
    drawcalls: {
      get: function () {
        console.error('THREE._0x2: .drawcalls has been renamed to .groups.')
        return this.groups
      },
    },
    offsets: {
      get: function () {
        console.warn('THREE._0x2: .offsets has been renamed to .groups.')
        return this.groups
      },
    },
  })
  Object.defineProperties(ze.prototype, {
    maxInstancedCount: {
      get: function () {
        console.warn(
          'THREE.Instanced_0x2: .maxInstancedCount has been renamed to .instanceCount.'
        )
        return this.instanceCount
      },
      set: function (a) {
        console.warn(
          'THREE.Instanced_0x2: .maxInstancedCount has been renamed to .instanceCount.'
        )
        this.instanceCount = a
      },
    },
  })
  Object.defineProperties(Rg.prototype, {
    linePrecision: {
      get: function () {
        console.warn(
          'THREE.rct: .linePrecision has been deprecated. Use .params.Line.threshold instead.'
        )
        return this.params.Line.threshold
      },
      set: function (a) {
        console.warn(
          'THREE.rct: .linePrecision has been deprecated. Use .params.Line.threshold instead.'
        )
        this.params.Line.threshold = a
      },
    },
  })
  Object.defineProperties(hb.prototype, {
    dynamic: {
      get: function () {
        console.warn(
          'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.'
        )
        return 35048 === this.usage
      },
      set: function (a) {
        console.warn(
          'THREE.InterleavedBuffer: .length has been deprecated. Use .usage instead.'
        )
        this.setUsage(a)
      },
    },
  })
  Object.assign(hb.prototype, {
    setDynamic: function (a) {
      console.warn(
        'THREE.InterleavedBuffer: .setDynamic() has been deprecated. Use .setUsage() instead.'
      )
      this.setUsage(!0 === a ? 35048 : 35044)
      return this
    },
    setArray: function () {
      console.error(
        'THREE.InterleavedBuffer: .setArray has been removed. Use _0x2 .setAttribute to replace/resize attribute buffers'
      )
    },
  })
  Object.assign(Bb.prototype, {
    getArrays: function () {
      console.error('THREE.Extrude_0x2: .getArrays() has been removed.')
    },
    addShapeList: function () {
      console.error('THREE.Extrude_0x2: .addShapeList() has been removed.')
    },
    addShape: function () {
      console.error('THREE.Extrude_0x2: .addShape() has been removed.')
    },
  })
  Object.assign(fc.prototype, {
    dispose: function () {
      console.error('THREE.ss: .dispose() has been removed.')
    },
  })
  Object.defineProperties(eg.prototype, {
    dynamic: {
      set: function () {
        console.warn(
          'THREE.Uniform: .dynamic has been removed. Use object.onBeforeRender() instead.'
        )
      },
    },
    onUpdate: {
      value: function () {
        console.warn(
          'THREE.Uniform: .onUpdate() has been removed. Use object.onBeforeRender() instead.'
        )
        return this
      },
    },
  })
  Object.defineProperties(y.prototype, {
    wrapAround: {
      get: function () {
        console.warn('THREE.Material: .wrapAround has been removed.')
      },
      set: function () {
        console.warn('THREE.Material: .wrapAround has been removed.')
      },
    },
    overdraw: {
      get: function () {
        console.warn('THREE.Material: .overdraw has been removed.')
      },
      set: function () {
        console.warn('THREE.Material: .overdraw has been removed.')
      },
    },
    wrapRGB: {
      get: function () {
        console.warn('THREE.Material: .wrapRGB has been removed.')
        return new H()
      },
    },
    shading: {
      get: function () {
        console.error(
          'THREE.' +
            this.type +
            ': .shading has been removed. Use the boolean .flatShading instead.'
        )
      },
      set: function (a) {
        console.warn(
          'THREE.' +
            this.type +
            ': .shading has been removed. Use the boolean .flatShading instead.'
        )
        this.flatShading = 1 === a
      },
    },
    stencilMask: {
      get: function () {
        console.warn(
          'THREE.' +
            this.type +
            ': .stencilMask has been removed. Use .stencilFuncMask instead.'
        )
        return this.stencilFuncMask
      },
      set: function (a) {
        console.warn(
          'THREE.' +
            this.type +
            ': .stencilMask has been removed. Use .stencilFuncMask instead.'
        )
        this.stencilFuncMask = a
      },
    },
  })
  Object.defineProperties(kc.prototype, {
    metal: {
      get: function () {
        console.warn(
          'THREE.naPhongMaterial: .metal has been removed. Use THREE.naStandardMaterial instead.'
        )
        return !1
      },
      set: function () {
        console.warn(
          'THREE.naPhongMaterial: .metal has been removed. Use THREE.naStandardMaterial instead'
        )
      },
    },
  })
  Object.defineProperties(jc.prototype, {
    transparency: {
      get: function () {
        console.warn(
          'THREE.naPhysicalMaterial: .transparency has been renamed to .transmission.'
        )
        return this.transmission
      },
      set: function (a) {
        console.warn(
          'THREE.naPhysicalMaterial: .transparency has been renamed to .transmission.'
        )
        this.transmission = a
      },
    },
  })
  Object.defineProperties(wa.prototype, {
    derivatives: {
      get: function () {
        console.warn(
          'THREE.ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'
        )
        return this.extensions.derivatives
      },
      set: function (a) {
        console.warn(
          'THREE. ShaderMaterial: .derivatives has been moved to .extensions.derivatives.'
        )
        this.extensions.derivatives = a
      },
    },
  })
  Object.assign(Wd.prototype, {
    clearTarget: function (a, b, d, e) {
      console.warn(
        'THREE.q5: .clearTarget() has been deprecated. Use .setRenderTarget() and .clear() instead.'
      )
      this.setRenderTarget(a)
      this.clear(b, d, e)
    },
    animate: function (a) {
      console.warn('THREE.q5: .animate() is now .setAnimationLoop().')
      this.setAnimationLoop(a)
    },
    getCurrentRenderTarget: function () {
      console.warn(
        'THREE.q5: .getCurrentRenderTarget() is now .getRenderTarget().'
      )
      return this.getRenderTarget()
    },
    getMaxAnisotropy: function () {
      console.warn(
        'THREE.q5: .getMaxAnisotropy() is now .capabilities.getMaxAnisotropy().'
      )
      return this.capabilities.getMaxAnisotropy()
    },
    getPrecision: function () {
      console.warn('THREE.q5: .getPrecision() is now .capabilities.precision.')
      return this.capabilities.precision
    },
    resetGLState: function () {
      console.warn('THREE.q5: .resetGLState() is now .state.reset().')
      return this.state.reset()
    },
    supportsFloatTextures: function () {
      console.warn(
        "THREE.q5: .supportsFloatTextures() is now .extensions.get( 'OES_texture_float' )."
      )
      return this.extensions.get('OES_texture_float')
    },
    supportsHalfFloatTextures: function () {
      console.warn(
        "THREE.q5: .supportsHalfFloatTextures() is now .extensions.get( 'OES_texture_half_float' )."
      )
      return this.extensions.get('OES_texture_half_float')
    },
    supportsStandardDerivatives: function () {
      console.warn(
        "THREE.q5: .supportsStandardDerivatives() is now .extensions.get( 'OES_standard_derivatives' )."
      )
      return this.extensions.get('OES_standard_derivatives')
    },
    supportsCompressedTextureS3TC: function () {
      console.warn(
        "THREE.q5: .supportsCompressedTextureS3TC() is now .extensions.get( 'WEBGL_compressed_texture_s3tc' )."
      )
      return this.extensions.get('WEBGL_compressed_texture_s3tc')
    },
    supportsCompressedTexturePVRTC: function () {
      console.warn(
        "THREE.q5: .supportsCompressedTexturePVRTC() is now .extensions.get( 'WEBGL_compressed_texture_pvrtc' )."
      )
      return this.extensions.get('WEBGL_compressed_texture_pvrtc')
    },
    supportsBlendMinMax: function () {
      console.warn(
        "THREE.q5: .supportsBlendMinMax() is now .extensions.get( 'EXT_blend_minmax' )."
      )
      return this.extensions.get('EXT_blend_minmax')
    },
    supportsVertexTextures: function () {
      console.warn(
        'THREE.q5: .supportsVertexTextures() is now .capabilities.vertexTextures.'
      )
      return this.capabilities.vertexTextures
    },
    supportsInstancedArrays: function () {
      console.warn(
        "THREE.q5: .supportsInstancedArrays() is now .extensions.get( 'ANGLE_instanced_arrays' )."
      )
      return this.extensions.get('ANGLE_instanced_arrays')
    },
    enableScissorTest: function (a) {
      console.warn('THREE.q5: .enableScissorTest() is now .setScissorTest().')
      this.setScissorTest(a)
    },
    _0x2F: function () {
      console.warn('THREE.q5: ._0x2F() has been removed.')
    },
    addPrePlugin: function () {
      console.warn('THREE.q5: .addPrePlugin() has been removed.')
    },
    addPostPlugin: function () {
      console.warn('THREE.q5: .addPostPlugin() has been removed.')
    },
    updateShadowMap: function () {
      console.warn('THREE.q5: .updateShadowMap() has been removed.')
    },
    setFaceCulling: function () {
      console.warn('THREE.q5: .setFaceCulling() has been removed.')
    },
    allocTextureUnit: function () {
      console.warn('THREE.q5: .allocTextureUnit() has been removed.')
    },
    setTexture: function () {
      console.warn('THREE.q5: .setTexture() has been removed.')
    },
    setTexture2D: function () {
      console.warn('THREE.q5: .setTexture2D() has been removed.')
    },
    setTextureCube: function () {
      console.warn('THREE.q5: .setTextureCube() has been removed.')
    },
    getActiveMipMapLevel: function () {
      console.warn(
        'THREE.q5: .getActiveMipMapLevel() is now .getActiveMipmapLevel().'
      )
      return this.getActiveMipmapLevel()
    },
  })
  Object.defineProperties(Wd.prototype, {
    shadowMapEnabled: {
      get: function () {
        return this.shadowMap.enabled
      },
      set: function (a) {
        console.warn('THREE.q5: .shadowMapEnabled is now .shadowMap.enabled.')
        this.shadowMap.enabled = a
      },
    },
    shadowMapType: {
      get: function () {
        return this.shadowMap.type
      },
      set: function (a) {
        console.warn('THREE.q5: .shadowMapType is now .shadowMap.type.')
        this.shadowMap.type = a
      },
    },
    shadowMapCullFace: {
      get: function () {
        console.warn(
          'THREE.q5: .shadowMapCullFace has been removed. Set Material.shadowSide instead.'
        )
      },
      set: function () {
        console.warn(
          'THREE.q5: .shadowMapCullFace has been removed. Set Material.shadowSide instead.'
        )
      },
    },
    context: {
      get: function () {
        console.warn(
          'THREE.q5: .context has been removed. Use .getContext() instead.'
        )
        return this.getContext()
      },
    },
    vr: {
      get: function () {
        console.warn('THREE.q5: .vr has been renamed to .xr')
        return this.xr
      },
    },
    gammaInput: {
      get: function () {
        console.warn(
          'THREE.q5: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.'
        )
        return !1
      },
      set: function () {
        console.warn(
          'THREE.q5: .gammaInput has been removed. Set the encoding for textures via Texture.encoding instead.'
        )
      },
    },
    gammaOutput: {
      get: function () {
        console.warn(
          'THREE.q5: .gammaOutput has been removed. Set q5.outputEncoding instead.'
        )
        return !1
      },
      set: function (a) {
        console.warn(
          'THREE.q5: .gammaOutput has been removed. Set q5.outputEncoding instead.'
        )
        this.outputEncoding = !0 === a ? 3001 : 3e3
      },
    },
    toneMappingWhitePoint: {
      get: function () {
        console.warn('THREE.q5: .toneMappingWhitePoint has been removed.')
        return 1
      },
      set: function () {
        console.warn('THREE.q5: .toneMappingWhitePoint has been removed.')
      },
    },
  })
  Object.defineProperties(Qh.prototype, {
    cullFace: {
      get: function () {
        console.warn(
          'THREE.q5: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.'
        )
      },
      set: function () {
        console.warn(
          'THREE.q5: .shadowMap.cullFace has been removed. Set Material.shadowSide instead.'
        )
      },
    },
    renderReverseSided: {
      get: function () {
        console.warn(
          'THREE.q5: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.'
        )
      },
      set: function () {
        console.warn(
          'THREE.q5: .shadowMap.renderReverseSided has been removed. Set Material.shadowSide instead.'
        )
      },
    },
    renderSingleSided: {
      get: function () {
        console.warn(
          'THREE.q5: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.'
        )
      },
      set: function () {
        console.warn(
          'THREE.q5: .shadowMap.renderSingleSided has been removed. Set Material.shadowSide instead.'
        )
      },
    },
  })
  Object.defineProperties(k.prototype, {
    wrapS: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.')
        return this.texture.wrapS
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .wrapS is now .texture.wrapS.')
        this.texture.wrapS = a
      },
    },
    wrapT: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.')
        return this.texture.wrapT
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .wrapT is now .texture.wrapT.')
        this.texture.wrapT = a
      },
    },
    magFilter: {
      get: function () {
        console.warn(
          'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'
        )
        return this.texture.magFilter
      },
      set: function (a) {
        console.warn(
          'THREE.WebGLRenderTarget: .magFilter is now .texture.magFilter.'
        )
        this.texture.magFilter = a
      },
    },
    minFilter: {
      get: function () {
        console.warn(
          'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'
        )
        return this.texture.minFilter
      },
      set: function (a) {
        console.warn(
          'THREE.WebGLRenderTarget: .minFilter is now .texture.minFilter.'
        )
        this.texture.minFilter = a
      },
    },
    anisotropy: {
      get: function () {
        console.warn(
          'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'
        )
        return this.texture.anisotropy
      },
      set: function (a) {
        console.warn(
          'THREE.WebGLRenderTarget: .anisotropy is now .texture.anisotropy.'
        )
        this.texture.anisotropy = a
      },
    },
    offset: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.')
        return this.texture.offset
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .offset is now .texture.offset.')
        this.texture.offset = a
      },
    },
    repeat: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.')
        return this.texture.repeat
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .repeat is now .texture.repeat.')
        this.texture.repeat = a
      },
    },
    format: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.')
        return this.texture.format
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .format is now .texture.format.')
        this.texture.format = a
      },
    },
    type: {
      get: function () {
        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.')
        return this.texture.type
      },
      set: function (a) {
        console.warn('THREE.WebGLRenderTarget: .type is now .texture.type.')
        this.texture.type = a
      },
    },
    generateMipmaps: {
      get: function () {
        console.warn(
          'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'
        )
        return this.texture.generateMipmaps
      },
      set: function (a) {
        console.warn(
          'THREE.WebGLRenderTarget: .generateMipmaps is now .texture.generateMipmaps.'
        )
        this.texture.generateMipmaps = a
      },
    },
  })
  Object.defineProperties(ja.prototype, {
    load: {
      value: function (a) {
        console.warn(
          'THREE.Audio: .load has been deprecated. Use THREE.AudioLoader instead.'
        )
        var b = this
        new Df().load(a, function (a) {
          b.setBuffer(a)
        })
        return this
      },
    },
    startTime: {
      set: function () {
        console.warn('THREE.Audio: .startTime is now .play( delay ).')
      },
    },
  })
  dg.prototype.getData = function () {
    console.warn('THREE.AudioAnalyser: .getData() is now .getFrequencyData().')
    return this.getFrequencyData()
  }
  Kb.prototype.updateCubeMap = function (a, b) {
    console.warn('THREE.CubeCamera: .updateCubeMap() is now .update().')
    return this.update(a, b)
  }
  oc.crossOrigin = void 0
  oc.loadTexture = function (a, b, d, e) {
    console.warn(
      'THREE.ImageUtils.loadTexture has been deprecated. Use THREE.q6() instead.'
    )
    var f = new sf()
    f.setCrossOrigin(this.crossOrigin)
    a = f.load(a, d, void 0, e)
    b && (a.mapping = b)
    return a
  }
  oc.loadTextureCube = function (a, b, d, e) {
    console.warn(
      'THREE.ImageUtils.loadTextureCube has been deprecated. Use THREE.Cubeq6() instead.'
    )
    var f = new qf()
    f.setCrossOrigin(this.crossOrigin)
    a = f.load(a, d, void 0, e)
    b && (a.mapping = b)
    return a
  }
  oc.loadCompressedTexture = function () {
    console.error(
      'THREE.ImageUtils.loadCompressedTexture has been removed. Use THREE.DDSLoader instead.'
    )
  }
  oc.loadCompressedTextureCube = function () {
    console.error(
      'THREE.ImageUtils.loadCompressedTextureCube has been removed. Use THREE.DDSLoader instead.'
    )
  }
  'undefined' !== typeof ___0x0_DEVTOOLS__ &&
    ___0x0_DEVTOOLS__.dispatchEvent(
      new CustomEvent('register', { detail: { revision: '120' } })
    )
  f.ACESFilmicToneMapping = 4
  f.AddEquation = 100
  f.AddOperation = 2
  f.AdditiveAnimationBlendMode = 2501
  f.AdditiveBlending = 2
  f.AlphaFormat = 1021
  f.AlwaysDepth = 1
  f.AlwaysStencilFunc = 519
  f.q10 = xf
  f.q10Probe = Lg
  f.AnimationClip = mb
  f.AnimationLoader = Ag
  f.AnimationMixer = Og
  f.AnimationObjectGroup = gi
  f.AnimationUtils = xa
  f.ArcCurve = vd
  f.ArrayCamera = bf
  f.ArrowHelper = nc
  f.Audio = ja
  f.AudioAnalyser = dg
  f.AudioContext = Mg
  f.AudioListener = xb
  f.AudioLoader = Df
  f.AxesHelper = Fe
  f.AxisHelper = function (a) {
    console.warn('THREE.AxisHelper has been renamed to THREE.AxesHelper.')
    return new Fe(a)
  }
  f.BackSide = 1
  f.BasicDepthPacking = 3200
  f.BasicShadowMap = 0
  f.Binaryq6 = function (a) {
    console.warn('THREE.Binaryq6 has been renamed to THREE.Dataq6.')
    return new rf(a)
  }
  f.Bone = tg
  f.BooleanKeyframeTrack = mf
  f.BoundingBoxHelper = function (a, b) {
    console.warn(
      'THREE.BoundingBoxHelper has been deprecated. Creating a THREE.BoxHelper instead.'
    )
    return new mc(a, b)
  }
  f.Box2 = Aa
  f.b7 = ba
  f.b7Helper = De
  f.Box_0x2 = Ha
  f.Box_0x6 = Ka
  f.BoxHelper = mc
  f._0x3 = C
  f._0x2 = I
  f._0x2Loader = Bf
  f.ByteType = 1010
  f.Cache = Oc
  f.Camera = ua
  f.CameraHelper = Ce
  f.CanvasRenderer = function () {
    console.error('THREE.CanvasRenderer has been removed')
  }
  f.CanvasTexture = ae
  f.CatmullRomCurve3 = Sa
  f.CineonToneMapping = 3
  f.Circle_0x2 = rd
  f.Circle_0x6 = ue
  f.ClampToEdgeWrapping = 1001
  f.Clock = xd
  f.ClosedSplineCurve3 = mi
  f.Color = H
  f.ColorKeyframeTrack = nf
  f.CompressedTexture = ed
  f.Compressedq6 = Bg
  f.Cone_0x2 = te
  f.Cone_0x6 = se
  f.CubeCamera = Kb
  f.Cube_0x6 = Ka
  f.CubeReflectionMapping = 301
  f.CubeRefractionMapping = 302
  f.CubeTexture = Mb
  f.Cubeq6 = qf
  f.CubeUVReflectionMapping = 306
  f.CubeUVRefractionMapping = 307
  f.CubicBezierCurve = sb
  f.CubicBezierCurve3 = Db
  f.CubicInterpolant = kf
  f.CullFaceBack = 1
  f.CullFaceFront = 2
  f.CullFaceFrontBack = 3
  f.CullFaceNone = 0
  f.Curve = T
  f.CurvePath = Qb
  f.CustomBlending = 5
  f.CustomToneMapping = 5
  f.Cylinder_0x2 = Ob
  f.Cylinder_0x6 = Ec
  f.Cylindrical = Pd
  f.DataTexture = Za
  f.DataTexture2DArray = Zc
  f.DataTexture3D = $c
  f.Dataq6 = rf
  f.DecrementStencilOp = 7683
  f.DecrementWrapStencilOp = 34056
  f.DefaultLoadingManager = ci
  f.DepthFormat = 1026
  f.DepthStencilFormat = 1027
  f.DepthTexture = be
  f.q9 = wf
  f.q9Helper = Cd
  f.DiscreteInterpolant = lf
  f.Dodecahedron_0x2 = jd
  f.Dodecahedron_0x6 = he
  f.ds = 2
  f.DstAlphaFactor = 206
  f.DstColorFactor = 208
  f.Dynamic_0x3 = function (a, b) {
    console.warn(
      'THREE.Dynamic_0x3 has been removed. Use new THREE._0x3().setUsage( THREE.DynamicDrawUsage ) instead.'
    )
    return new C(a, b).setUsage(35048)
  }
  f.DynamicCopyUsage = 35050
  f.DynamicDrawUsage = 35048
  f.DynamicReadUsage = 35049
  f.Edges_0x6 = qd
  f.EdgesHelper = function (a, b) {
    console.warn(
      'THREE.EdgesHelper has been removed. Use THREE.Edges_0x6 instead.'
    )
    return new qa(
      new qd(a.geometry),
      new ma({ color: void 0 !== b ? b : 16777215 })
    )
  }
  f.EllipseCurve = jb
  f.EqualDepth = 4
  f.EqualStencilFunc = 514
  f.EquirectangularReflectionMapping = 303
  f.EquirectangularRefractionMapping = 304
  f.Euler = Fa
  f.EventDispatcher = m
  f.Extrude_0x2 = Bb
  f.Extrude_0x6 = Ac
  f._0x4 = vc
  f.Face4 = function (a, b, d, e, f, g, k) {
    console.warn(
      'THREE.Face4 has been removed. A THREE._0x4 will be created instead.'
    )
    return new vc(a, b, d, f, g, k)
  }
  f.fc = 1
  f.FileLoader = nb
  f.FlatShading = 1
  f.Float32Attribute = function (a, b) {
    console.warn(
      'THREE.Float32Attribute has been removed. Use new THREE.Float32_0x3() instead.'
    )
    return new E(a, b)
  }
  f.Float32_0x3 = E
  f.Float64Attribute = function (a, b) {
    console.warn(
      'THREE.Float64Attribute has been removed. Use new THREE.Float64_0x3() instead.'
    )
    return new U(a, b)
  }
  f.Float64_0x3 = U
  f.FloatType = 1015
  f.Fog = Oe
  f.FogExp2 = Ne
  f.Font = Ig
  f.FontLoader = Jg
  f.FrontSide = 0
  f.Frustum = $a
  f.GL_0x3 = Qg
  f.GLSL1 = '100'
  f.GLSL3 = '300 es'
  f.GammaEncoding = 3007
  f._0x6 = V
  f._0x6Utils = {
    merge: function (a, b, d) {
      console.warn(
        'THREE._0x6Utils: .merge() has been moved to _0x6. Use geometry.merge( geometry2, matrix, materialIndexOffset ) instead.'
      )
      var e
      b.isna &&
        (b.matrixAutoUpdate && b.updateMatrix(),
        (e = b.matrix),
        (b = b.geometry))
      a.merge(b, e, d)
    },
    center: function (a) {
      console.warn(
        'THREE._0x6Utils: .center() has been moved to _0x6. Use geometry.center() instead.'
      )
      return a.center()
    },
  }
  f.GreaterDepth = 6
  f.GreaterEqualDepth = 5
  f.GreaterEqualStencilFunc = 518
  f.GreaterStencilFunc = 516
  f.GridHelper = Be
  f.Group = dc
  f.HalfFloatType = 1016
  f.HemisphereLight = tf
  f.HemisphereLightHelper = Bd
  f.HemisphereLightProbe = Kg
  f.Icosahedron_0x2 = id
  f.Icosahedron_0x6 = ge
  f.ImageBitmapLoader = Gg
  f.ImageLoader = ud
  f.ImageUtils = oc
  f.ImmediateRenderObject = Ae
  f.IncrementStencilOp = 7682
  f.IncrementWrapStencilOp = 34055
  f.Instanced_0x3 = Af
  f.Instanced_0x2 = ze
  f.InstancedInterleavedBuffer = Pg
  f.Instancedna = $d
  f.Int16Attribute = function (a, b) {
    console.warn(
      'THREE.Int16Attribute has been removed. Use new THREE.Int16_0x3() instead.'
    )
    return new Y(a, b)
  }
  f.Int16_0x3 = Y
  f.Int32Attribute = function (a, b) {
    console.warn(
      'THREE.Int32Attribute has been removed. Use new THREE.Int32_0x3() instead.'
    )
    return new R(a, b)
  }
  f.Int32_0x3 = R
  f.Int8Attribute = function (a, b) {
    console.warn(
      'THREE.Int8Attribute has been removed. Use new THREE.Int8_0x3() instead.'
    )
    return new G(a, b)
  }
  f.Int8_0x3 = G
  f.IntType = 1013
  f.InterleavedBuffer = hb
  f.Interleaved_0x3 = gc
  f.Interpolant = ib
  f.InterpolateDiscrete = 2300
  f.InterpolateLinear = 2301
  f.InterpolateSmooth = 2302
  f.InvertStencilOp = 5386
  f.JSONLoader = function () {
    console.error('THREE.JSONLoader has been removed.')
  }
  f.KeepStencilOp = 7680
  f.KeyframeTrack = Ma
  f.LOD = Zd
  f.Lathe_0x2 = pd
  f.Lathe_0x6 = re
  f.Layers = Ab
  f.LensFlare = function () {
    console.error(
      'THREE.LensFlare has been moved to /examples/jsm/objects/Lensflare.js'
    )
  }
  f.LessDepth = 2
  f.LessEqualDepth = 3
  f.LessEqualStencilFunc = 515
  f.LessStencilFunc = 513
  f.Light = ra
  f.LightProbe = ob
  f.LightShadow = Fb
  f.Line = ab
  f.Line3 = eb
  f.b3 = ma
  f.LineCurve = cb
  f.LineCurve3 = tb
  f.LineDashedMaterial = Kc
  f.LineLoop = ff
  f.LinePieces = 1
  f.b2 = qa
  f.LineStrip = 0
  f.LinearEncoding = 3e3
  f.LinearFilter = 1006
  f.LinearInterpolant = ve
  f.LinearMipMapLinearFilter = 1008
  f.LinearMipMapNearestFilter = 1007
  f.LinearMipmapLinearFilter = 1008
  f.LinearMipmapNearestFilter = 1007
  f.LinearToneMapping = 1
  f.Loader = oa
  f.LoaderUtils = ph
  f.LoadingManager = zg
  f.LogLuvEncoding = 3003
  f.LoopOnce = 2200
  f.LoopPingPong = 2202
  f.LoopRepeat = 2201
  f.LuminanceAlphaFormat = 1025
  f.LuminanceFormat = 1024
  f.MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 }
  f.Material = y
  f.MaterialLoader = zf
  f.Math = ea
  f.MathUtils = ea
  f.Matrix3 = ha
  f.Matrix4 = O
  f.MaxEquation = 104
  f.na = ca
  f.naBasicMaterial = L
  f.naDepthMaterial = bc
  f.naDistanceMaterial = cc
  f.naFaceMaterial = function (a) {
    console.warn('THREE.naFaceMaterial has been removed. Use an Array instead.')
    return a
  }
  f.q7 = Ic
  f.naMatcapMaterial = Jc
  f.naNormalMaterial = Hc
  f.naPhongMaterial = kc
  f.naPhysicalMaterial = jc
  f.naStandardMaterial = Cb
  f.naToonMaterial = Gc
  f.MinEquation = 103
  f.MirroredRepeatWrapping = 1002
  f.MixOperation = 1
  f.MultiMaterial = function (a) {
    void 0 === a && (a = [])
    console.warn('THREE.MultiMaterial has been removed. Use an Array instead.')
    a.isMultiMaterial = !0
    a.materials = a
    a.clone = function () {
      return a.slice()
    }
    return a
  }
  f.MultiplyBlending = 4
  f.MultiplyOperation = 0
  f.NearestFilter = 1003
  f.NearestMipMapLinearFilter = 1005
  f.NearestMipMapNearestFilter = 1004
  f.NearestMipmapLinearFilter = 1005
  f.NearestMipmapNearestFilter = 1004
  f.NeverDepth = 0
  f.NeverStencilFunc = 512
  f.NoBlending = 0
  f.NoColors = 0
  f.NoToneMapping = 0
  f.NormalAnimationBlendMode = 2500
  f.NormalBlending = 1
  f.NotEqualDepth = 7
  f.NotEqualStencilFunc = 517
  f.NumberKeyframeTrack = sd
  f.Object3D = n
  f.ObjectLoader = Cf
  f.ObjectSpaceNormalMap = 1
  f.Octahedron_0x2 = yc
  f.Octahedron_0x6 = fe
  f.OneFactor = 201
  f.OneMinusDstAlphaFactor = 207
  f.OneMinusDstColorFactor = 209
  f.OneMinusSrcAlphaFactor = 205
  f.OneMinusSrcColorFactor = 203
  f.OrthographicCamera = wd
  f.PCFShadowMap = 1
  f.PCFSoftShadowMap = 2
  f.PMREMGenerator = Va
  f.Parametric_0x2 = gd
  f.Parametric_0x6 = ce
  f.Particle = function (a) {
    console.warn('THREE.Particle has been renamed to THREE.Sprite.')
    return new Xd(a)
  }
  f.ParticleBasicMaterial = function (a) {
    console.warn(
      'THREE.ParticleBasicMaterial has been renamed to THREE.PointsMaterial.'
    )
    return new rb(a)
  }
  f.ParticleSystem = function (a, b) {
    console.warn('THREE.ParticleSystem has been renamed to THREE.Points.')
    return new dd(a, b)
  }
  f.ParticleSystemMaterial = function (a) {
    console.warn(
      'THREE.ParticleSystemMaterial has been renamed to THREE.PointsMaterial.'
    )
    return new rb(a)
  }
  f.Path = wb
  f.q4 = la
  f.pl = da
  f.pl_0x2 = Qa
  f.pl_0x6 = Lb
  f.q8 = Ee
  f.PointCloud = function (a, b) {
    console.warn('THREE.PointCloud has been renamed to THREE.Points.')
    return new dd(a, b)
  }
  f.PointCloudMaterial = function (a) {
    console.warn(
      'THREE.PointCloudMaterial has been renamed to THREE.PointsMaterial.'
    )
    return new rb(a)
  }
  f.PointLight = vf
  f.PointLightHelper = Ad
  f.Points = dd
  f.PointsMaterial = rb
  f.PolarGridHelper = Ef
  f.Polyhedron_0x2 = bb
  f.Polyhedron_0x6 = de
  f.PositionalAudio = Wa
  f.PropertyBinding = Ua
  f.PropertyMixer = Ng
  f.QuadraticBezierCurve = ub
  f.QuadraticBezierCurve3 = Eb
  f.Quaternion = Z
  f.QuaternionKeyframeTrack = we
  f.QuaternionLinearInterpolant = of
  f.REVISION = '120'
  f.RGBADepthPacking = 3201
  f.RGBAFormat = 1023
  f.RGBAIntegerFormat = 1033
  f.RGBA_ASTC_10x10_Format = 37819
  f.RGBA_ASTC_10x5_Format = 37816
  f.RGBA_ASTC_10x6_Format = 37817
  f.RGBA_ASTC_10x8_Format = 37818
  f.RGBA_ASTC_12x10_Format = 37820
  f.RGBA_ASTC_12x12_Format = 37821
  f.RGBA_ASTC_4x4_Format = 37808
  f.RGBA_ASTC_5x4_Format = 37809
  f.RGBA_ASTC_5x5_Format = 37810
  f.RGBA_ASTC_6x5_Format = 37811
  f.RGBA_ASTC_6x6_Format = 37812
  f.RGBA_ASTC_8x5_Format = 37813
  f.RGBA_ASTC_8x6_Format = 37814
  f.RGBA_ASTC_8x8_Format = 37815
  f.RGBA_BPTC_Format = 36492
  f.RGBA_ETC2_EAC_Format = 37496
  f.RGBA_PVRTC_2BPPV1_Format = 35843
  f.RGBA_PVRTC_4BPPV1_Format = 35842
  f.RGBA_S3TC_DXT1_Format = 33777
  f.RGBA_S3TC_DXT3_Format = 33778
  f.RGBA_S3TC_DXT5_Format = 33779
  f.RGBDEncoding = 3006
  f.RGBEEncoding = 3002
  f.RGBEFormat = 1023
  f.RGBFormat = 1022
  f.RGBIntegerFormat = 1032
  f.RGBM16Encoding = 3005
  f.RGBM7Encoding = 3004
  f.RGB_ETC1_Format = 36196
  f.RGB_ETC2_Format = 37492
  f.RGB_PVRTC_2BPPV1_Format = 35841
  f.RGB_PVRTC_4BPPV1_Format = 35840
  f.RGB_S3TC_DXT1_Format = 33776
  f.RGFormat = 1030
  f.RGIntegerFormat = 1031
  f.RawShaderMaterial = Pb
  f.Ray = pa
  f.rct = Rg
  f.RectAreaLight = yf
  f.RedFormat = 1028
  f.RedIntegerFormat = 1029
  f.ReinhardToneMapping = 2
  f.RepeatWrapping = 1e3
  f.ReplaceStencilOp = 7681
  f.ReverseSubtractEquation = 102
  f.Ring_0x2 = od
  f.Ring_0x6 = qe
  f.SRGB8_ALPHA8_ASTC_10x10_Format = 37851
  f.SRGB8_ALPHA8_ASTC_10x5_Format = 37848
  f.SRGB8_ALPHA8_ASTC_10x6_Format = 37849
  f.SRGB8_ALPHA8_ASTC_10x8_Format = 37850
  f.SRGB8_ALPHA8_ASTC_12x10_Format = 37852
  f.SRGB8_ALPHA8_ASTC_12x12_Format = 37853
  f.SRGB8_ALPHA8_ASTC_4x4_Format = 37840
  f.SRGB8_ALPHA8_ASTC_5x4_Format = 37841
  f.SRGB8_ALPHA8_ASTC_5x5_Format = 37842
  f.SRGB8_ALPHA8_ASTC_6x5_Format = 37843
  f.SRGB8_ALPHA8_ASTC_6x6_Format = 37844
  f.SRGB8_ALPHA8_ASTC_8x5_Format = 37845
  f.SRGB8_ALPHA8_ASTC_8x6_Format = 37846
  f.SRGB8_ALPHA8_ASTC_8x8_Format = 37847
  f.ss = fc
  f.ssUtils = {
    createMultiMaterialObject: function () {
      console.error(
        'THREE.ssUtils has been moved to /examples/jsm/utils/ssUtils.js'
      )
    },
    detach: function () {
      console.error(
        'THREE.ssUtils has been moved to /examples/jsm/utils/ssUtils.js'
      )
    },
    attach: function () {
      console.error(
        'THREE.ssUtils has been moved to /examples/jsm/utils/ssUtils.js'
      )
    },
  }
  f.ShaderChunk = ia
  f.ShaderLib = qb
  f.ShaderMaterial = wa
  f.ShadowMaterial = Fc
  f.Shape = lc
  f.Shape_0x2 = Dc
  f.Shape_0x6 = Cc
  f.ShapePath = Hg
  f.ShapeUtils = Nb
  f.ShortType = 1011
  f.Skeleton = ef
  f.SkeletonHelper = zd
  f.Skinnedna = df
  f.SmoothShading = 2
  f.Sphere = ta
  f.Sphere_0x2 = Bc
  f.Sphere_0x6 = pe
  f.b6 = Tc
  f.b6Harmonics3 = Ta
  f.Spline = Wg
  f.SplineCurve = vb
  f.SplineCurve3 = ni
  f.SpotLight = uf
  f.SpotLightHelper = yd
  f.Sprite = Xd
  f.SpriteMaterial = hc
  f.SrcAlphaFactor = 204
  f.SrcAlphaSaturateFactor = 210
  f.SrcColorFactor = 202
  f.StaticCopyUsage = 35046
  f.StaticDrawUsage = 35044
  f.StaticReadUsage = 35045
  f.StereoCamera = ei
  f.StreamCopyUsage = 35042
  f.StreamDrawUsage = 35040
  f.StreamReadUsage = 35041
  f.StringKeyframeTrack = pf
  f.SubtractEquation = 101
  f.SubtractiveBlending = 3
  f.TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 }
  f.TangentSpaceNormalMap = 0
  f.Tetrahedron_0x2 = hd
  f.Tetrahedron_0x6 = ee
  f.Text_0x2 = nd
  f.Text_0x6 = oe
  f.Texture = g
  f.q6 = sf
  f.Torus_0x2 = ld
  f.Torus_0x6 = ke
  f.TorusKnot_0x2 = kd
  f.TorusKnot_0x6 = je
  f.Triangle = fa
  f.TriangleFanDrawMode = 2
  f.TriangleStripDrawMode = 1
  f.TrianglesDrawMode = 0
  f.Tube_0x2 = zc
  f.Tube_0x6 = ie
  f.UVMapping = 300
  f.Uint16Attribute = function (a, b) {
    console.warn(
      'THREE.Uint16Attribute has been removed. Use new THREE.Uint16_0x3() instead.'
    )
    return new S(a, b)
  }
  f.Uint16_0x3 = S
  f.Uint32Attribute = function (a, b) {
    console.warn(
      'THREE.Uint32Attribute has been removed. Use new THREE.Uint32_0x3() instead.'
    )
    return new X(a, b)
  }
  f.Uint32_0x3 = X
  f.Uint8Attribute = function (a, b) {
    console.warn(
      'THREE.Uint8Attribute has been removed. Use new THREE.Uint8_0x3() instead.'
    )
    return new v(a, b)
  }
  f.Uint8_0x3 = v
  f.Uint8ClampedAttribute = function (a, b) {
    console.warn(
      'THREE.Uint8ClampedAttribute has been removed. Use new THREE.Uint8Clamped_0x3() instead.'
    )
    return new Q(a, b)
  }
  f.Uint8Clamped_0x3 = Q
  f.Uniform = eg
  f.UniformsLib = N
  f.UniformsUtils = Nh
  f.UnsignedByteType = 1009
  f.UnsignedInt248Type = 1020
  f.UnsignedIntType = 1014
  f.UnsignedShort4444Type = 1017
  f.UnsignedShort5551Type = 1018
  f.UnsignedShort565Type = 1019
  f.UnsignedShortType = 1012
  f.VSMShadowMap = 3
  f.vt2 = B
  f._0x1 = p
  f.Vector4 = P
  f.VectorKeyframeTrack = td
  f.Vertex = function (a, b, d) {
    console.warn('THREE.Vertex has been removed. Use THREE._0x1 instead.')
    return new p(a, b, d)
  }
  f.VertexColors = 2
  f.VideoTexture = wg
  f.WebGL1Renderer = sg
  f.WebGLCubeRenderTarget = pb
  f.WebGLMultisampleRenderTarget = r
  f.WebGLRenderTarget = k
  f.WebGLRenderTargetCube = function (a, b, d) {
    console.warn(
      'THREE.WebGLRenderTargetCube( width, height, options ) is now WebGLCubeRenderTarget( size, options ).'
    )
    return new pb(a, d)
  }
  f.q5 = Wd
  f.WebGLUtils = Rh
  f.Wireframe_0x6 = fd
  f.WireframeHelper = function (a, b) {
    console.warn(
      'THREE.WireframeHelper has been removed. Use THREE.Wireframe_0x6 instead.'
    )
    return new qa(
      new fd(a.geometry),
      new ma({ color: void 0 !== b ? b : 16777215 })
    )
  }
  f.WrapAroundEnding = 2402
  f.XHRLoader = function (a) {
    console.warn('THREE.XHRLoader has been renamed to THREE.FileLoader.')
    return new nb(a)
  }
  f.ZeroCurvatureEnding = 2400
  f.ZeroFactor = 200
  f.ZeroSlopeEnding = 2401
  f.ZeroStencilOp = 0
  f.sRGBEncoding = 3001
  Object.defineProperty(f, '__esModule', { value: !0 })
})
THREE.DDSLoader = function (f) {
  THREE.Compressedq6.call(this, f)
  this._parser = THREE.DDSLoader.parse
}
THREE.DDSLoader.prototype = Object.create(THREE.Compressedq6.prototype)
THREE.DDSLoader.prototype.constructor = THREE.DDSLoader
THREE.DDSLoader.parse = function (f, m) {
  function g(f) {
    return (
      f.charCodeAt(0) +
      (f.charCodeAt(1) << 8) +
      (f.charCodeAt(2) << 16) +
      (f.charCodeAt(3) << 24)
    )
  }
  function k(f, g, k, m) {
    var n = k * m * 4
    f = new Uint8Array(f, g, n)
    for (var n = new Uint8Array(n), r = (g = 0), u = 0; u < m; u++)
      for (var w = 0; w < k; w++) {
        var v = f[r]
        r++
        var z = f[r]
        r++
        var y = f[r]
        r++
        var x = f[r]
        r++
        n[g] = y
        g++
        n[g] = z
        g++
        n[g] = v
        g++
        n[g] = x
        g++
      }
    return n
  }
  var r = { mipmaps: [], width: 0, height: 0, format: null, mipmapCount: 1 },
    x = g('DXT1'),
    n = g('DXT3'),
    z = g('DXT5'),
    u = g('ETC1'),
    w = new Int32Array(f, 0, 31)
  if (542327876 !== w[0])
    return (
      console.error(
        'THREE.DDSLoader.parse: Invalid magic number in DDS header.'
      ),
      r
    )
  if (!w[20] & 4)
    return (
      console.error(
        'THREE.DDSLoader.parse: Unsupported format, must contain a FourCC code.'
      ),
      r
    )
  var y = w[21],
    L = !1
  switch (y) {
    case x:
      x = 8
      r.format = THREE.RGB_S3TC_DXT1_Format
      break
    case n:
      x = 16
      r.format = THREE.RGBA_S3TC_DXT3_Format
      break
    case z:
      x = 16
      r.format = THREE.RGBA_S3TC_DXT5_Format
      break
    case u:
      x = 8
      r.format = THREE.RGB_ETC1_Format
      break
    default:
      if (
        32 === w[22] &&
        w[23] & 16711680 &&
        w[24] & 65280 &&
        w[25] & 255 &&
        w[26] & 4278190080
      )
        (L = !0), (x = 64), (r.format = THREE.RGBAFormat)
      else
        return (
          console.error(
            'THREE.DDSLoader.parse: Unsupported FourCC code ',
            String.fromCharCode(
              y & 255,
              (y >> 8) & 255,
              (y >> 16) & 255,
              (y >> 24) & 255
            )
          ),
          r
        )
  }
  r.mipmapCount = 1
  w[2] & 131072 && !1 !== m && (r.mipmapCount = Math.max(1, w[7]))
  n = w[28]
  r.isCubemap = n & 512 ? !0 : !1
  if (
    r.isCubemap &&
    !(n & 1024 && n & 2048 && n & 4096 && n & 8192 && n & 16384 && n & 32768)
  )
    return console.error('THREE.DDSLoader.parse: Incomplete cubemap faces'), r
  r.width = w[4]
  r.height = w[3]
  w = w[1] + 4
  n = r.isCubemap ? 6 : 1
  for (z = 0; z < n; z++)
    for (var u = r.width, y = r.height, C = 0; C < r.mipmapCount; C++) {
      if (L)
        var G = k(f, w, u, y),
          v = G.length
      else
        (v = (((Math.max(4, u) / 4) * Math.max(4, y)) / 4) * x),
          (G = new Uint8Array(f, w, v))
      r.mipmaps.push({ data: G, width: u, height: y })
      w += v
      u = Math.max(u >> 1, 1)
      y = Math.max(y >> 1, 1)
    }
  return r
}
THREE.MTLLoader = function (f) {
  this.manager = void 0 !== f ? f : THREE.DefaultLoadingManager
}
THREE.MTLLoader.prototype = {
  constructor: THREE.MTLLoader,
  load: function (f, m, g, k) {
    var r = this,
      x = void 0 === this.path ? THREE.LoaderUtils.extractUrlBase(f) : this.path,
      n = new THREE.FileLoader(this.manager)
    n.setPath(this.path)
    n.load(
      f,
      function (f) {
        m(r.parse(f, x))
      },
      g,
      k
    )
  },
  setPath: function (f) {
    this.path = f
    return this
  },
  setResourcePath: function (f) {
    this.resourcePath = f
    return this
  },
  setTexturePath: function (f) {
    console.warn(
      'THREE.MTLLoader: .setTexturePath() has been renamed to .setResourcePath().'
    )
    return this.setResourcePath(f)
  },
  setCrossOrigin: function (f) {
    this.crossOrigin = f
    return this
  },
  setMaterialOptions: function (f) {
    this.materialOptions = f
    return this
  },
  parse: function (f, m) {
    for (
      var g = f.split('\n'), k = {}, r = /\s+/, x = {}, n = 0;
      n < g.length;
      n++
    ) {
      var z = g[n],
        z = z.trim()
      if (0 !== z.length && '#' !== z.charAt(0)) {
        var u = z.indexOf(' '),
          w = 0 <= u ? z.substring(0, u) : z,
          w = w.toLowerCase(),
          z = 0 <= u ? z.substring(u + 1) : '',
          z = z.trim()
        'newmtl' === w
          ? ((k = { name: z }), (x[z] = k))
          : 'ka' === w || 'kd' === w || 'ks' === w || 'ke' === w
          ? ((z = z.split(r, 3)),
            (k[w] = [parseFloat(z[0]), parseFloat(z[1]), parseFloat(z[2])]))
          : (k[w] = z)
      }
    }
    g = new THREE.MTLLoader.MaterialCreator(
      this.resourcePath || m,
      this.materialOptions
    )
    g.setCrossOrigin(this.crossOrigin)
    g.setManager(this.manager)
    g.setMaterials(x)
    return g
  },
}
THREE.MTLLoader.MaterialCreator = function (f, m) {
  this.baseUrl = f || ''
  this.options = m
  this.materialsInfo = {}
  this.materials = {}
  this.materialsArray = []
  this.nameLookup = {}
  this.side =
    this.options && this.options.side ? this.options.side : THREE.FrontSide
  this.wrap =
    this.options && this.options.wrap ? this.options.wrap : THREE.RepeatWrapping
}
THREE.MTLLoader.MaterialCreator.prototype = {
  constructor: THREE.MTLLoader.MaterialCreator,
  crossOrigin: 'anonymous',
  setCrossOrigin: function (f) {
    this.crossOrigin = f
    return this
  },
  setManager: function (f) {
    this.manager = f
  },
  setMaterials: function (f) {
    this.materialsInfo = this.convert(f)
    this.materials = {}
    this.materialsArray = []
    this.nameLookup = {}
  },
  convert: function (f) {
    if (!this.options) return f
    var m = {},
      g
    for (g in f) {
      var k = f[g],
        r = {}
      m[g] = r
      for (var x in k) {
        var n = !0,
          z = k[x],
          u = x.toLowerCase()
        switch (u) {
          case 'kd':
          case 'ka':
          case 'ks':
            this.options &&
              this.options.normalizeRGB &&
              (z = [z[0] / 255, z[1] / 255, z[2] / 255]),
              this.options &&
                this.options.ignoreZeroRGBs &&
                0 === z[0] &&
                0 === z[1] &&
                0 === z[2] &&
                (n = !1)
        }
        n && (r[u] = z)
      }
    }
    return m
  },
  preload: function () {
    for (var f in this.materialsInfo) this.create(f)
  },
  getIndex: function (f) {
    return this.nameLookup[f]
  },
  getAsArray: function () {
    var f = 0,
      m
    for (m in this.materialsInfo)
      (this.materialsArray[f] = this.create(m)), (this.nameLookup[m] = f), f++
    return this.materialsArray
  },
  create: function (f) {
    void 0 === this.materials[f] && this.createMaterial_(f)
    return this.materials[f]
  },
  createMaterial_: function (f) {
    function m(f, g) {
      return 'string' !== typeof g || '' === g
        ? ''
        : /^https?:\/\//i.test(g)
        ? g
        : f + g
    }
    function g(f, g) {
      if (!x[f]) {
        var n = k.getTextureParams(g, x),
          r = k.loadTexture(m(k.baseUrl, n.url))
        r.repeat.copy(n.scale)
        r.offset.copy(n.offset)
        r.wrapS = k.wrap
        r.wrapT = k.wrap
        x[f] = r
      }
    }
    var k = this,
      r = this.materialsInfo[f],
      x = { name: f, side: this.side },
      n
    for (n in r) {
      var z = r[n]
      if ('' !== z)
        switch (n.toLowerCase()) {
          case 'kd':
            x.color = new THREE.Color().fromArray(z)
            break
          case 'ks':
            x.specular = new THREE.Color().fromArray(z)
            break
          case 'ke':
            x.emissive = new THREE.Color().fromArray(z)
            break
          case 'map_kd':
            g('map', z)
            break
          case 'map_ks':
            g('specularMap', z)
            break
          case 'map_ke':
            g('emissiveMap', z)
            break
          case 'norm':
            g('normalMap', z)
            break
          case 'map_bump':
          case 'bump':
            g('bumpMap', z)
            break
          case 'map_d':
            g('alphaMap', z)
            x.transparent = !0
            break
          case 'ns':
            x.shininess = parseFloat(z)
            break
          case 'd':
            z = parseFloat(z)
            1 > z && ((x.opacity = z), (x.transparent = !0))
            break
          case 'tr':
            ;(z = parseFloat(z)),
              this.options && this.options.invertTrProperty && (z = 1 - z),
              0 < z && ((x.opacity = 1 - z), (x.transparent = !0))
        }
    }
    this.materials[f] = new THREE.naPhongMaterial(x)
    return this.materials[f]
  },
  getTextureParams: function (f, m) {
    var g = { scale: new THREE.vt2(1, 1), offset: new THREE.vt2(0, 0) },
      k = f.split(/\s+/),
      r
    r = k.indexOf('-bm')
    0 <= r && ((m.bumpScale = parseFloat(k[r + 1])), k.splice(r, 2))
    r = k.indexOf('-s')
    0 <= r &&
      (g.scale.set(parseFloat(k[r + 1]), parseFloat(k[r + 2])), k.splice(r, 4))
    r = k.indexOf('-o')
    0 <= r &&
      (g.offset.set(parseFloat(k[r + 1]), parseFloat(k[r + 2])), k.splice(r, 4))
    g.url = k.join(' ').trim()
    return g
  },
  loadTexture: function (f, m, g, k, r) {
    var x = THREE.Loader.Handlers.get(f),
      n = void 0 !== this.manager ? this.manager : THREE.DefaultLoadingManager
    null === x && (x = new THREE.q6(n))
    x.setCrossOrigin && x.setCrossOrigin(this.crossOrigin)
    f = x.load(f, g, k, r)
    void 0 !== m && (f.mapping = m)
    return f
  },
}
THREE.OBJLoader = (function () {
  function f() {
    var f = {
      objects: [],
      object: {},
      vertices: [],
      normals: [],
      colors: [],
      uvs: [],
      materialLibraries: [],
      startObject: function (f, g) {
        if (this.object && !1 === this.object.fromDeclaration)
          (this.object.name = f), (this.object.fromDeclaration = !1 !== g)
        else {
          var k =
            this.object && 'function' === typeof this.object.currentMaterial
              ? this.object.currentMaterial()
              : void 0
          this.object &&
            'function' === typeof this.object._finalize &&
            this.object._finalize(!0)
          this.object = {
            name: f || '',
            fromDeclaration: !1 !== g,
            geometry: { vertices: [], normals: [], colors: [], uvs: [] },
            materials: [],
            smooth: !0,
            startMaterial: function (f, g) {
              var k = this._finalize(!1)
              k &&
                (k.inherited || 0 >= k.groupCount) &&
                this.materials.splice(k.index, 1)
              k = {
                index: this.materials.length,
                name: f || '',
                mtllib: Array.isArray(g) && 0 < g.length ? g[g.length - 1] : '',
                smooth: void 0 !== k ? k.smooth : this.smooth,
                groupStart: void 0 !== k ? k.groupEnd : 0,
                groupEnd: -1,
                groupCount: -1,
                inherited: !1,
                clone: function (f) {
                  f = {
                    index: 'number' === typeof f ? f : this.index,
                    name: this.name,
                    mtllib: this.mtllib,
                    smooth: this.smooth,
                    groupStart: 0,
                    groupEnd: -1,
                    groupCount: -1,
                    inherited: !1,
                  }
                  f.clone = this.clone.bind(f)
                  return f
                },
              }
              this.materials.push(k)
              return k
            },
            currentMaterial: function () {
              if (0 < this.materials.length)
                return this.materials[this.materials.length - 1]
            },
            _finalize: function (f) {
              var g = this.currentMaterial()
              g &&
                -1 === g.groupEnd &&
                ((g.groupEnd = this.geometry.vertices.length / 3),
                (g.groupCount = g.groupEnd - g.groupStart),
                (g.inherited = !1))
              if (f && 1 < this.materials.length)
                for (var k = this.materials.length - 1; 0 <= k; k--)
                  0 >= this.materials[k].groupCount &&
                    this.materials.splice(k, 1)
              f &&
                0 === this.materials.length &&
                this.materials.push({ name: '', smooth: this.smooth })
              return g
            },
          }
          k &&
            k.name &&
            'function' === typeof k.clone &&
            ((k = k.clone(0)),
            (k.inherited = !0),
            this.object.materials.push(k))
          this.objects.push(this.object)
        }
      },
      finalize: function () {
        this.object &&
          'function' === typeof this.object._finalize &&
          this.object._finalize(!0)
      },
      parseVertexIndex: function (f, g) {
        var k = parseInt(f, 10)
        return 3 * (0 <= k ? k - 1 : k + g / 3)
      },
      parseNormalIndex: function (f, g) {
        var k = parseInt(f, 10)
        return 3 * (0 <= k ? k - 1 : k + g / 3)
      },
      parseUVIndex: function (f, g) {
        var k = parseInt(f, 10)
        return 2 * (0 <= k ? k - 1 : k + g / 2)
      },
      addVertex: function (f, g, k) {
        var m = this.vertices,
          n = this.object.geometry.vertices
        n.push(m[f + 0], m[f + 1], m[f + 2])
        n.push(m[g + 0], m[g + 1], m[g + 2])
        n.push(m[k + 0], m[k + 1], m[k + 2])
      },
      addVertexPoint: function (f) {
        var g = this.vertices
        this.object.geometry.vertices.push(g[f + 0], g[f + 1], g[f + 2])
      },
      addVertexLine: function (f) {
        var g = this.vertices
        this.object.geometry.vertices.push(g[f + 0], g[f + 1], g[f + 2])
      },
      addNormal: function (f, g, k) {
        var m = this.normals,
          n = this.object.geometry.normals
        n.push(m[f + 0], m[f + 1], m[f + 2])
        n.push(m[g + 0], m[g + 1], m[g + 2])
        n.push(m[k + 0], m[k + 1], m[k + 2])
      },
      addColor: function (f, g, k) {
        var m = this.colors,
          n = this.object.geometry.colors
        n.push(m[f + 0], m[f + 1], m[f + 2])
        n.push(m[g + 0], m[g + 1], m[g + 2])
        n.push(m[k + 0], m[k + 1], m[k + 2])
      },
      addUV: function (f, g, k) {
        var m = this.uvs,
          n = this.object.geometry.uvs
        n.push(m[f + 0], m[f + 1])
        n.push(m[g + 0], m[g + 1])
        n.push(m[k + 0], m[k + 1])
      },
      addUVLine: function (f) {
        var g = this.uvs
        this.object.geometry.uvs.push(g[f + 0], g[f + 1])
      },
      addFace: function (f, g, k, m, r, x, C, G, v) {
        var n = this.vertices.length
        f = this.parseVertexIndex(f, n)
        g = this.parseVertexIndex(g, n)
        k = this.parseVertexIndex(k, n)
        this.addVertex(f, g, k)
        void 0 !== m &&
          '' !== m &&
          ((k = this.uvs.length),
          (f = this.parseUVIndex(m, k)),
          (g = this.parseUVIndex(r, k)),
          (k = this.parseUVIndex(x, k)),
          this.addUV(f, g, k))
        void 0 !== C &&
          '' !== C &&
          ((m = this.normals.length),
          (f = this.parseNormalIndex(C, m)),
          (g = C === G ? f : this.parseNormalIndex(G, m)),
          (k = C === v ? f : this.parseNormalIndex(v, m)),
          this.addNormal(f, g, k))
        0 < this.colors.length && this.addColor(f, g, k)
      },
      addPoint_0x6: function (f) {
        this.object.geometry.type = 'Points'
        for (var g = this.vertices.length, k = 0, m = f.length; k < m; k++)
          this.addVertexPoint(this.parseVertexIndex(f[k], g))
      },
      addLine_0x6: function (f, g) {
        this.object.geometry.type = 'Line'
        for (
          var k = this.vertices.length,
            m = this.uvs.length,
            n = 0,
            r = f.length;
          n < r;
          n++
        )
          this.addVertexLine(this.parseVertexIndex(f[n], k))
        k = 0
        for (r = g.length; k < r; k++)
          this.addUVLine(this.parseUVIndex(g[k], m))
      },
    }
    f.startObject('', !1)
    return f
  }
  function m(f) {
    this.manager = void 0 !== f ? f : THREE.DefaultLoadingManager
    this.materials = null
  }
  var g = /^[og]\s*(.+)?/,
    k = /^mtllib /,
    r = /^usemtl /
  m.prototype = {
    constructor: m,
    load: function (f, g, k, m) {
      var n = this,
        r = new THREE.FileLoader(n.manager)
      r.setPath(this.path)
      r.load(
        f,
        function (f) {
          g(n.parse(f))
        },
        k,
        m
      )
    },
    setPath: function (f) {
      this.path = f
      return this
    },
    setMaterials: function (f) {
      this.materials = f
      return this
    },
    parse: function (m) {
      console.time('OBJLoader')
      var n = new f()
      ;-1 !== m.indexOf('\r\n') && (m = m.replace(/\r\n/g, '\n'))
      ;-1 !== m.indexOf('\\\n') && (m = m.replace(/\\\n/g, ''))
      var z = m.split('\n'),
        u,
        w,
        y,
        x = 'function' === typeof ''.trimLeft
      m = 0
      for (var C = z.length; m < C; m++)
        if (
          ((u = z[m]),
          (u = x ? u.trimLeft() : u.trim()),
          (w = u.length),
          0 !== w && ((w = u.charAt(0)), '#' !== w))
        )
          if ('v' === w)
            switch (((u = u.split(/\s+/)), u[0])) {
              case 'v':
                n.vertices.push(
                  parseFloat(u[1]),
                  parseFloat(u[2]),
                  parseFloat(u[3])
                )
                8 === u.length &&
                  n.colors.push(
                    parseFloat(u[4]),
                    parseFloat(u[5]),
                    parseFloat(u[6])
                  )
                break
              case 'vn':
                n.normals.push(
                  parseFloat(u[1]),
                  parseFloat(u[2]),
                  parseFloat(u[3])
                )
                break
              case 'vt':
                n.uvs.push(parseFloat(u[1]), parseFloat(u[2]))
            }
          else if ('f' === w) {
            u = u.substr(1).trim()
            var G = u.split(/\s+/)
            u = []
            w = 0
            for (y = G.length; w < y; w++) {
              var v = G[w]
              0 < v.length && ((v = v.split('/')), u.push(v))
            }
            G = u[0]
            w = 1
            for (y = u.length - 1; w < y; w++) {
              var v = u[w],
                Q = u[w + 1]
              n.addFace(G[0], v[0], Q[0], G[1], v[1], Q[1], G[2], v[2], Q[2])
            }
          } else if ('l' === w) {
            w = u.substring(1).trim().split(' ')
            y = []
            G = []
            if (-1 === u.indexOf('/')) y = w
            else
              for (u = 0, v = w.length; u < v; u++)
                (Q = w[u].split('/')),
                  '' !== Q[0] && y.push(Q[0]),
                  '' !== Q[1] && G.push(Q[1])
            n.addLine_0x6(y, G)
          } else if ('p' === w)
            (u = u.substr(1).trim()), (u = u.split(' ')), n.addPoint_0x6(u)
          else if (null !== (y = g.exec(u)))
            (u = (' ' + y[0].substr(1).trim()).substr(1)), n.startObject(u)
          else if (r.test(u))
            n.object.startMaterial(u.substring(7).trim(), n.materialLibraries)
          else if (k.test(u)) n.materialLibraries.push(u.substring(7).trim())
          else if ('s' === w) {
            if (
              ((y = u.split(' ')),
              1 < y.length
                ? ((u = y[1].trim().toLowerCase()),
                  (n.object.smooth = '0' !== u && 'off' !== u))
                : (n.object.smooth = !0),
              (u = n.object.currentMaterial()))
            )
              u.smooth = n.object.smooth
          } else if ('\x00' !== u)
            throw Error('THREE.OBJLoader: Unexpected line: "' + u + '"')
      n.finalize()
      z = new THREE.Group()
      z.materialLibraries = [].concat(n.materialLibraries)
      m = 0
      for (C = n.objects.length; m < C; m++)
        if (
          ((x = n.objects[m]),
          (u = x.geometry),
          (w = x.materials),
          (y = 'Line' === u.type),
          (G = 'Points' === u.type),
          (v = !1),
          0 !== u.vertices.length)
        ) {
          Q = new THREE._0x2()
          Q.addAttribute('position', new THREE.Float32_0x3(u.vertices, 3))
          0 < u.normals.length
            ? Q.addAttribute('normal', new THREE.Float32_0x3(u.normals, 3))
            : Q.computeVertexNormals()
          0 < u.colors.length &&
            ((v = !0),
            Q.addAttribute('color', new THREE.Float32_0x3(u.colors, 3)))
          0 < u.uvs.length &&
            Q.addAttribute('uv', new THREE.Float32_0x3(u.uvs, 2))
          for (var Y = [], S = 0, R = w.length; S < R; S++) {
            var X = w[S]
            u = void 0
            if (null !== this.materials)
              if (
                ((u = this.materials.create(X.name)),
                !y || !u || u instanceof THREE.b3)
              )
                !G ||
                  !u ||
                  u instanceof THREE.PointsMaterial ||
                  ((E = new THREE.PointsMaterial({
                    size: 10,
                    sizeAttenuation: !1,
                  })),
                  THREE.Material.prototype.copy.call(E, u),
                  E.color.copy(u.color),
                  (E.map = u.map),
                  (E.lights = !1),
                  (u = E))
              else {
                var E = new THREE.b3()
                THREE.Material.prototype.copy.call(E, u)
                E.color.copy(u.color)
                E.lights = !1
                u = E
              }
            u ||
              ((u = y
                ? new THREE.b3()
                : G
                ? new THREE.PointsMaterial({ size: 1, sizeAttenuation: !1 })
                : new THREE.naPhongMaterial()),
              (u.name = X.name))
            u.flatShading = X.smooth ? !1 : !0
            u.vertexColors = v ? THREE.VertexColors : THREE.NoColors
            Y.push(u)
          }
          if (1 < Y.length) {
            S = 0
            for (R = w.length; S < R; S++)
              (X = w[S]), Q.addGroup(X.groupStart, X.groupCount, S)
            u = y
              ? new THREE.b2(Q, Y)
              : G
              ? new THREE.Points(Q, Y)
              : new THREE.na(Q, Y)
          } else
            u = y
              ? new THREE.b2(Q, Y[0])
              : G
              ? new THREE.Points(Q, Y[0])
              : new THREE.na(Q, Y[0])
          u.name = x.name
          z.add(u)
        }
      console.timeEnd('OBJLoader')
      return z
    },
  }
  return m
})()
THREE._0x8 = function (f, m) {
  function g() {
    return Math.pow(0.95, v.zoomSpeed)
  }
  function k(f) {
    v.object.isq4
      ? (I /= f)
      : v.object.isOrthographicCamera
      ? ((v.object.zoom = Math.max(
          v.minZoom,
          Math.min(v.maxZoom, v.object.zoom * f)
        )),
        v.object.updateProjectionMatrix(),
        (Oa = !0))
      : (console.warn(
          'WARNING: _0x8.js encountered an unknown camera type - dolly/zoom disabled.'
        ),
        (v.enableZoom = !1))
  }
  function r(f) {
    v.object.isq4
      ? (I *= f)
      : v.object.isOrthographicCamera
      ? ((v.object.zoom = Math.max(
          v.minZoom,
          Math.min(v.maxZoom, v.object.zoom / f)
        )),
        v.object.updateProjectionMatrix(),
        (Oa = !0))
      : (console.warn(
          'WARNING: _0x8.js encountered an unknown camera type - dolly/zoom disabled.'
        ),
        (v.enableZoom = !1))
  }
  function x(f) {
    if (!1 !== v.enabled) {
      f.preventDefault()
      v.domElement.focus ? v.domElement.focus() : window.focus()
      switch (f.button) {
        case v.mouseButtons.LEFT:
          if (f.ctrlKey || f.metaKey || f.shiftKey) {
            if (!1 === v.enablePan) return
            Ha.set(f.clientX, f.clientY)
            X = R.PAN
          } else {
            if (!1 === v.enableRotate) return
            Pa.set(f.clientX, f.clientY)
            X = R.ROTATE
          }
          break
        case v.mouseButtons.MIDDLE:
          if (!1 === v.enableZoom) return
          wa.set(f.clientX, f.clientY)
          X = R.DOLLY
          break
        case v.mouseButtons.RIGHT:
          if (!1 === v.enablePan) return
          Ha.set(f.clientX, f.clientY)
          X = R.PAN
      }
      X !== R.NONE &&
        (document.addEventListener('mousemove', n, !1),
        document.addEventListener('mouseup', z, !1),
        v.dispatchEvent(Y))
    }
  }
  function n(f) {
    if (!1 !== v.enabled)
      switch ((f.preventDefault(), X)) {
        case R.ROTATE:
          if (!1 === v.enableRotate) break
          V.set(f.clientX, f.clientY)
          Ka.subVectors(V, Pa).multiplyScalar(v.rotateSpeed)
          f = v.domElement === document ? v.domElement.body : v.domElement
          sa.theta -= (2 * Math.PI * Ka.x) / f.clientHeight
          sa.phi -= (2 * Math.PI * Ka.y) / f.clientHeight
          Pa.copy(V)
          v.update()
          break
        case R.DOLLY:
          if (!1 === v.enableZoom) break
          ua.set(f.clientX, f.clientY)
          la.subVectors(ua, wa)
          0 < la.y ? k(g()) : 0 > la.y && r(g())
          wa.copy(ua)
          v.update()
          break
        case R.PAN:
          !1 !== v.enablePan &&
            (Ja.set(f.clientX, f.clientY),
            ga.subVectors(Ja, Ha).multiplyScalar(v.panSpeed),
            Za(ga.x, ga.y),
            Ha.copy(Ja),
            v.update())
      }
  }
  function z(f) {
    !1 !== v.enabled &&
      (document.removeEventListener('mousemove', n, !1),
      document.removeEventListener('mouseup', z, !1),
      v.dispatchEvent(S),
      (X = R.NONE))
  }
  function u(f) {
    !1 === v.enabled ||
      !1 === v.enableZoom ||
      (X !== R.NONE && X !== R.ROTATE) ||
      (f.preventDefault(),
      f.stopPropagation(),
      v.dispatchEvent(Y),
      0 > f.deltaY ? r(g()) : 0 < f.deltaY && k(g()),
      v.update(),
      v.dispatchEvent(S))
  }
  function w(f) {
    if (!1 !== v.enabled && !1 !== v.enableKeys && !1 !== v.enablePan) {
      var g = !1
      switch (f.keyCode) {
        case v.keys.UP:
          Za(0, v.keyPanSpeed)
          g = !0
          break
        case v.keys.BOTTOM:
          Za(0, -v.keyPanSpeed)
          g = !0
          break
        case v.keys.LEFT:
          Za(v.keyPanSpeed, 0)
          g = !0
          break
        case v.keys.RIGHT:
          Za(-v.keyPanSpeed, 0), (g = !0)
      }
      g && (f.preventDefault(), v.update())
    }
  }
  function y(f) {
    if (!1 !== v.enabled) {
      f.preventDefault()
      switch (f.touches.length) {
        case 1:
          if (!1 === v.enableRotate) return
          Pa.set(f.touches[0].pageX, f.touches[0].pageY)
          X = R.TOUCH_ROTATE
          break
        case 2:
          if (!1 === v.enableZoom && !1 === v.enablePan) return
          if (v.enableZoom) {
            var g = f.touches[0].pageX - f.touches[1].pageX,
              k = f.touches[0].pageY - f.touches[1].pageY
            wa.set(0, Math.sqrt(g * g + k * k))
          }
          v.enablePan &&
            Ha.set(
              0.5 * (f.touches[0].pageX + f.touches[1].pageX),
              0.5 * (f.touches[0].pageY + f.touches[1].pageY)
            )
          X = R.TOUCH_DOLLY_PAN
          break
        default:
          X = R.NONE
      }
      X !== R.NONE && v.dispatchEvent(Y)
    }
  }
  function L(f) {
    if (!1 !== v.enabled)
      switch ((f.preventDefault(), f.stopPropagation(), f.touches.length)) {
        case 1:
          if (!1 === v.enableRotate) break
          if (X !== R.TOUCH_ROTATE) break
          V.set(f.touches[0].pageX, f.touches[0].pageY)
          Ka.subVectors(V, Pa).multiplyScalar(v.rotateSpeed)
          f = v.domElement === document ? v.domElement.body : v.domElement
          sa.theta -= (2 * Math.PI * Ka.x) / f.clientHeight
          sa.phi -= (2 * Math.PI * Ka.y) / f.clientHeight
          Pa.copy(V)
          v.update()
          break
        case 2:
          if (!1 === v.enableZoom && !1 === v.enablePan) break
          if (X !== R.TOUCH_DOLLY_PAN) break
          if (v.enableZoom) {
            var g = f.touches[0].pageX - f.touches[1].pageX,
              m = f.touches[0].pageY - f.touches[1].pageY
            ua.set(0, Math.sqrt(g * g + m * m))
            la.set(0, Math.pow(ua.y / wa.y, v.zoomSpeed))
            k(la.y)
            wa.copy(ua)
          }
          v.enablePan &&
            (Ja.set(
              0.5 * (f.touches[0].pageX + f.touches[1].pageX),
              0.5 * (f.touches[0].pageY + f.touches[1].pageY)
            ),
            ga.subVectors(Ja, Ha).multiplyScalar(v.panSpeed),
            Za(ga.x, ga.y),
            Ha.copy(Ja))
          v.update()
          break
        default:
          X = R.NONE
      }
  }
  function C(f) {
    !1 !== v.enabled && (v.dispatchEvent(S), (X = R.NONE))
  }
  function G(f) {
    !1 !== v.enabled && f.preventDefault()
  }
  this.object = f
  this.domElement = void 0 !== m ? m : document
  this.enabled = !0
  this.target = new THREE._0x1()
  this.minDistance = 0
  this.maxDistance = Infinity
  this.minZoom = 0
  this.maxZoom = Infinity
  this.minPolarAngle = 0
  this.maxPolarAngle = Math.PI
  this.minAzimuthAngle = -Infinity
  this.maxAzimuthAngle = Infinity
  this.enableDamping = !1
  this.dampingFactor = 0.25
  this.enableZoom = !0
  this.zoomSpeed = 1
  this.enableRotate = !0
  this.rotateSpeed = 1
  this.enablePan = !0
  this.panSpeed = 1
  this.screenSpacePanning = !1
  this.keyPanSpeed = 7
  this.autoRotate = !1
  this.autoRotateSpeed = 2
  this.enableKeys = !0
  this.turnKeys = { LEFT: 65, UP: 87, RIGHT: 68, BOTTOM: 83 }
  this.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 }
  this.mouseButtons = {
    LEFT: THREE.MOUSE.LEFT,
    MIDDLE: THREE.MOUSE.MIDDLE,
    RIGHT: THREE.MOUSE.RIGHT,
  }
  this.target0 = this.target.clone()
  this.position0 = this.object.position.clone()
  this.zoom0 = this.object.zoom
  this._0x6CKeyUpdate = this._0x6C = !1
  this.callback = null
  this.getPolarAngle = function () {
    return U.phi
  }
  this.setCallBack = function (f) {
    this.callback = f
  }
  this.getAzimuthalAngle = function () {
    return U.theta
  }
  this.saveState = function () {
    v.target0.copy(v.target)
    v.position0.copy(v.object.position)
    v.zoom0 = v.object.zoom
  }
  this.reset = function () {
    v.target.copy(v.target0)
    v.object.position.copy(v.position0)
    v.object.zoom = v.zoom0
    v.object.updateProjectionMatrix()
    v.dispatchEvent(Q)
    v.update()
    X = R.NONE
  }
  this.update = (function () {
    var g = new THREE._0x1(),
      k = new THREE.Quaternion().setFromUnitVectors(
        f.up,
        new THREE._0x1(0, 1, 0)
      ),
      m = k.clone().inverse(),
      n = new THREE._0x1(),
      r = new THREE.Quaternion()
    return function () {
      var f = v.object.position
      g.copy(f).sub(v.target)
      g.applyQuaternion(k)
      U.setFrom_0x1(g)
      v.autoRotate &&
        X === R.NONE &&
        (sa.theta -= ((2 * Math.PI) / 60 / 60) * v.autoRotateSpeed)
      U.theta += sa.theta
      U.phi += sa.phi
      U.theta = Math.max(
        v.minAzimuthAngle,
        Math.min(v.maxAzimuthAngle, U.theta)
      )
      U.phi = Math.max(v.minPolarAngle, Math.min(v.maxPolarAngle, U.phi))
      U.makeSafe()
      U.radius *= I
      U.radius = Math.max(v.minDistance, Math.min(v.maxDistance, U.radius))
      v.target.add(ca)
      g.setFromb6(U)
      g.applyQuaternion(m)
      f.copy(v.target).add(g)
      v.object.lookAt(v.target)
      !0 === v.enableDamping
        ? ((sa.theta *= 1 - v.dampingFactor),
          (sa.phi *= 1 - v.dampingFactor),
          ca.multiplyScalar(1 - v.dampingFactor))
        : (sa.set(0, 0, 0), ca.set(0, 0, 0))
      I = 1
      if (
        Oa ||
        n.distanceToSquared(v.object.position) > E ||
        8 * (1 - r.dot(v.object.quaternion)) > E
      )
        return (
          v.dispatchEvent(Q),
          n.copy(v.object.position),
          r.copy(v.object.quaternion),
          (Oa = !1),
          v.callback && v.callback(),
          !0
        )
      v.callback && v.callback()
      return !1
    }
  })()
  this.dispose = function () {
    v.domElement.removeEventListener('contextmenu', G, !1)
    v.domElement.removeEventListener('mousedown', x, !1)
    v.domElement.removeEventListener('wheel', u, !1)
    v.domElement.removeEventListener('touchstart', y, !1)
    v.domElement.removeEventListener('touchend', C, !1)
    v.domElement.removeEventListener('touchmove', L, !1)
    document.removeEventListener('mousemove', n, !1)
    document.removeEventListener('mouseup', z, !1)
    window.removeEventListener('keydown', w, !1)
  }
  var v = this,
    Q = { type: 'change' },
    Y = { type: 'start' },
    S = { type: 'end' },
    R = {
      NONE: -1,
      ROTATE: 0,
      DOLLY: 1,
      PAN: 2,
      TOUCH_ROTATE: 3,
      TOUCH_DOLLY_PAN: 4,
    },
    X = R.NONE,
    E = 1e-6,
    U = new THREE.b6(),
    sa = new THREE.b6(),
    I = 1,
    ca = new THREE._0x1(),
    Oa = !1,
    Pa = new THREE.vt2(),
    V = new THREE.vt2(),
    Ka = new THREE.vt2(),
    Ha = new THREE.vt2(),
    Ja = new THREE.vt2(),
    ga = new THREE.vt2(),
    wa = new THREE.vt2(),
    ua = new THREE.vt2(),
    la = new THREE.vt2(),
    Kb = (function () {
      var f = new THREE._0x1()
      return function (g, k) {
        f.setFromMatrixColumn(k, 0)
        f.multiplyScalar(-g)
        ca.add(f)
      }
    })(),
    pb = (function () {
      var f = new THREE._0x1()
      return function (g, k) {
        !0 === v.screenSpacePanning
          ? f.setFromMatrixColumn(k, 1)
          : (f.setFromMatrixColumn(k, 0), f.crossVectors(v.object.up, f))
        f.multiplyScalar(g)
        ca.add(f)
      }
    })(),
    Za = (function () {
      var f = new THREE._0x1()
      return function (g, k) {
        var m = v.domElement === document ? v.domElement.body : v.domElement
        if (v.object.isq4) {
          f.copy(v.object.position).sub(v.target)
          var n = f.length(),
            n = n * Math.tan(((v.object.fov / 2) * Math.PI) / 180)
          Kb((2 * g * n) / m.clientHeight, v.object.matrix)
          pb((2 * k * n) / m.clientHeight, v.object.matrix)
        } else
          v.object.isOrthographicCamera
            ? (Kb(
                (g * (v.object.right - v.object.left)) /
                  v.object.zoom /
                  m.clientWidth,
                v.object.matrix
              ),
              pb(
                (k * (v.object.top - v.object.bottom)) /
                  v.object.zoom /
                  m.clientHeight,
                v.object.matrix
              ))
            : (console.warn(
                'WARNING: _0x8.js encountered an unknown camera type - pan disabled.'
              ),
              (v.enablePan = !1))
      }
    })()
  v.domElement.addEventListener('contextmenu', G, !1)
  v.domElement.addEventListener('mousedown', x, !1)
  v.domElement.addEventListener('wheel', u, { passive: !1 })
  v.domElement.addEventListener('touchstart', y, !1)
  v.domElement.addEventListener('touchend', C, !1)
  v.domElement.addEventListener('touchmove', L, !1)
  window.addEventListener('keydown', w, !1)
  this.update()
}
THREE._0x8.prototype = Object.create(THREE.EventDispatcher.prototype)
THREE._0x8.prototype.constructor = THREE._0x8
Object.defineProperties(THREE._0x8.prototype, {
  center: {
    get: function () {
      console.warn('THREE._0x8: .center has been renamed to .target')
      return this.target
    },
  },
  noZoom: {
    get: function () {
      console.warn(
        'THREE._0x8: .noZoom has been deprecated. Use .enableZoom instead.'
      )
      return !this.enableZoom
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .noZoom has been deprecated. Use .enableZoom instead.'
      )
      this.enableZoom = !f
    },
  },
  noRotate: {
    get: function () {
      console.warn(
        'THREE._0x8: .noRotate has been deprecated. Use .enableRotate instead.'
      )
      return !this.enableRotate
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .noRotate has been deprecated. Use .enableRotate instead.'
      )
      this.enableRotate = !f
    },
  },
  noPan: {
    get: function () {
      console.warn(
        'THREE._0x8: .noPan has been deprecated. Use .enablePan instead.'
      )
      return !this.enablePan
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .noPan has been deprecated. Use .enablePan instead.'
      )
      this.enablePan = !f
    },
  },
  noKeys: {
    get: function () {
      console.warn(
        'THREE._0x8: .noKeys has been deprecated. Use .enableKeys instead.'
      )
      return !this.enableKeys
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .noKeys has been deprecated. Use .enableKeys instead.'
      )
      this.enableKeys = !f
    },
  },
  staticMoving: {
    get: function () {
      console.warn(
        'THREE._0x8: .staticMoving has been deprecated. Use .enableDamping instead.'
      )
      return !this.enableDamping
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .staticMoving has been deprecated. Use .enableDamping instead.'
      )
      this.enableDamping = !f
    },
  },
  dynamicDampingFactor: {
    get: function () {
      console.warn(
        'THREE._0x8: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.'
      )
      return this.dampingFactor
    },
    set: function (f) {
      console.warn(
        'THREE._0x8: .dynamicDampingFactor has been renamed. Use .dampingFactor instead.'
      )
      this.dampingFactor = f
    },
  },
})
THREE.FirstPersonControls = function (f, m) {
  function g(f) {
    f.preventDefault()
  }
  function k(f, g) {
    return function () {
      g.apply(f, arguments)
    }
  }
  function r(f) {
    f = f.object.quaternion
    z.set(0, 0, -1).applyQuaternion(f)
    u.setFrom_0x1(z)
    x = 90 - THREE.Math.radToDeg(u.phi)
    n = THREE.Math.radToDeg(u.theta)
  }
  this.object = f
  this.domElement = void 0 !== m ? m : document
  this.enabled = !0
  this.movementSpeed = 1
  this.lookSpeed = 0.005
  this.lookVertical = !0
  this.autoForward = !1
  this.activeLook = !0
  this.heightSpeed = !1
  this.heightCoef = 1
  this.heightMin = 0
  this.heightMax = 1
  this.constrainVertical = !1
  this.verticalMin = 0
  this.verticalMax = Math.PI
  this.mouseY = this.mouseX = this.autoSpeedFactor = 0
  this.mouseDragOn = this.moveRight = this.moveLeft = this.moveBackward = this.moveForward = !1
  var x = (this.viewHalfY = this.viewHalfX = 0),
    n = 0,
    z = new THREE._0x1(),
    u = new THREE.b6(),
    w = new THREE._0x1()
  this.domElement !== document && this.domElement.setAttribute('tabindex', -1)
  this.callback = null
  this.setCallBack = function (f) {
    this.callback = f
  }
  this.handleResize = function () {
    this.domElement === document
      ? ((this.viewHalfX = window.innerWidth / 2),
        (this.viewHalfY = window.innerHeight / 2))
      : ((this.viewHalfX = this.domElement.offsetWidth / 2),
        (this.viewHalfY = this.domElement.offsetHeight / 2))
  }
  this.onMouseDown = function (f) {
    this.domElement !== document && this.domElement.focus()
    f.preventDefault()
    f.stopPropagation()
    if (this.activeLook)
      switch (f.button) {
        case 0:
          this.moveForward = !0
          break
        case 2:
          this.moveBackward = !0
      }
    this.mouseDragOn = !0
  }
  this.onMouseUp = function (f) {
    f.preventDefault()
    f.stopPropagation()
    if (this.activeLook)
      switch (f.button) {
        case 0:
          this.moveForward = !1
          break
        case 2:
          this.moveBackward = !1
      }
    this.mouseDragOn = !1
  }
  this.onMouseMove = function (f) {
    this.domElement === document
      ? ((this.mouseX = f.pageX - this.viewHalfX),
        (this.mouseY = f.pageY - this.viewHalfY))
      : ((this.mouseX = f.pageX - this.domElement.offsetLeft - this.viewHalfX),
        (this.mouseY = f.pageY - this.domElement.offsetTop - this.viewHalfY))
  }
  this.onKeyDown = function (f) {
    switch (f.keyCode) {
      case 38:
      case 87:
        this.moveForward = !0
        break
      case 37:
      case 65:
        this.moveLeft = !0
        break
      case 40:
      case 83:
        this.moveBackward = !0
        break
      case 39:
      case 68:
        this.moveRight = !0
        break
      case 82:
        this.moveUp = !0
        break
      case 70:
        this.moveDown = !0
    }
  }
  this.onKeyUp = function (f) {
    switch (f.keyCode) {
      case 38:
      case 87:
        this.moveForward = !1
        break
      case 37:
      case 65:
        this.moveLeft = !1
        break
      case 40:
      case 83:
        this.moveBackward = !1
        break
      case 39:
      case 68:
        this.moveRight = !1
        break
      case 82:
        this.moveUp = !1
        break
      case 70:
        this.moveDown = !1
    }
  }
  this.lookAt = function (f, g, k) {
    f.is_0x1 ? w.copy(f) : w.set(f, g, k)
    debugger
    this.object.lookAt(w)
    r(this)
    return this
  }
  this.update = (function () {
    var f = new THREE._0x1()
    return function (g) {
      if (!1 !== this.enabled) {
        if (this.heightSpeed) {
          var k =
            THREE.Math.clamp(
              this.object.position.y,
              this.heightMin,
              this.heightMax
            ) - this.heightMin
          this.autoSpeedFactor = g * k * this.heightCoef
        } else this.autoSpeedFactor = 0
        k = g * this.movementSpeed
        ;(this.moveForward || (this.autoForward && !this.moveBackward)) &&
          this.object.translateZ(-(k + this.autoSpeedFactor))
        this.moveBackward && this.object.translateZ(k)
        this.moveLeft && this.object.translateX(-k)
        this.moveRight && this.object.translateX(k)
        this.moveUp && this.object.translateY(k)
        this.moveDown && this.object.translateY(-k)
        g *= this.lookSpeed
        this.activeLook || (g = 0)
        k = 1
        this.constrainVertical &&
          (k = Math.PI / (this.verticalMax - this.verticalMin))
        n += this.mouseX * g
        this.lookVertical && (x -= this.mouseY * g * k)
        g = THREE.Math.degToRad(90 - x)
        k = THREE.Math.degToRad(n)
        this.constrainVertical &&
          (g = THREE.Math.mapLinear(
            g,
            0,
            Math.PI,
            this.verticalMin,
            this.verticalMax
          ))
        var m = this.object.position
        f.setFromb6Coords_qmodel(1, g, k).add(m)
        this.object.lookAt(f)
        this.callback && this.callback()
      }
    }
  })()
  this.dispose = function () {
    this.domElement.removeEventListener('contextmenu', g, !1)
    this.domElement.removeEventListener('mousedown', L, !1)
    this.domElement.removeEventListener('mousemove', y, !1)
    this.domElement.removeEventListener('mouseup', C, !1)
    window.removeEventListener('keydown', G, !1)
    window.removeEventListener('keyup', v, !1)
  }
  var y = k(this, this.onMouseMove),
    L = k(this, this.onMouseDown),
    C = k(this, this.onMouseUp),
    G = k(this, this.onKeyDown),
    v = k(this, this.onKeyUp)
  this.domElement.addEventListener('contextmenu', g, !1)
  this.domElement.addEventListener('mousemove', y, !1)
  this.domElement.addEventListener('mousedown', L, !1)
  this.domElement.addEventListener('mouseup', C, !1)
  window.addEventListener('keydown', G, !1)
  window.addEventListener('keyup', v, !1)
  this.handleResize()
  r(this)
}
THREE._0x7 = function (f, m) {
  function g(f, g) {
    return function () {
      g.apply(f, arguments)
    }
  }
  function k(f) {
    f.preventDefault()
  }
  this.object = f
  this.domElement = void 0 !== m ? m : document
  m && this.domElement.setAttribute('tabindex', -1)
  this.movementSpeed = 1
  this.rollSpeed = 0.005
  this.autoForward = this.dragToLook = !1
  this.mouseY = this.mouseX = 0
  this.tmpQuaternion = new THREE.Quaternion()
  this.mouseStatus = 0
  this.moveState = {
    up: 0,
    down: 0,
    left: 0,
    right: 0,
    forward: 0,
    back: 0,
    pitchUp: 0,
    pitchDown: 0,
    yawLeft: 0,
    yawRight: 0,
    rollLeft: 0,
    rollRight: 0,
    state: 0,
  }
  this.moveVector = new THREE._0x1(0, 0, 0)
  this.rotationVector = new THREE._0x1(0, 0, 0)
  this.keydown = function (f) {
    if (!f.altKey) {
      switch (f.keyCode) {
        case 16:
          this.movementSpeedMultiplier = 0.1
          break
        case 87:
          this.moveState.forward = 1
          break
        case 83:
          this.moveState.back = 1
          break
        case 65:
          this.moveState.left = 1
          break
        case 68:
          this.moveState.right = 1
          break
        case 82:
          this.moveState.rollLeft = 1
          break
        case 70:
          this.moveState.rollRight = 1
          break
        case 38:
          this.moveState.pitchUp = 1
          this.moveState.state = 1
          break
        case 40:
          this.moveState.pitchDown = 1
          this.moveState.state = 1
          break
        case 37:
          this.moveState.yawLeft = 1
          this.moveState.state = 1
          break
        case 39:
          this.moveState.yawRight = 1
          this.moveState.state = 1
          break
        case 81:
          this.moveState.up = 1
          break
        case 69:
          this.moveState.down = 1
      }
      this.updateMovementVector()
      this.updateRotationVector()
    }
  }
  this.keyup = function (f) {
    switch (f.keyCode) {
      case 16:
        this.movementSpeedMultiplier = 1
        break
      case 87:
        this.moveState.forward = 0
        break
      case 83:
        this.moveState.back = 0
        break
      case 65:
        this.moveState.left = 0
        break
      case 68:
        this.moveState.right = 0
        break
      case 82:
        this.moveState.rollLeft = 0
        break
      case 70:
        this.moveState.rollRight = 0
        break
      case 38:
        this.moveState.pitchUp = 0
        this.moveState.state = 0
        break
      case 40:
        this.moveState.pitchDown = 0
        this.moveState.state = 0
        break
      case 37:
        this.moveState.yawLeft = 0
        this.moveState.state = 0
        break
      case 39:
        this.moveState.yawRight = 0
        this.moveState.state = 0
        break
      case 81:
        this.moveState.up = 0
        break
      case 69:
        this.moveState.down = 0
    }
    this.updateMovementVector()
    this.updateRotationVector()
  }
  this.mousedown = function (f) {
    this.domElement !== document && this.domElement.focus()
    f.preventDefault()
    f.stopPropagation()
    if (this.dragToLook) this.mouseStatus++
    else {
      switch (f.button) {
        case 0:
          this.moveState.forward = 1
          break
        case 2:
          this.moveState.back = 1
      }
      this.updateMovementVector()
    }
  }
  this.mousemove = function (f) {
    if (!this.dragToLook || 0 < this.mouseStatus) {
      var g = this.getContainerDimensions(),
        k = g.size[0] / 2,
        m = g.size[1] / 2
      this.moveState.yawLeft = -(f.pageX - g.offset[0] - k) / k
      this.moveState.pitchDown = (f.pageY - g.offset[1] - m) / m
      this.updateRotationVector()
    }
  }
  this.mouseup = function (f) {
    f.preventDefault()
    f.stopPropagation()
    if (this.dragToLook)
      this.mouseStatus--,
        (this.moveState.yawLeft = this.moveState.pitchDown = 0)
    else {
      switch (f.button) {
        case 0:
          this.moveState.forward = 0
          break
        case 2:
          this.moveState.back = 0
      }
      this.updateMovementVector()
    }
    this.updateRotationVector()
  }
  this.update = function (f) {
    var g = f * this.movementSpeed
    f *= this.rollSpeed
    this.object.translateX(this.moveVector.x * g)
    this.object.translateY(this.moveVector.y * g)
    this.object.translateZ(this.moveVector.z * g)
    this.tmpQuaternion
      .set(
        this.rotationVector.x * f,
        this.rotationVector.y * f,
        this.rotationVector.z * f,
        1
      )
      .normalize()
    this.object.quaternion.multiply(this.tmpQuaternion)
    this.object.rotation.setFromQuaternion(
      this.object.quaternion,
      this.object.rotation.order
    )
  }
  this.updateMovementVector = function () {
    var f =
      this.moveState.forward || (this.autoForward && !this.moveState.back)
        ? 1
        : 0
    this.moveVector.x = -this.moveState.left + this.moveState.right
    this.moveVector.y = -this.moveState.down + this.moveState.up
    this.moveVector.z = -f + this.moveState.back
  }
  this.updateRotationVector = function () {
    this.rotationVector.x = -this.moveState.pitchDown + this.moveState.pitchUp
    this.rotationVector.y = -this.moveState.yawRight + this.moveState.yawLeft
    this.rotationVector.z = -this.moveState.rollRight + this.moveState.rollLeft
  }
  this.getContainerDimensions = function () {
    return this.domElement != document
      ? {
          size: [this.domElement.offsetWidth, this.domElement.offsetHeight],
          offset: [this.domElement.offsetLeft, this.domElement.offsetTop],
        }
      : { size: [window.innerWidth, window.innerHeight], offset: [0, 0] }
  }
  this.dispose = function () {
    this.domElement.removeEventListener('contextmenu', k, !1)
    this.domElement.removeEventListener('mousedown', x, !1)
    this.domElement.removeEventListener('mousemove', r, !1)
    this.domElement.removeEventListener('mouseup', n, !1)
    window.removeEventListener('keydown', z, !1)
    window.removeEventListener('keyup', u, !1)
  }
  var r = g(this, this.mousemove),
    x = g(this, this.mousedown),
    n = g(this, this.mouseup),
    z = g(this, this.keydown),
    u = g(this, this.keyup)
  this.domElement.addEventListener('contextmenu', k, !1)
  this.domElement.addEventListener('mousemove', r, !1)
  this.domElement.addEventListener('mousedown', x, !1)
  this.domElement.addEventListener('mouseup', n, !1)
  window.addEventListener('keydown', z, !1)
  window.addEventListener('keyup', u, !1)
  this.updateMovementVector()
  this.updateRotationVector()
}
THREE.sb1 = (function () {
  function f(f, g, k) {
    this.camera = f
    this.scene = g
    this.startPoint = new THREE._0x1()
    this.endPoint = new THREE._0x1()
    this.collection = []
    this.deep = k || Number.MAX_VALUE
  }
  var m = new THREE.Frustum(),
    g = new THREE._0x1(),
    k = new THREE._0x1(),
    r = new THREE.Matrix4()
  f.prototype.select = function (f, g) {
    this.startPoint = f || this.startPoint
    this.endPoint = g || this.endPoint
    this.collection = []
    this.updateFrustum(this.startPoint, this.endPoint)
    this.searchChildInFrustum(m, this.scene)
    return this.collection
  }
  f.prototype.updateFrustum = function (f, g) {
    f = f || this.startPoint
    g = g || this.endPoint
    this.camera.updateProjectionMatrix()
    this.camera.updateMatrixWorld()
    var k = f.clone()
    k.x = Math.min(f.x, g.x)
    k.y = Math.max(f.y, g.y)
    g.x = Math.max(f.x, g.x)
    g.y = Math.min(f.y, g.y)
    var n = this.camera.position.clone(),
      r = k.clone(),
      y = new THREE._0x1(g.x, k.y, 0),
      x = g.clone(),
      k = new THREE._0x1(k.x, g.y, 0)
    r.unproject(this.camera)
    y.unproject(this.camera)
    x.unproject(this.camera)
    k.unproject(this.camera)
    var C = r.clone().sub(n),
      G = y.clone().sub(n),
      v = x.clone().sub(n)
    C.normalize()
    G.normalize()
    v.normalize()
    C.multiplyScalar(this.deep)
    G.multiplyScalar(this.deep)
    v.multiplyScalar(this.deep)
    C.add(n)
    G.add(n)
    v.add(n)
    var Q = m.planes
    Q[0].setFromCoplanarPoints(n, r, y)
    Q[1].setFromCoplanarPoints(n, y, x)
    Q[2].setFromCoplanarPoints(x, k, n)
    Q[3].setFromCoplanarPoints(k, r, n)
    Q[4].setFromCoplanarPoints(y, x, k)
    Q[5].setFromCoplanarPoints(v, G, C)
    Q[5].normal.multiplyScalar(-1)
  }
  f.prototype.searchChildInFrustum = function (f, m) {
    if (m.isna && m.visible && void 0 !== m.material)
      if (
        (m.geometry.computeBoundingSphere(),
        g.copy(m.geometry.boundingSphere.center),
        g.applyMatrix4(m.matrixWorld),
        m.meshList)
      )
        for (var n = 0; n < m.meshList.length; n++)
          k.copy(g),
            (r.elements = m.meshList[n].Tf),
            k.applyMatrix4(r),
            f.containsPoint(k) && this.collection.push({ mesh: m, insId: n })
      else f.containsPoint(g) && this.collection.push({ mesh: m, insId: null })
    if (0 < m.children.length)
      for (n = 0; n < m.children.length; n++)
        this.searchChildInFrustum(f, m.children[n])
  }
  return f
})()
THREE.sbh = (function () {
  function f(f, g, k) {
    this.element = document.createElement('div')
    this.element.classList.add(k)
    this.element.style.pointerEvents = 'none'
    this.renderer = g
    this.startPoint = { x: 0, y: 0 }
    this.pointTopLeft = { x: 0, y: 0 }
    this.pointBottomRight = { x: 0, y: 0 }
    this.isDown = !1
    this.renderer.domElement.addEventListener(
      'mousedown',
      function (f) {
        this.isDown = !0
        this.onSelectStart(f)
      }.bind(this),
      !1
    )
    this.renderer.domElement.addEventListener(
      'mousemove',
      function (f) {
        if (this.isDown) this.onSelectMove(f)
      }.bind(this),
      !1
    )
    this.renderer.domElement.addEventListener(
      'mouseup',
      function (f) {
        this.isDown = !1
        this.onSelectOver(f)
      }.bind(this),
      !1
    )
  }
  f.prototype.onSelectStart = function (f) {
    this.renderer.domElement.parentElement.appendChild(this.element)
    this.element.style.left = f.clientX + 'px'
    this.element.style.top = f.clientY + 'px'
    this.element.style.width = '0px'
    this.element.style.height = '0px'
    this.startPoint.x = f.clientX
    this.startPoint.y = f.clientY
  }
  f.prototype.onSelectMove = function (f) {
    this.pointBottomRight.x = Math.max(this.startPoint.x, f.clientX)
    this.pointBottomRight.y = Math.max(this.startPoint.y, f.clientY)
    this.pointTopLeft.x = Math.min(this.startPoint.x, f.clientX)
    this.pointTopLeft.y = Math.min(this.startPoint.y, f.clientY)
    this.element.style.left = this.pointTopLeft.x + 'px'
    this.element.style.top = this.pointTopLeft.y + 'px'
    this.element.style.width =
      this.pointBottomRight.x - this.pointTopLeft.x + 'px'
    this.element.style.height =
      this.pointBottomRight.y - this.pointTopLeft.y + 'px'
  }
  f.prototype.onSelectOver = function () {
    this.element.parentElement.removeChild(this.element)
  }
  return f
})()
var WEBGL = {
  isWebGLAvailable: function () {
    try {
      var f = document.createElement('canvas')
      return !(
        !window.WebGLRenderingContext ||
        (!f.getContext('webgl') && !f.getContext('experimental-webgl'))
      )
    } catch (m) {
      return !1
    }
  },
  isWebGL2Available: function () {
    try {
      var f = document.createElement('canvas')
      return !(!window.WebGL2RenderingContext || !f.getContext('webgl2'))
    } catch (m) {
      return !1
    }
  },
  getWebGLErrorMessage: function () {
    return this.getErrorMessage(1)
  },
  getWebGL2ErrorMessage: function () {
    return this.getErrorMessage(2)
  },
  getErrorMessage: function (f) {
    var m = {
        1: window.WebGLRenderingContext,
        2: window.WebGL2RenderingContext,
      },
      g =
        'Your $0 does not seem to support \x3ca href\x3d"http://khronos.org/webgl/wiki/Getting_a_WebGL_Implementation" style\x3d"color:#000"\x3e$1\x3c/a\x3e',
      k = document.createElement('div')
    k.id = 'webglmessage'
    k.style.fontFamily = 'monospace'
    k.style.fontSize = '13px'
    k.style.fontWeight = 'normal'
    k.style.textAlign = 'center'
    k.style.background = '#fff'
    k.style.color = '#000'
    k.style.padding = '1.5em'
    k.style.width = '400px'
    k.style.margin = '5em auto 0'
    g = m[f] ? g.replace('$0', 'graphics card') : g.replace('$0', 'browser')
    g = g.replace('$1', { 1: 'WebGL', 2: 'WebGL 2' }[f])
    k.innerHTML = g
    return k
  },
}
;('use strict')
var b4 =
  b4 ||
  (function () {
    var f = []
    return {
      REVISION: '7',
      getAll: function () {
        return f
      },
      removeAll: function () {
        f = []
      },
      add: function (m) {
        f.push(m)
      },
      remove: function (m) {
        m = f.indexOf(m)
        ;-1 !== m && f.splice(m, 1)
      },
      update: function (m) {
        if (0 === f.length) return !1
        var g = 0,
          k = f.length
        for (m = void 0 !== m ? m : Date.now(); g < k; )
          f && f[g] ? (f[g].update(m) ? g++ : (f.splice(g, 1), k--)) : g++
        return !0
      },
    }
  })()
b4.Tween = function (f) {
  var m = {},
    g = {},
    k = 1e3,
    r = 0,
    x = null,
    n = b4.Easing.Linear.None,
    z = b4.Interpolation.Linear,
    u = [],
    w = null,
    y = !1,
    L = null,
    C = null
  this.to = function (f, m) {
    null !== m && (k = m)
    g = f
    return this
  }
  this.start = function (k) {
    b4.add(this)
    y = !1
    x = void 0 !== k ? k : Date.now()
    x += r
    for (var n in g)
      if (null !== f[n]) {
        if (g[n] instanceof Array) {
          if (0 === g[n].length) continue
          g[n] = [f[n]].concat(g[n])
        }
        m[n] = f[n]
      }
    return this
  }
  this.stop = function () {
    b4.remove(this)
    return this
  }
  this.delay = function (f) {
    r = f
    return this
  }
  this.easing = function (f) {
    n = f
    return this
  }
  this.interpolation = function (f) {
    z = f
    return this
  }
  this.chain = function () {
    u = arguments
    return this
  }
  this.onStart = function (f) {
    w = f
    return this
  }
  this.onUpdate = function (f) {
    L = f
    return this
  }
  this.onComplete = function (f) {
    C = f
    return this
  }
  this.update = function (r) {
    if (r < x) return !0
    !1 === y && (null !== w && w.call(f), (y = !0))
    var v = (r - x) / k,
      v = 1 < v ? 1 : v,
      G = n(v),
      Y
    for (Y in m) {
      var S = m[Y],
        R = g[Y]
      f[Y] = R instanceof Array ? z(R, G) : S + (R - S) * G
    }
    null !== L && L.call(f, G)
    if (1 == v) {
      null !== C && C.call(f)
      v = 0
      for (G = u.length; v < G; v++) u[v].start(r)
      return !1
    }
    return !0
  }
}
b4.Easing = {
  Linear: {
    None: function (f) {
      return f
    },
  },
  Quadratic: {
    In: function (f) {
      return f * f
    },
    Out: function (f) {
      return f * (2 - f)
    },
    InOut: function (f) {
      return 1 > (f *= 2) ? 0.5 * f * f : -0.5 * (--f * (f - 2) - 1)
    },
  },
  Cubic: {
    In: function (f) {
      return f * f * f
    },
    Out: function (f) {
      return --f * f * f + 1
    },
    InOut: function (f) {
      return 1 > (f *= 2) ? 0.5 * f * f * f : 0.5 * ((f -= 2) * f * f + 2)
    },
  },
  Quartic: {
    In: function (f) {
      return f * f * f * f
    },
    Out: function (f) {
      return 1 - --f * f * f * f
    },
    InOut: function (f) {
      return 1 > (f *= 2)
        ? 0.5 * f * f * f * f
        : -0.5 * ((f -= 2) * f * f * f - 2)
    },
  },
  Quintic: {
    In: function (f) {
      return f * f * f * f * f
    },
    Out: function (f) {
      return --f * f * f * f * f + 1
    },
    InOut: function (f) {
      return 1 > (f *= 2)
        ? 0.5 * f * f * f * f * f
        : 0.5 * ((f -= 2) * f * f * f * f + 2)
    },
  },
  Sinusoidal: {
    In: function (f) {
      return 1 - Math.cos((f * Math.PI) / 2)
    },
    Out: function (f) {
      return Math.sin((f * Math.PI) / 2)
    },
    InOut: function (f) {
      return 0.5 * (1 - Math.cos(Math.PI * f))
    },
  },
  Exponential: {
    In: function (f) {
      return 0 === f ? 0 : Math.pow(1024, f - 1)
    },
    Out: function (f) {
      return 1 === f ? 1 : 1 - Math.pow(2, -10 * f)
    },
    InOut: function (f) {
      return 0 === f
        ? 0
        : 1 === f
        ? 1
        : 1 > (f *= 2)
        ? 0.5 * Math.pow(1024, f - 1)
        : 0.5 * (-Math.pow(2, -10 * (f - 1)) + 2)
    },
  },
  Circular: {
    In: function (f) {
      return 1 - Math.sqrt(1 - f * f)
    },
    Out: function (f) {
      return Math.sqrt(1 - --f * f)
    },
    InOut: function (f) {
      return 1 > (f *= 2)
        ? -0.5 * (Math.sqrt(1 - f * f) - 1)
        : 0.5 * (Math.sqrt(1 - (f -= 2) * f) + 1)
    },
  },
  Elastic: {
    In: function (f) {
      var m,
        g = 0.1
      if (0 === f) return 0
      if (1 === f) return 1
      !g || 1 > g
        ? ((g = 1), (m = 0.1))
        : (m = (0.4 * Math.asin(1 / g)) / (2 * Math.PI))
      return -(
        g *
        Math.pow(2, 10 * --f) *
        Math.sin((2 * (f - m) * Math.PI) / 0.4)
      )
    },
    Out: function (f) {
      var m,
        g = 0.1
      if (0 === f) return 0
      if (1 === f) return 1
      !g || 1 > g
        ? ((g = 1), (m = 0.1))
        : (m = (0.4 * Math.asin(1 / g)) / (2 * Math.PI))
      return (
        g * Math.pow(2, -10 * f) * Math.sin((2 * (f - m) * Math.PI) / 0.4) + 1
      )
    },
    InOut: function (f) {
      var m,
        g = 0.1
      if (0 === f) return 0
      if (1 === f) return 1
      !g || 1 > g
        ? ((g = 1), (m = 0.1))
        : (m = (0.4 * Math.asin(1 / g)) / (2 * Math.PI))
      return 1 > (f *= 2)
        ? -0.5 *
            g *
            Math.pow(2, 10 * --f) *
            Math.sin((2 * (f - m) * Math.PI) / 0.4)
        : 0.5 *
            g *
            Math.pow(2, -10 * --f) *
            Math.sin((2 * (f - m) * Math.PI) / 0.4) +
            1
    },
  },
  Back: {
    In: function (f) {
      return f * f * (2.70158 * f - 1.70158)
    },
    Out: function (f) {
      return --f * f * (2.70158 * f + 1.70158) + 1
    },
    InOut: function (f) {
      return 1 > (f *= 2)
        ? 0.5 * f * f * (3.5949095 * f - 2.5949095)
        : 0.5 * ((f -= 2) * f * (3.5949095 * f + 2.5949095) + 2)
    },
  },
  Bounce: {
    In: function (f) {
      return 1 - b4.Easing.Bounce.Out(1 - f)
    },
    Out: function (f) {
      return f < 1 / 2.75
        ? 7.5625 * f * f
        : f < 2 / 2.75
        ? 7.5625 * (f -= 1.5 / 2.75) * f + 0.75
        : f < 2.5 / 2.75
        ? 7.5625 * (f -= 2.25 / 2.75) * f + 0.9375
        : 7.5625 * (f -= 2.625 / 2.75) * f + 0.984375
    },
    InOut: function (f) {
      return 0.5 > f
        ? 0.5 * b4.Easing.Bounce.In(2 * f)
        : 0.5 * b4.Easing.Bounce.Out(2 * f - 1) + 0.5
    },
  },
}
b4.Interpolation = {
  Linear: function (f, m) {
    var g = f.length - 1,
      k = g * m,
      r = Math.floor(k),
      x = b4.Interpolation.Utils.Linear
    return 0 > m
      ? x(f[0], f[1], k)
      : 1 < m
      ? x(f[g], f[g - 1], g - k)
      : x(f[r], f[r + 1 > g ? g : r + 1], k - r)
  },
  Bezier: function (f, m) {
    var g = 0,
      k = f.length - 1,
      r = Math.pow,
      x = b4.Interpolation.Utils.Bernstein,
      n
    for (n = 0; n <= k; n++) g += r(1 - m, k - n) * r(m, n) * f[n] * x(k, n)
    return g
  },
  CatmullRom: function (f, m) {
    var g = f.length - 1,
      k = g * m,
      r = Math.floor(k),
      x = b4.Interpolation.Utils.CatmullRom
    return f[0] === f[g]
      ? (0 > m && (r = Math.floor((k = g * (1 + m)))),
        x(f[(r - 1 + g) % g], f[r], f[(r + 1) % g], f[(r + 2) % g], k - r))
      : 0 > m
      ? f[0] - (x(f[0], f[0], f[1], f[1], -k) - f[0])
      : 1 < m
      ? f[g] - (x(f[g], f[g], f[g - 1], f[g - 1], k - g) - f[g])
      : x(
          f[r ? r - 1 : 0],
          f[r],
          f[g < r + 1 ? g : r + 1],
          f[g < r + 2 ? g : r + 2],
          k - r
        )
  },
  Utils: {
    Linear: function (f, m, g) {
      return (m - f) * g + f
    },
    Bernstein: function (f, m) {
      var g = b4.Interpolation.Utils.Factorial
      return g(f) / g(m) / g(f - m)
    },
    Factorial: (function () {
      var f = [1]
      return function (m) {
        var g = 1,
          k
        if (f[m]) return f[m]
        for (k = m; 1 < k; k--) g *= k
        return (f[m] = g)
      }
    })(),
    CatmullRom: function (f, m, g, k, r) {
      f = 0.5 * (g - f)
      k = 0.5 * (k - m)
      var x = r * r
      return (
        (2 * m - 2 * g + f + k) * r * x +
        (-3 * m + 3 * g - 2 * f - k) * x +
        f * r +
        m
      )
    },
  },
}
var FOUR = FOUR || {}
FOUR.EVENT = {
  BACKGROUND_CHANGE: 'background-change',
  CAMERA_CHANGE: 'camera-change',
  CONTEXT_MENU: 'contextmenu',
  CONTINUOUS_UPDATE_END: 'continuous-update-end',
  CONTINUOUS_UPDATE_START: 'continuous-update-start',
  CONTROLLER_CHANGE: 'controller-change',
  INDEX: 'index',
  KEY_DOWN: 'keydown',
  KEY_UP: 'keyup',
  MOUSE_DOWN: 'mousedown',
  MOUSE_MOVE: 'mousemove',
  MOUSE_UP: 'mouseup',
  RENDER: 'render',
  RESIZE: 'resize',
  UPDATE: 'update',
}
FOUR.b5 = (function () {
  function f(f, g) {
    THREE.EventDispatcher.call(this)
    f = f || {}
    f instanceof HTMLElement &&
      g instanceof THREE.Camera &&
      (f = { domElement: f, viewport: { camera: g } })
    var k = this
    k.viewer = f.viewer
    k.CUBE_FACE_SIZE = 70
    k.CUBE_EDGE_SIZE = 15
    k.CUBE_LABEL_SIZE = 99
    k.COMPASS_COLOR = 6710886
    k.COMPASS_OPACITY = 0.8
    k.FACE_COLOUR = 4874096
    k.FACE_OPACITY_MOUSE_OFF = 0
    k.FACE_OPACITY_MOUSE_NOT_OVER = 0.1
    k.FACE_OPACITY_MOUSE_OVER = 0.8
    k.FACES = {
      TOP: 0,
      FRONT: 1,
      RIGHT: 2,
      BACK: 3,
      LEFT: 4,
      BOTTOM: 5,
      TOP_FRONT_EDGE: 6,
      TOP_RIGHT_EDGE: 7,
      TOP_BACK_EDGE: 8,
      TOP_LEFT_EDGE: 9,
      FRONT_RIGHT_EDGE: 10,
      BACK_RIGHT_EDGE: 11,
      BACK_LEFT_EDGE: 12,
      FRONT_LEFT_EDGE: 13,
      BOTTOM_FRONT_EDGE: 14,
      BOTTOM_RIGHT_EDGE: 15,
      BOTTOM_BACK_EDGE: 16,
      BOTTOM_LEFT_EDGE: 17,
      TOP_FRONT_RIGHT_CORNER: 18,
      TOP_BACK_RIGHT_CORNER: 19,
      TOP_BACK_LEFT_CORNER: 20,
      TOP_FRONT_LEFT_CORNER: 21,
      BOTTOM_FRONT_RIGHT_CORNER: 22,
      BOTTOM_BACK_RIGHT_CORNER: 23,
      BOTTOM_BACK_LEFT_CORNER: 24,
      BOTTOM_FRONT_LEFT_CORNER: 25,
    }
    k.ARROWS_MAP = {}
    k.ARROWS_MAP[k.FACES.FRONT] = [
      k.FACES.TOP,
      k.FACES.RIGHT,
      k.FACES.BOTTOM,
      k.FACES.LEFT,
    ]
    k.ARROWS_MAP[k.FACES.RIGHT] = [
      k.FACES.TOP,
      k.FACES.BACK,
      k.FACES.BOTTOM,
      k.FACES.FRONT,
    ]
    k.ARROWS_MAP[k.FACES.BACK] = [
      k.FACES.TOP,
      k.FACES.LEFT,
      k.FACES.BOTTOM,
      k.FACES.RIGHT,
    ]
    k.ARROWS_MAP[k.FACES.LEFT] = [
      k.FACES.TOP,
      k.FACES.FRONT,
      k.FACES.BOTTOM,
      k.FACES.BACK,
    ]
    k.ARROWS_MAP[k.FACES.TOP] = [
      k.FACES.BACK,
      k.FACES.RIGHT,
      k.FACES.FRONT,
      k.FACES.LEFT,
    ]
    k.ARROWS_MAP[k.FACES.BOTTOM] = [
      k.FACES.FRONT,
      k.FACES.RIGHT,
      k.FACES.BACK,
      k.FACES.LEFT,
    ]
    k.LABELS_HOVER_OFF = 0.5
    k.LABELS_HOVER = 1
    k.MODES = { SELECT: 0, READONLY: 1 }
    k.OFFSET = 1
    k.ROTATION_0 = 0
    k.ROTATION_90 = Math.PI / 2
    k.ROTATION_180 = Math.PI
    k.ROTATION_270 = 1.5 * Math.PI
    k.ROTATION_360 = 2 * Math.PI
    k.ROTATIONS_PRESET = []
    k.ROTATIONS_PRESET[k.FACES.BACK] = [180, 0]
    k.ROTATIONS_PRESET[k.FACES.BACK_LEFT_EDGE] = [225, 0]
    k.ROTATIONS_PRESET[k.FACES.BACK_RIGHT_EDGE] = [135, 0]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM] = [0, -90]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_BACK_EDGE] = [180, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_BACK_LEFT_CORNER] = [225, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_BACK_RIGHT_CORNER] = [135, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_FRONT_EDGE] = [0, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_FRONT_LEFT_CORNER] = [-45, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_FRONT_RIGHT_CORNER] = [45, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_LEFT_EDGE] = [-90, -45]
    k.ROTATIONS_PRESET[k.FACES.BOTTOM_RIGHT_EDGE] = [90, -45]
    k.ROTATIONS_PRESET[k.FACES.FRONT] = [0, 0]
    k.ROTATIONS_PRESET[k.FACES.FRONT_LEFT_EDGE] = [-45, 0]
    k.ROTATIONS_PRESET[k.FACES.FRONT_RIGHT_EDGE] = [45, 0]
    k.ROTATIONS_PRESET[k.FACES.LEFT] = [-90, 0]
    k.ROTATIONS_PRESET[k.FACES.RIGHT] = [90, 0]
    k.ROTATIONS_PRESET[k.FACES.TOP] = [0, 90]
    k.ROTATIONS_PRESET[k.FACES.TOP_BACK_EDGE] = [180, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_BACK_LEFT_CORNER] = [225, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_BACK_RIGHT_CORNER] = [135, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_FRONT_EDGE] = [0, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_FRONT_LEFT_CORNER] = [-45, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_FRONT_RIGHT_CORNER] = [45, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_LEFT_EDGE] = [-90, 45]
    k.ROTATIONS_PRESET[k.FACES.TOP_RIGHT_EDGE] = [90, 45]
    k.X_AXIS = new THREE._0x1(1, 0, 0)
    k.Y_AXIS = new THREE._0x1(0, 1, 0)
    k.Z_AXIS = new THREE._0x1(0, 0, 1)
    k.camera = null
    k.compass = new THREE.Object3D()
    k.control = new THREE.Object3D()
    k.cube = new THREE.Object3D()
    k.display = {
      controlAxis: !1,
      sceneAxis: !1,
      cameraAxis: !1,
      compass: !1,
      cube: !0,
      labels: !0,
      normals: !1,
    }
    k.domElement = f.domElement
    k.enabled = !1
    k.fov = 50
    k.cameraDistance = 210
    k.frontFace = null
    k.labelSize = 128
    k.labelFontSize = 0.2 * k.labelSize
    k.labelFontFamily = 'Arial'
    k.labels = []
    k.labels[k.FACES.TOP] = '\u4e0a'
    k.labels[k.FACES.FRONT] = '\u5357'
    k.labels[k.FACES.RIGHT] = '\u4e1c'
    k.labels[k.FACES.LEFT] = '\u897f'
    k.labels[k.FACES.BACK] = '\u5317'
    k.labels[k.FACES.BOTTOM] = '\u4e0b'
    k.labelRotation = []
    k.labelRotation[k.FACES.FRONT] = 0
    k.labelRotation[k.FACES.LEFT] = 90
    k.labelRotation[k.FACES.RIGHT] = 270
    k.labelRotation[k.FACES.BACK] = 180
    k.labelRotation[k.FACES.BOTTOM] = 180
    k.label_anisotropy = 8
    k.listeners = {}
    k.materials = { compass: null, face: null, faces: [] }
    k.mouse = new THREE.vt2()
    k.raycaster = new THREE.rct()
    k.renderContinuous = !1
    k.scene = new THREE.ss()
    k.view = new THREE.Object3D()
    k.viewport = f.viewport
    k.ambientColor = 16777215
    k.compass.name = 'compass'
    k.control.name = 'control'
    k.cube.name = 'cube'
    k.updateTween = !0
    k.extendObj(k, f)
    k.arrows = {}
    k.currentView = k.FACES.FRONT
    k.renderer = new THREE.q5({ alpha: !0, antialias: !0 })
    k.renderer.setSize(k.domElement.clientWidth, k.domElement.clientHeight)
    k.domElement.appendChild(k.renderer.domElement)
    k.scene.add(k.control)
    k.scene.add(k.view)
    k.setupCamera()
    k.setupLights()
    k.setupMaterials()
    k.setup_0x6()
    k.setupHtmlUI()
    setTimeout(function () {
      k.updateOrientation()
      k.onMouseLeave()
    }, 0)
  }
  f.prototype = Object.create(THREE.EventDispatcher.prototype)
  f.prototype.extendObj = function (f, g) {
    var k = this
    Object.keys(g).forEach(function (m) {
      'display' === m ? k.extendObj(f[m], g[m]) : (f[m] = g[m])
    })
  }
  f.prototype.disable = function () {
    var f = this
    f.enabled = !1
    Object.keys(f.listeners).forEach(function (g) {
      g = f.listeners[g]
      g.element.removeEventListener(g.event, g.fn)
    })
  }
  f.prototype.enable = function () {
    function f(f, m, x) {
      g.listeners[m] = { element: f, event: m, fn: x.bind(g) }
      f.addEventListener(m, g.listeners[m].fn, !1)
    }
    var g = this
    f(g.domElement, 'contextmenu', g.onContextMenu)
    f(g.domElement, 'mouseenter', g.onMouseEnter)
    f(g.domElement, 'mouseleave', g.onMouseLeave)
    f(g.domElement, 'mousemove', g.onMouseMove)
    f(g.domElement, 'mouseover', g.onMouseOver)
    f(g.domElement, 'mouseup', g.onMouseUp)
    f(window, 'keydown', g.render)
    f(window, 'mousemove', g.render)
    f(g.arrows.up, 'click', g.onArrowUp)
    f(g.arrows.down, 'click', g.onArrowDown)
    f(g.arrows.left, 'click', g.onArrowLeft)
    f(g.arrows.right, 'click', g.onArrowRight)
    g.enabled = !0
  }
  f.prototype.getFaceLabel = function (f) {
    var g = null,
      k = this
    Object.keys(k.FACES).forEach(function (m) {
      k.FACES[m] === f && (g = m)
    })
    return g
  }
  f.prototype.makeCompass = function (f, g, k, r, x, n, z, u) {
    var m = new THREE.Object3D()
    z = new THREE.naBasicMaterial({ color: z })
    x = new THREE.Circle_0x6(x, n)
    x = new THREE.na(x, z)
    m.add(x)
    m.name = f
    m.opacity = u
    m.position.x = g
    m.position.y = k
    m.position.z = r
    return m
  }
  f.prototype.makeCorner = function (f, g, k, r, x, n) {
    var m, u, w, y, L
    L = new THREE.Object3D()
    y = this.materials.face.clone()
    this.materials.faces.push(y)
    w = new THREE.pl_0x6(g, g)
    m = new THREE.na(w, y)
    m.name = f
    m.position.setX(g / 2)
    m.position.setY(g / 2)
    w = new THREE.pl_0x6(g, g)
    u = new THREE.na(w, y)
    u.name = f
    u.position.setX(g / 2)
    u.position.setZ(-g / 2)
    u.rotateOnAxis(new THREE._0x1(1, 0, 0), Math.PI / 2)
    w = new THREE.pl_0x6(g, g)
    w = new THREE.na(w, y)
    w.name = f
    w.position.setY(g / 2)
    w.position.setZ(-g / 2)
    w.rotateOnAxis(new THREE._0x1(0, 1, 0), -Math.PI / 2)
    L.add(m)
    L.add(u)
    L.add(w)
    L.name = f
    L.position.x = k
    L.position.y = r
    L.position.z = x
    n.forEach(function (f) {
      L.rotateOnAxis(f.axis, f.rad)
    })
    return L
  }
  f.prototype.makeEdge = function (f, g, k, r, x, n, z) {
    var m, w, y, L
    y = this.materials.face.clone()
    this.materials.faces.push(y)
    L = new THREE.Object3D()
    w = new THREE.pl_0x6(g, k)
    m = new THREE.na(w, y)
    m.name = f
    m.position.setY(k / 2)
    w = new THREE.pl_0x6(g, k)
    g = new THREE.na(w, y)
    g.name = f
    g.position.setZ(-k / 2)
    g.rotateOnAxis(new THREE._0x1(1, 0, 0), Math.PI / 2)
    L.add(m)
    L.add(g)
    L.name = f
    L.position.x = r
    L.position.y = x
    L.position.z = n
    z.forEach(function (f) {
      L.rotateOnAxis(f.axis, f.rad)
    })
    return L
  }
  f.prototype.makeFace = function (f, g, k, r, x, n) {
    var m, u
    g = new THREE.pl_0x6(g, g)
    u = this.materials.face.clone()
    this.materials.faces.push(u)
    m = new THREE.na(g, u)
    m.name = f
    m.position.setX(k)
    m.position.setY(r)
    m.position.setZ(x)
    n.forEach(function (f) {
      m.rotateOnAxis(f.axis, f.rad)
    })
    return m
  }
  f.prototype.onContextMenu = function (f) {
    f.preventDefault()
  }
  f.prototype.onMouseEnter = function () {
    this.tweenControlOpacity(
      this.materials.faces,
      this.FACE_OPACITY_MOUSE_OFF,
      this.FACE_OPACITY_MOUSE_NOT_OVER
    )
    for (var f in this.arrows)
      this.arrows.hasOwnProperty(f) &&
        this.tweenControlOpacity(
          this.arrows[f],
          this.LABELS_HOVER_OFF,
          this.LABELS_HOVER
        )
    this.display.labels &&
      this.tweenControlOpacity(
        this.materials.labels,
        this.LABELS_HOVER_OFF,
        this.LABELS_HOVER
      )
  }
  f.prototype.onMouseLeave = function () {
    this.tweenControlOpacity(
      this.materials.face,
      this.FACE_OPACITY_MOUSE_NOT_OVER,
      this.FACE_OPACITY_MOUSE_OFF
    )
    for (var f in this.arrows)
      this.arrows.hasOwnProperty(f) &&
        this.tweenControlOpacity(
          this.arrows[f],
          this.LABELS_HOVER,
          this.LABELS_HOVER_OFF
        )
    this.display.labels &&
      this.tweenControlOpacity(
        this.materials.labels,
        this.LABELS_HOVER,
        this.LABELS_HOVER_OFF
      )
  }
  f.prototype.onMouseMove = function (f) {
    var g = this
    g.mouse.x = (f.offsetX / g.domElement.clientWidth) * 2 - 1
    g.mouse.y = 2 * -(f.offsetY / g.domElement.clientHeight) + 1
    g.raycaster.setFromCamera(g.mouse, g.camera)
    g.scene.traverse(function (f) {
      'labels' !== f.name &&
        'controlAxis' !== f.name &&
        'sceneAxis' != f.name &&
        f.material &&
        (f.material.opacity = g.FACE_OPACITY_MOUSE_NOT_OVER)
    })
    f = g.raycaster.intersectObjects(g.cube.children, !0)
    0 < f.length &&
      'labels' !== f[0].object.name &&
      (g.getFaceLabel(f[0].object.name),
      (f[0].object.material.opacity = g.FACE_OPACITY_MOUSE_OVER))
  }
  f.prototype.onMouseOver = function (f) {}
  f.prototype.onMouseUp = function (f) {
    this.mouse.x = (f.offsetX / this.domElement.clientWidth) * 2 - 1
    this.mouse.y = 2 * -(f.offsetY / this.domElement.clientHeight) + 1
    this.raycaster.setFromCamera(this.mouse, this.camera)
    f = this.raycaster.intersectObjects(this.cube.children, !0)
    if (0 < f.length) {
      var g = this.getFaceLabel(f[0].object.name)
      console.info('click', g, f)
      this.setViewQmd(g)
    }
  }
  f.prototype.setViewQmd = function (f) {
    var g = this.viewer,
      k = g._0xA04.max.distanceTo(g._0xA05)
    1e4 < k && (box1 = 200)
    k *= 1.8
    'TOP' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z + k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_FRONT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y - 0.6 * k, z: g._0xA05.z + 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_FRONT_RIGHT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x + 0.5 * k,
            y: g._0xA05.y - 0.5 * k,
            z: g._0xA05.z + 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_RIGHT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x + 0.6 * k, y: g._0xA05.y, z: g._0xA05.z + 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_BACK_RIGHT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x + 0.5 * k,
            y: g._0xA05.y + 0.5 * k,
            z: g._0xA05.z + 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_BACK_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y + 0.6 * k, z: g._0xA05.z + 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_BACK_LEFT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x - 0.5 * k,
            y: g._0xA05.y + 0.5 * k,
            z: g._0xA05.z + 0.6 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_LEFT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x - 0.6 * k, y: g._0xA05.y, z: g._0xA05.z + 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'TOP_FRONT_LEFT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x - 0.5 * k,
            y: g._0xA05.y - 0.5 * k,
            z: g._0xA05.z + 0.6 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'FRONT' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y - k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_FRONT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y - 0.6 * k, z: g._0xA05.z - 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'FRONT_RIGHT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x + 0.6 * k, y: g._0xA05.y - 0.6 * k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_FRONT_RIGHT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x + 0.5 * k,
            y: g._0xA05.y - 0.5 * k,
            z: g._0xA05.z - 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'RIGHT' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x + k, y: g._0xA05.y, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_RIGHT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x + 0.6 * k, y: g._0xA05.y, z: g._0xA05.z - 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BACK_RIGHT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x + 0.6 * k, y: g._0xA05.y + 0.6 * k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_BACK_RIGHT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x + 0.5 * k,
            y: g._0xA05.y + 0.5 * k,
            z: g._0xA05.z - 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BACK' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y + k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_BACK_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y + 0.6 * k, z: g._0xA05.z - 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BACK_LEFT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x - 0.6 * k, y: g._0xA05.y + 0.6 * k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_BACK_LEFT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x - 0.5 * k,
            y: g._0xA05.y + 0.5 * k,
            z: g._0xA05.z - 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'LEFT' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x - k, y: g._0xA05.y, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_LEFT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x - 0.6 * k, y: g._0xA05.y, z: g._0xA05.z - 0.6 * k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'FRONT_LEFT_EDGE' == f
      ? g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x - 0.6 * k, y: g._0xA05.y - 0.6 * k, z: g._0xA05.z },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM_FRONT_LEFT_CORNER' == f
      ? g._0x00(
          g._0x9B.position,
          {
            x: g._0xA05.x - 0.5 * k,
            y: g._0xA05.y - 0.5 * k,
            z: g._0xA05.z - 0.5 * k,
          },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
      : 'BOTTOM' == f &&
        g._0x00(
          g._0x9B.position,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z - k },
          g._0x6E.target,
          { x: g._0xA05.x, y: g._0xA05.y, z: g._0xA05.z }
        )
  }
  f.prototype.render = function () {
    this.renderer.render(this.scene, this.camera)
  }
  f.prototype.setupCamera = function () {
    this.camera = new THREE.q4(
      this.fov,
      this.domElement.clientWidth / this.domElement.clientHeight,
      0.1,
      1e3
    )
    this.camera.name = 'camera'
    this.camera.position.x = 0
    this.camera.position.y = 0
    this.camera.position.z = this.cameraDistance
    this.camera.up = new THREE._0x1(0, 1, 0)
    this.camera.lookAt(new THREE._0x1(0, 0, 1))
    this.view.add(this.camera)
  }
  f.prototype.setup_0x6 = function () {
    if (this.display.cube) {
      if (this.display.labels) {
        var f = new THREE.Box_0x6(
            this.CUBE_LABEL_SIZE,
            this.CUBE_LABEL_SIZE,
            this.CUBE_LABEL_SIZE
          ),
          f = new THREE.na(f, this.materials.labels)
        f.name = 'labels'
        this.cube.add(f)
      }
      var f = this.makeFace(this.FACES.TOP, 70, 0, 0, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_90 },
        ]),
        g = this.makeFace(this.FACES.FRONT, 70, 0, -50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_90 },
        ]),
        k = this.makeFace(this.FACES.RIGHT, 70, 50, 0, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_90 },
          { axis: this.Y_AXIS, rad: this.ROTATION_90 },
        ]),
        r = this.makeFace(this.FACES.BACK, 70, 0, 50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_270 },
        ]),
        x = this.makeFace(this.FACES.LEFT, 70, -50, 0, 0, [
          { axis: this.Y_AXIS, rad: this.ROTATION_270 },
          { axis: this.Z_AXIS, rad: this.ROTATION_90 },
        ]),
        n = this.makeFace(this.FACES.BOTTOM, 70, 0, 0, -50, [
          { axis: this.Y_AXIS, rad: this.ROTATION_180 },
          { axis: this.Z_AXIS, rad: this.ROTATION_90 },
        ])
      this.frontFace = g
      var z = this.makeEdge(this.FACES.TOP_FRONT_EDGE, 70, 15, 0, -50, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_0 },
        ]),
        u = this.makeEdge(this.FACES.TOP_RIGHT_EDGE, 70, 15, 50, 0, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_90 },
        ]),
        w = this.makeEdge(this.FACES.TOP_BACK_EDGE, 70, 15, 0, 50, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_180 },
        ]),
        y = this.makeEdge(this.FACES.TOP_LEFT_EDGE, 70, 15, -50, 0, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_270 },
        ]),
        L = this.makeEdge(this.FACES.BOTTOM_FRONT_EDGE, 70, 15, 0, -50, -50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_0 },
          { axis: this.Y_AXIS, rad: this.ROTATION_180 },
        ]),
        C = this.makeEdge(this.FACES.BOTTOM_RIGHT_EDGE, 70, 15, 50, 0, -50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_90 },
          { axis: this.Y_AXIS, rad: this.ROTATION_180 },
        ]),
        G = this.makeEdge(this.FACES.BOTTOM_BACK_EDGE, 70, 15, 0, 50, -50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_180 },
          { axis: this.Y_AXIS, rad: this.ROTATION_180 },
        ]),
        v = this.makeEdge(this.FACES.BOTTOM_LEFT_EDGE, 70, 15, -50, 0, -50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_270 },
          { axis: this.Y_AXIS, rad: this.ROTATION_180 },
        ]),
        Q = this.makeEdge(this.FACES.FRONT_RIGHT_EDGE, 70, 15, 50, -50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_0 },
          { axis: this.Y_AXIS, rad: this.ROTATION_90 },
        ]),
        Y = this.makeEdge(this.FACES.BACK_RIGHT_EDGE, 70, 15, 50, 50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_180 },
          { axis: this.Y_AXIS, rad: this.ROTATION_90 },
        ]),
        S = this.makeEdge(this.FACES.BACK_LEFT_EDGE, 70, 15, -50, 50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_180 },
          { axis: this.Y_AXIS, rad: this.ROTATION_270 },
        ]),
        R = this.makeEdge(this.FACES.FRONT_LEFT_EDGE, 70, 15, -50, -50, 0, [
          { axis: this.X_AXIS, rad: this.ROTATION_0 },
          { axis: this.Y_AXIS, rad: this.ROTATION_270 },
        ]),
        X = this.makeCorner(
          this.FACES.TOP_FRONT_LEFT_CORNER,
          15,
          -50,
          -50,
          50,
          [{ axis: this.Z_AXIS, rad: this.ROTATION_0 }]
        ),
        E = this.makeCorner(
          this.FACES.TOP_FRONT_RIGHT_CORNER,
          15,
          50,
          -50,
          50,
          [{ axis: this.Z_AXIS, rad: this.ROTATION_90 }]
        ),
        U = this.makeCorner(this.FACES.TOP_BACK_RIGHT_CORNER, 15, 50, 50, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_180 },
        ]),
        sa = this.makeCorner(this.FACES.TOP_BACK_LEFT_CORNER, 15, -50, 50, 50, [
          { axis: this.Z_AXIS, rad: this.ROTATION_270 },
        ]),
        I = this.makeCorner(
          this.FACES.BOTTOM_FRONT_LEFT_CORNER,
          15,
          -50,
          -50,
          -50,
          [
            { axis: this.Y_AXIS, rad: this.ROTATION_180 },
            { axis: this.Z_AXIS, rad: this.ROTATION_90 },
          ]
        ),
        ca = this.makeCorner(
          this.FACES.BOTTOM_FRONT_RIGHT_CORNER,
          15,
          50,
          -50,
          -50,
          [
            { axis: this.Y_AXIS, rad: this.ROTATION_180 },
            { axis: this.Z_AXIS, rad: this.ROTATION_0 },
          ]
        ),
        Oa = this.makeCorner(
          this.FACES.BOTTOM_BACK_RIGHT_CORNER,
          15,
          50,
          50,
          -50,
          [
            { axis: this.Y_AXIS, rad: this.ROTATION_180 },
            { axis: this.Z_AXIS, rad: this.ROTATION_270 },
          ]
        ),
        Pa = this.makeCorner(
          this.FACES.BOTTOM_BACK_LEFT_CORNER,
          15,
          -50,
          50,
          -50,
          [
            { axis: this.Y_AXIS, rad: this.ROTATION_180 },
            { axis: this.Z_AXIS, rad: this.ROTATION_180 },
          ]
        )
      this.cube.add(f)
      this.cube.add(g)
      this.cube.add(k)
      this.cube.add(r)
      this.cube.add(x)
      this.cube.add(n)
      this.cube.add(z)
      this.cube.add(u)
      this.cube.add(w)
      this.cube.add(y)
      this.cube.add(L)
      this.cube.add(C)
      this.cube.add(G)
      this.cube.add(v)
      this.cube.add(Q)
      this.cube.add(Y)
      this.cube.add(S)
      this.cube.add(R)
      this.cube.add(X)
      this.cube.add(E)
      this.cube.add(U)
      this.cube.add(sa)
      this.cube.add(I)
      this.cube.add(ca)
      this.cube.add(Oa)
      this.cube.add(Pa)
      this.control.add(this.cube)
    }
    this.display.compass &&
      ((f = this.makeCompass(
        'compass',
        0,
        0,
        -55,
        90,
        64,
        this.COMPASS_COLOR,
        this.COMPASS_OPACITY
      )),
      this.control.add(f))
    this.display.controlAxis &&
      ((f = new THREE.AxisHelper(100)),
      (f.name = 'controlAxis'),
      f.rotateX(this.ROTATION_180),
      this.cube.add(f))
    this.display.sceneAxis &&
      ((f = new THREE.AxisHelper(150)),
      (f.name = 'sceneAxis'),
      (f.up = new THREE._0x1(0, 0, 1)),
      this.scene.add(f))
    this.display.cameraAxis &&
      ((f = new THREE.AxisHelper(100)), this.view.add(f))
    this.scene.add(this.control)
  }
  f.prototype.setupLights = function () {
    var f = new THREE.q10(this.ambientColor)
    f.intensity = 0.85
    this.view.add(f)
    f = new THREE.SpotLight(16777215)
    f.lookAt(new THREE._0x1())
    f.position.set(250, -250, 250)
    f.intensity = 1
    var g = new THREE.SpotLight(16777215)
    g.lookAt(new THREE._0x1())
    g.position.set(250, 250, 250)
    g.intensity = 0.4
    this.view.add(f)
    this.view.add(g)
  }
  f.prototype.labelTextTexture = function (f, g) {
    var k = this.labelRotation[g],
      m = document.createElement('canvas')
    m.width = this.labelSize
    m.height = this.labelSize
    var x = m.getContext('2d')
    x.fillStyle = '#aaaaaa'
    x.fillRect(0, 0, m.width, m.height)
    x.save()
    x.translate(m.width / 2, m.height / 2)
    k && x.rotate(THREE.Math.degToRad(k))
    x.font = this.labelFontSize + 'px ' + this.labelFontFamily
    x = m.getContext('2d')
    x.textAlign = 'center'
    x.textBaseline = 'middle'
    x.fillStyle = '#000000'
    x.fillText(f, 0, 0)
    x.restore()
    x.strokeStyle = '#000000'
    k = new THREE.Texture(m)
    k.needsUpdate = !0
    return k
  }
  f.prototype.labelMaterial = function (f, g) {
    var k = this.labelTextTexture(this.labels[g], g)
    k.anisotropy = this.label_anisotropy
    return new THREE.naPhongMaterial({
      color: 11184810,
      opacity: this.LABELS_HOVER_OFF,
      map: k,
      transparent: !0,
    })
  }
  f.prototype.setupMaterials = function () {
    var f = new THREE.q6()
    this.materials.face = new THREE.naBasicMaterial({
      alphaTest: 0.5,
      color: this.FACE_COLOUR,
      opacity: this.FACE_OPACITY_MOUSE_OFF,
      transparent: !0,
    })
    this.materials.face.side = THREE.ds
    if (this.display.labels) {
      this.label_anisotropy = Math.min(
        this.label_anisotropy,
        this.renderer.getMaxAnisotropy()
      )
      var g = this.labelMaterial(f, this.FACES.TOP),
        k = this.labelMaterial(f, this.FACES.FRONT),
        r = this.labelMaterial(f, this.FACES.RIGHT),
        x = this.labelMaterial(f, this.FACES.LEFT),
        n = this.labelMaterial(f, this.FACES.BACK),
        f = this.labelMaterial(f, this.FACES.BOTTOM)
      this.materials.labels = new THREE.naFaceMaterial([r, x, n, k, g, f])
    }
  }
  f.prototype.setView = function (f) {
    this.currentView = f
    if ('undefined' === typeof this.ROTATIONS_PRESET[f])
      return (
        console.warn('view not found', f),
        new Promise(function (f) {
          f()
        })
      )
    var g = this.ROTATIONS_PRESET[f]
    this.dispatchEvent({
      type: FOUR.EVENT.UPDATE,
      view: f,
      direction: {
        yaw: THREE.Math.degToRad(g[0]),
        pitch: THREE.Math.degToRad(g[1]),
      },
    })
    this.showArrows(f)
  }
  f.prototype.tweenControlOpacity = function (f, g, k) {
    var m = this
    return new Promise(function (r) {
      function n(f, g) {
        Array.isArray(f) &&
          f.forEach(function (f) {
            n(f, g)
          })
        f instanceof THREE.MultiMaterial
          ? f.materials.forEach(function (f) {
              f.opacity = g
            })
          : f instanceof HTMLElement
          ? (f.style.opacity = g)
          : (f.opacity = g)
      }
      var x = { opacity: k },
        x = new b4.Tween({ opacity: g }).to(x, 1e3)
      x.easing(b4.Easing.Cubic.InOut)
      x.onComplete(function () {
        n(f, this.opacity)
        m.render()
        m.renderContinuous = !1
        r()
      })
      x.onUpdate(function () {
        n(f, this.opacity)
        m.render()
      })
      m.renderContinuous = !0
      x.start()
      m.render()
    })
  }
  f.prototype.tweenViewRotationByYawPitch = function (f, g, k) {
    f = new THREE.Euler(-THREE.Math.degToRad(g), THREE.Math.degToRad(f), 0, 'XYZ')
    return this.tweenViewRotation(f, k)
  }
  f.prototype.tweenViewRotation = function (f, g, k, r) {
    var m = this
    return new Promise(function (n) {
      var x
      x = f instanceof THREE.Euler ? f : new THREE.Euler(f, g, k, 'XYZ')
      var u = m.view.quaternion.clone(),
        w = new THREE.Quaternion().setFromEuler(x)
      x = new b4.Tween({ t: 0 }).to({ t: 1 }, r || 1e3)
      x.easing(b4.Easing.Cubic.InOut)
      x.onComplete(function () {
        THREE.Quaternion.slerp(u, w, m.view.quaternion, this.t)
        m.render()
        m.renderContinuous = !1
        n()
      })
      x.onUpdate(function () {
        THREE.Quaternion.slerp(u, w, m.view.quaternion, this.t)
        m.render()
      })
      m.renderContinuous = !0
      x.start()
      m.render()
    })
  }
  f.prototype.update = function () {
    this.updateTween && b4.update()
    this.renderContinuous && requestAnimationFrame(this.update.bind(this))
  }
  f.prototype.updateOrientation = function () {
    var f = new THREE.Euler(
      this.viewport.camera.rotation.x,
      this.viewport.camera.rotation.y,
      this.viewport.camera.rotation.z,
      'XYZ'
    )
    this.view.quaternion.setFromEuler(f)
    this.showArrows(-1)
    this.render()
  }
  f.prototype.setupHtmlUI = function () {
    this.arrows.up = this.createDivArrow('top')
    this.arrows.down = this.createDivArrow('bottom')
    this.arrows.left = this.createDivArrow('left')
    this.arrows.right = this.createDivArrow('right')
    this.domElement.appendChild(this.arrows.up)
    this.domElement.appendChild(this.arrows.down)
    this.domElement.appendChild(this.arrows.left)
    this.domElement.appendChild(this.arrows.right)
  }
  f.prototype.showArrows = function (f) {
    f = 'undefined' !== typeof this.ARROWS_MAP[f] ? 'block' : 'none'
    this.arrows.up.style.display = f
    this.arrows.down.style.display = f
    this.arrows.left.style.display = f
    this.arrows.right.style.display = f
  }
  f.prototype.createDivArrow = function (f) {
    var g = document.createElement('div'),
      k = document.createElement('div'),
      m =
        (Math.min(this.domElement.clientWidth, this.domElement.clientHeight) /
          100) *
        7
    g.style.display = 'none'
    g.style.cursor = 'pointer'
    g.style.position = 'absolute'
    k.style.width = 0
    k.style.height = 0
    var x = m + 'px solid transparent'
    g.style[f] = '2%'
    switch (f) {
      case 'top':
      case 'bottom':
        g.style.left = '50%'
        g.style['margin-left'] = -m + 'px'
        k.style['border-left'] = x
        k.style['border-right'] = x
        break
      case 'left':
      case 'right':
        ;(g.style.top = '50%'),
          (g.style['margin-top'] = -m / 2 + 'px'),
          (k.style['border-top'] = x),
          (k.style['border-bottom'] = x)
    }
    k.style[
      'border-' +
        { top: 'bottom', bottom: 'top', left: 'right', right: 'left' }[f]
    ] = m + 'px solid #666666'
    g.appendChild(k)
    return g
  }
  f.prototype.tryToMapRoll = function (f) {
    var g = this.ARROWS_MAP[this.currentView]
    'undefined' !== typeof g && this.setView(g[f])
  }
  f.prototype.onArrowUp = function () {
    this.tryToMapRoll(0)
  }
  f.prototype.onArrowRight = function () {
    this.tryToMapRoll(1)
  }
  f.prototype.onArrowDown = function () {
    this.tryToMapRoll(2)
  }
  f.prototype.onArrowLeft = function () {
    this.tryToMapRoll(3)
  }
  return f
})()
THREE._0x2Utils = {
  computeTangents: function (f) {
    function m(f, g, k) {
      C.fromArray(x, 3 * f)
      G.fromArray(x, 3 * g)
      v.fromArray(x, 3 * k)
      Q.fromArray(z, 2 * f)
      Y.fromArray(z, 2 * g)
      S.fromArray(z, 2 * k)
      var m = G.x - C.x,
        n = v.x - C.x,
        r = G.y - C.y,
        u = v.y - C.y,
        w = G.z - C.z,
        E = v.z - C.z,
        I = Y.x - Q.x,
        U = S.x - Q.x,
        V = Y.y - Q.y,
        ca = S.y - Q.y,
        ga = 1 / (I * ca - U * V)
      R.set((ca * m - V * n) * ga, (ca * r - V * u) * ga, (ca * w - V * E) * ga)
      X.set((I * n - U * m) * ga, (I * u - U * r) * ga, (I * E - U * w) * ga)
      y[f].add(R)
      y[g].add(R)
      y[k].add(R)
      L[f].add(X)
      L[g].add(X)
      L[k].add(X)
    }
    function g(f) {
      Oa.fromArray(n, 3 * f)
      Pa.copy(Oa)
      Ka = y[f]
      I.copy(Ka)
      I.sub(Oa.multiplyScalar(Oa.dot(Ka))).normalize()
      ca.crossVectors(Pa, Ka)
      Ha = ca.dot(L[f])
      V = 0 > Ha ? -1 : 1
      w[4 * f] = I.x
      w[4 * f + 1] = I.y
      w[4 * f + 2] = I.z
      w[4 * f + 3] = V
    }
    var k = f.index,
      r = f.attributes
    if (
      null === k ||
      void 0 === r.position ||
      void 0 === r.normal ||
      void 0 === r.uv
    )
      console.warn(
        'THREE._0x2: Missing required attributes (index, position, normal or uv) in _0x2.computeTangents()'
      )
    else {
      var k = k.array,
        x = r.position.array,
        n = r.normal.array,
        z = r.uv.array,
        u = x.length / 3
      void 0 === r.tangent &&
        f.addAttribute('tangent', new THREE._0x3(new Float32Array(4 * u), 4))
      for (var w = r.tangent.array, y = [], L = [], r = 0; r < u; r++)
        (y[r] = new THREE._0x1()), (L[r] = new THREE._0x1())
      var C = new THREE._0x1(),
        G = new THREE._0x1(),
        v = new THREE._0x1(),
        Q = new THREE.vt2(),
        Y = new THREE.vt2(),
        S = new THREE.vt2(),
        R = new THREE._0x1(),
        X = new THREE._0x1()
      f = f.groups
      0 === f.length && (f = [{ start: 0, count: k.length }])
      r = 0
      for (u = f.length; r < u; ++r)
        for (
          var E = f[r], U = E.start, sa = E.count, E = U, U = U + sa;
          E < U;
          E += 3
        )
          m(k[E + 0], k[E + 1], k[E + 2])
      for (
        var I = new THREE._0x1(),
          ca = new THREE._0x1(),
          Oa = new THREE._0x1(),
          Pa = new THREE._0x1(),
          V,
          Ka,
          Ha,
          r = 0,
          u = f.length;
        r < u;
        ++r
      )
        for (E = f[r], U = E.start, sa = E.count, E = U, U += sa; E < U; E += 3)
          g(k[E + 0]), g(k[E + 1]), g(k[E + 2])
    }
  },
  mergeBufferGeometries: function (f, m) {
    for (
      var g = null !== f[0].index,
        k = new Set(Object.keys(f[0].attributes)),
        r = new Set(Object.keys(f[0].morphAttributes)),
        x = {},
        n = {},
        z = new THREE._0x2(),
        u = 0;
      u < f.length;
      ++u
    ) {
      var w = f[u]
      if (g !== (null !== w.index)) return null
      for (var y in w.attributes) {
        if (!k.has(y)) return null
        void 0 === x[y] && (x[y] = [])
        x[y].push(w.attributes[y])
      }
      for (y in w.morphAttributes) {
        if (!r.has(y)) return null
        void 0 === n[y] && (n[y] = [])
        n[y].push(w.morphAttributes[y])
      }
      z.userData.mergedUserData = z.userData.mergedUserData || []
      z.userData.mergedUserData.push(w.userData)
      if (m) {
        if (!g && void 0 === w.attributes.position) return null
        ;(null != z.groups && 0 != z.groups.length) ||
          z.addGroup(0, 0, w.groups[0].materialIndex)
        for (var L in w.groups) z.groups[0].count += w.groups[L].count
      }
    }
    if (g) {
      k = 0
      r = []
      for (u = 0; u < f.length; ++u) {
        w = f[u].index
        for (g = 0; g < w.count; ++g) r.push(w.getX(g) + k)
        k += f[u].attributes.position.count
      }
      z.setIndex(r)
    }
    for (y in x) {
      u = this.merge_0x3s(x[y])
      if (!u) return null
      z.addAttribute(y, u)
    }
    for (y in n) {
      x = n[y][0].length
      if (0 === x) break
      z.morphAttributes = z.morphAttributes || {}
      z.morphAttributes[y] = []
      for (u = 0; u < x; ++u) {
        k = []
        for (g = 0; g < n[y].length; ++g) k.push(n[y][g][u])
        g = this.merge_0x3s(k)
        if (!g) return null
        z.morphAttributes[y].push(g)
      }
    }
    return z
  },
  merge_0x3s: function (f) {
    for (var m, g, k, r = 0, x = 0; x < f.length; ++x) {
      var n = f[x]
      if (n.isInterleaved_0x3) return null
      void 0 === m && (m = n.array.constructor)
      if (m !== n.array.constructor) return null
      void 0 === g && (g = n.itemSize)
      if (g !== n.itemSize) return null
      void 0 === k && (k = n.normalized)
      if (k !== n.normalized) return null
      r += n.array.length
    }
    m = new m(r)
    for (x = r = 0; x < f.length; ++x)
      m.set(f[x].array, r), (r += f[x].array.length)
    return new THREE._0x3(m, g, k)
  },
  interleaveAttributes: function (f) {
    for (var m, g = 0, k = 0, r = 0, x = f.length; r < x; ++r) {
      var n = f[r]
      void 0 === m && (m = n.array.constructor)
      if (m !== n.array.constructor)
        return (
          console.warn(
            'AttributeBuffers of different types cannot be interleaved'
          ),
          null
        )
      g += n.array.length
      k += n.itemSize
    }
    m = new THREE.InterleavedBuffer(new m(g), k)
    for (
      var g = 0,
        k = [],
        r = ['getX', 'getY', 'getZ', 'getW'],
        z = ['setX', 'setY', 'setZ', 'setW'],
        u = 0,
        x = f.length;
      u < x;
      u++
    ) {
      var n = f[u],
        w = n.itemSize,
        y = n.count,
        L = new THREE.Interleaved_0x3(m, w, g, n.normalized)
      k.push(L)
      for (var g = g + w, C = 0; C < y; C++)
        for (var G = 0; G < w; G++) L[z[G]](C, n[r[G]](C))
    }
    return k
  },
  estimateBytesUsed: function (f) {
    var m = 0,
      g
    for (g in f.attributes)
      var k = f.getAttribute(g),
        m = m + k.count * k.itemSize * k.array.BYTES_PER_ELEMENT
    f = f.getIndex()
    return (m += f ? f.count * f.itemSize * f.array.BYTES_PER_ELEMENT : 0)
  },
  mergeVertices: function (f, m) {
    m = Math.max(void 0 === m ? 1e-4 : m, Number.EPSILON)
    for (
      var g = {},
        k = f.getIndex(),
        r = f.getAttribute('position'),
        x = k ? k.count : r.count,
        n = 0,
        z = Object.keys(f.attributes),
        u = {},
        w = {},
        r = [],
        y = ['getX', 'getY', 'getZ', 'getW'],
        L = $jscomp.makeIterator(z),
        C = L.next();
      !C.done;
      C = L.next()
    ) {
      var G = C.value
      u[G] = []
      var v = f.morphAttributes[G]
      v &&
        (w[G] = Array(v.length)
          .fill()
          .map(function () {
            return []
          }))
    }
    for (var Q = Math.pow(10, Math.log10(1 / m)), L = 0; L < x; L++) {
      for (var Y = k ? k.getX(L) : L, S = '', R = 0, C = z.length; R < C; R++)
        for (
          var G = z[R], X = f.getAttribute(G), E = X.itemSize, G = 0;
          G < E;
          G++
        )
          S += ~~(X[y[G]](Y) * Q) + ','
      if (S in g) r.push(g[S])
      else {
        R = 0
        for (C = z.length; R < C; R++)
          for (
            var G = z[R],
              X = f.getAttribute(G),
              v = f.morphAttributes[G],
              E = X.itemSize,
              U = u[G],
              sa = w[G],
              G = 0;
            G < E;
            G++
          ) {
            var I = y[G]
            U.push(X[I](Y))
            if (v)
              for (var ca = 0, Oa = v.length; ca < Oa; ca++)
                sa[ca].push(v[ca][I](Y))
          }
        g[S] = n
        r.push(n)
        n++
      }
    }
    g = f.clone()
    L = 0
    for (C = z.length; L < C; L++)
      if (
        ((G = z[L]),
        (n = f.getAttribute(G)),
        (x = new n.array.constructor(u[G])),
        n.isInterleaved_0x3
          ? (X = new THREE._0x3(x, n.itemSize, n.itemSize))
          : ((X = f.getAttribute(G).clone()), X.setArray(x)),
        g.addAttribute(G, X),
        G in w)
      )
        for (R = 0; R < w[G].length; R++)
          (x = f.morphAttributes[G][R].clone()),
            x.setArray(new x.array.constructor(w[G][R])),
            (g.morphAttributes[G][R] = x)
    z = Uint8Array
    r.length >= Math.pow(2, 8) && (z = Uint16Array)
    r.length >= Math.pow(2, 16) && (z = Uint32Array)
    z = new z(r)
    r = null
    null === k
      ? (r = new THREE._0x3(z, 1))
      : ((r = f.getIndex().clone()), r.setArray(z))
    g.setIndex(r)
    return g
  },
}
